var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.226,1,1.434]],["body/controllers/AppController.html",[0,2.122,1,2.481,2,1.789,3,0.676,4,0.676,5,0.55,6,2.978,7,0.55,8,2.481,9,3.533,10,1.343,11,0.059,12,3.748,13,1.132,14,1.944,15,2.978,16,0.676,17,0.042,18,2.978,19,1.789,20,0.042,21,0.05,22,0.042]],["title/modules/AppModule.html",[23,1.226,24,1.434]],["body/modules/AppModule.html",[1,2.317,2,1.769,3,0.506,4,0.749,5,0.412,7,0.412,8,2.068,10,1.454,11,0.06,13,0.847,14,1.935,15,2.228,16,0.506,17,0.032,20,0.032,21,0.042,22,0.032,23,2.192,24,2.785,25,1.15,26,1.338,27,1.848,28,1.848,29,1.15,30,2.737,31,1.848,32,2.228,33,2.228,34,2.228,35,1.935,36,1.024,37,2.443,38,1.848,39,1.848,40,2.805,41,1.306,42,2.945,43,2.945,44,4.418,45,4.418,46,4.153,47,4.418,48,2.945,49,2.465,50,2.465,51,3.299,52,3.299,53,2.945,54,2.443,55,2.945,56,2.945,57,2.945,58,3.707,59,2.805,60,2.805,61,2.805,62,2.805,63,2.228,64,2.228,65,2.805,66,2.805,67,2.805,68,2.805]],["title/injectables/AppService.html",[14,1.054,69,0.906]],["body/injectables/AppService.html",[3,0.696,4,0.696,5,0.567,7,0.567,8,2.525,10,1.166,11,0.059,13,1.166,14,1.855,16,0.696,17,0.044,20,0.044,21,0.051,22,0.044,69,1.594,70,2.154,71,3.067,72,2.983]],["title/classes/Calc.html",[17,0.029,73,0.557]],["body/classes/Calc.html",[3,0.363,4,0.363,5,0.432,7,0.296,11,0.061,16,0.627,17,0.039,20,0.048,21,0.033,22,0.023,36,0.437,41,1.434,73,0.639,74,0.961,75,1.124,76,1.666,77,2.293,78,2.604,79,2.271,80,2.372,81,2.148,82,2.014,83,1.941,84,1.642,85,2.014,86,1.94,87,1.526,88,1.913,89,1.405,90,1.229,91,1.6,92,2.014,93,2.014,94,2.014,95,1.6,96,0.518,97,1.207,98,0.961,99,1.94,100,1.434,101,2.014,102,0.826,103,1.882,104,0.826,105,2.014,106,2.014,107,2.014,108,1.327,109,1.327,110,1.124,111,1.124,112,2.257,113,2.639,114,1.66,115,1.405,116,1.124,117,1.05,118,0.961,119,1.124,120,1.94,121,1.94,122,1.327,123,1.327,124,1.327,125,2.271,126,1.327,127,1.327,128,1.642,129,0.961,130,1.405,131,0.826,132,1.327,133,1.124,134,1.124,135,1.327,136,1.124,137,1.327,138,1.941,139,0.961,140,1.327,141,1.124,142,1.124,143,1.207,144,0.961,145,0.826,146,1.124,147,1.426,148,2.135,149,2.522,150,2.522,151,1.642,152,1.642,153,2.522,154,1.327,155,1.94,156,1.327,157,1.327,158,2.293,159,1.327,160,1.94,161,1.94]],["title/controllers/CalcController.html",[0,1.226,162,1.434]],["body/controllers/CalcController.html",[0,1.338,2,1.338,3,0.506,4,0.506,5,0.412,7,0.544,9,2.945,10,1.254,11,0.06,13,0.847,16,0.506,17,0.047,18,2.228,19,1.338,20,0.055,21,0.042,22,0.032,35,1.52,41,1.306,72,2.443,73,0.901,76,1.722,87,1.334,89,1.769,90,0.847,96,0.721,100,1.463,102,1.15,103,1.15,104,1.15,117,1.119,144,1.338,147,1.52,151,2.633,162,2.068,163,2.228,164,2.805,165,2.443,166,2.945,167,2.228,168,2.36,169,2.228,170,2.805,171,2.805,172,2.443,173,3.707,174,3.51,175,3.707,176,3.111,177,2.945,178,2.443,179,2.945,180,2.945,181,2.443,182,2.443,183,1.848,184,2.805,185,2.228,186,1.883,187,2.228,188,2.228,189,2.228,190,2.805,191,3.707,192,2.805,193,2.805,194,1.848,195,2.805]],["title/modules/CalcModule.html",[23,1.226,35,1.054]],["body/modules/CalcModule.html",[2,1.991,3,0.608,4,0.608,5,0.495,7,0.495,10,1.429,11,0.06,13,1.019,16,0.608,17,0.038,20,0.038,21,0.047,22,0.038,23,2.161,25,1.383,26,1.609,27,2.223,28,2.223,29,1.383,30,2.985,31,2.223,35,2.11,36,1.075,37,2.749,38,2.223,39,2.223,41,1.47,162,2.527,186,2.031,187,2.68,196,2.68,197,2.68,198,3.373,199,2.68,200,3.373]],["title/injectables/CalcService.html",[69,0.906,186,1.054]],["body/injectables/CalcService.html",[3,0.148,4,0.148,5,0.121,7,0.546,10,0.776,11,0.061,13,0.249,16,0.148,17,0.009,19,1.345,20,0.048,21,0.026,22,0.009,36,0.696,42,1.137,49,1.572,50,1.572,54,0.943,55,1.137,69,0.504,70,0.459,73,0.862,76,1.712,78,2.174,79,1.875,80,1.572,81,2.112,83,1.059,86,0.543,87,1.416,88,1.784,89,0.393,90,1.123,91,2.405,95,1.137,96,0.956,97,0.587,98,0.683,100,1.373,102,1.524,103,1.706,104,1.524,111,0.459,112,2.076,113,2.127,114,1.896,115,1.082,117,0.914,118,0.683,125,1.059,128,0.798,129,1.082,130,1.53,133,0.798,138,1.266,139,0.683,141,1.266,142,0.798,143,0.93,145,1.657,146,0.798,147,1.524,148,2.567,152,1.433,165,1.495,166,1.137,167,1.137,168,1.445,174,1.802,177,2.041,179,1.137,180,1.137,181,2.94,182,0.943,185,0.654,186,0.93,188,0.654,189,0.654,194,2.304,199,0.654,201,0.654,202,1.431,203,3.206,204,1.431,205,1.802,206,1.431,207,2.268,208,0.943,209,1.431,210,1.431,211,1.137,212,1.431,213,1.431,214,1.431,215,3.675,216,1.898,217,1.898,218,1.431,219,1.431,220,1.431,221,1.431,222,1.431,223,1.431,224,1.431,225,1.431,226,1.431,227,0.823,228,1.431,229,0.823,230,1.431,231,1.431,232,1.431,233,0.823,234,1.431,235,1.431,236,1.137,237,2.268,238,2.268,239,2.268,240,1.431,241,3.897,242,2.569,243,1.431,244,4.042,245,1.431,246,1.137,247,1.898,248,1.495,249,1.508,250,1.431,251,1.431,252,1.431,253,1.431,254,1.431,255,1.431,256,1.137,257,1.431,258,1.431,259,1.431,260,1.431,261,1.431,262,1.431,263,1.431,264,1.431,265,0.823,266,0.823,267,0.823,268,0.823,269,1.431,270,0.823,271,4.39,272,4.648,273,2.547,274,3.206,275,1.431,276,0.823,277,2.268,278,2.268,279,2.268,280,1.431,281,3.719,282,0.823,283,1.898,284,1.802,285,1.431,286,1.431,287,0.823,288,1.431,289,0.823,290,1.431,291,2.268,292,3.028,293,1.431,294,1.431,295,1.431,296,0.823,297,2.041,298,1.431,299,0.823,300,1.431,301,1.137,302,1.431,303,1.898,304,2.569,305,2.569,306,3.206,307,1.431,308,1.431,309,1.431,310,1.431,311,0.823,312,1.137,313,3.028,314,1.431,315,1.431,316,1.431,317,1.431,318,1.898,319,1.431,320,1.431,321,0.823,322,1.137,323,1.431,324,0.823,325,1.431,326,0.823,327,0.823,328,0.823,329,0.823,330,0.823,331,0.823,332,0.823,333,2.569,334,0.823,335,0.823,336,1.431,337,0.823,338,3.028,339,0.823,340,0.823,341,0.823,342,0.823,343,0.823,344,0.823,345,1.898,346,1.898,347,1.431,348,1.431,349,1.431,350,1.431,351,0.823,352,0.823,353,1.431,354,0.823,355,1.431,356,0.823,357,1.898,358,1.431,359,2.818,360,3.206,361,0.823,362,0.823,363,1.431,364,1.431,365,2.268,366,2.268,367,1.898,368,0.823,369,1.431,370,0.823,371,1.431,372,0.823,373,0.823,374,0.823,375,0.654,376,0.823,377,0.823,378,0.823,379,0.823,380,0.823,381,0.823,382,0.823,383,0.823,384,0.823,385,0.823,386,0.823,387,0.823,388,0.823,389,0.823,390,1.431,391,0.823,392,1.431,393,1.431,394,1.431,395,0.823,396,0.823,397,0.823,398,1.431]],["title/classes/CurrentItem.html",[17,0.029,143,1.054]],["body/classes/CurrentItem.html",[3,0.357,4,0.357,5,0.426,7,0.426,11,0.061,16,0.621,17,0.039,20,0.039,21,0.033,22,0.022,36,0.429,41,1.538,73,0.429,74,0.944,75,1.103,76,1.337,77,1.303,78,2.116,79,1.92,80,2.357,81,2.137,83,2.116,84,1.62,87,1.487,88,1.555,89,1.386,90,1.145,96,0.509,97,1.191,98,0.944,99,1.303,100,1.424,102,0.811,103,1.874,104,0.811,108,1.303,109,1.303,110,1.103,111,1.103,112,2.349,113,2.628,114,1.642,115,1.386,116,1.103,117,1.039,118,0.944,119,1.103,120,2.269,121,1.914,122,1.303,123,1.303,124,1.303,125,2.436,126,1.303,127,1.303,128,1.62,129,0.944,130,1.642,131,0.811,132,1.303,133,1.103,134,1.103,135,1.303,136,1.62,137,1.914,138,2.357,139,1.386,140,1.914,141,1.62,142,1.62,143,1.555,144,1.386,145,1.191,146,1.62,147,1.411,148,2.592,149,2.952,150,2.952,151,2.116,152,2.116,153,2.952,154,1.914,155,1.914,156,1.303,157,1.303,158,2.784,159,1.914,160,2.5,161,2.5,399,1.978,400,1.978,401,1.978,402,1.978]],["title/injectables/MathService.html",[36,0.557,69,0.906]],["body/injectables/MathService.html",[3,0.331,4,0.331,5,0.269,7,0.403,10,0.829,11,0.06,13,0.554,16,0.331,17,0.021,19,1.571,20,0.051,21,0.031,22,0.021,36,0.596,43,2.182,69,0.968,70,1.023,72,1.81,81,1.311,84,1.532,87,1.581,90,1.241,96,0.472,97,1.126,98,1.571,100,1.501,102,1.605,103,1.87,104,1.605,110,1.532,112,0.875,115,1.745,116,2.04,117,0.829,118,1.745,119,2.04,129,1.311,131,1.923,134,2.445,136,1.023,139,1.311,144,0.875,145,1.685,147,1.837,165,1.81,181,3.092,182,2.17,194,2.808,208,3.092,211,2.182,215,2.905,236,2.182,273,2.182,284,1.457,297,3.385,322,1.457,403,1.457,404,2.747,405,2.17,406,2.747,407,2.747,408,2.747,409,2.747,410,2.747,411,2.182,412,2.17,413,2.182,414,2.747,415,2.747,416,2.747,417,2.747,418,2.747,419,2.747,420,2.747,421,2.747,422,4.11,423,2.747,424,2.747,425,2.182,426,2.747,427,1.834,428,5.015,429,1.834,430,1.834,431,1.834,432,2.747,433,1.834,434,2.747,435,2.747,436,2.747,437,1.834,438,1.834,439,1.834,440,1.834,441,1.834,442,1.834,443,1.834,444,1.834,445,1.834,446,1.834,447,1.834,448,1.834,449,1.834,450,1.834,451,1.834,452,1.834,453,3.656,454,1.834,455,1.834,456,1.834,457,1.834,458,1.834,459,1.834,460,1.834]],["title/classes/Operator.html",[17,0.029,88,1.054]],["body/classes/Operator.html",[3,0.345,4,0.345,5,0.495,7,0.281,11,0.061,16,0.609,17,0.038,20,0.038,21,0.032,22,0.022,36,0.615,41,1.404,73,0.415,74,0.913,75,1.067,76,1.315,77,1.261,78,2.083,79,2.224,80,1.884,81,2.2,83,1.581,84,1.067,87,1.51,88,1.711,89,0.913,90,1.127,96,0.492,97,1.162,98,0.913,99,1.261,100,1.471,102,0.784,103,2.031,104,0.784,108,1.261,109,1.261,110,1.581,111,1.581,112,2.364,113,2.822,114,1.992,115,1.781,116,1.581,117,1.261,118,1.353,119,1.581,120,2.225,121,1.868,122,1.261,123,1.261,124,1.868,125,2.475,126,1.868,127,1.868,128,2.083,129,1.353,130,1.611,131,1.162,132,1.868,133,1.581,134,1.581,135,1.868,136,1.067,137,1.261,138,1.884,139,0.913,140,1.261,141,1.067,142,1.067,143,1.162,144,0.913,145,0.784,146,1.067,147,1.384,148,2.083,149,2.46,150,2.46,151,1.581,152,1.581,153,2.46,154,1.261,155,1.868,156,1.261,157,1.261,158,2.225,159,1.261,160,1.868,161,1.868,461,1.913,462,1.913,463,1.913,464,1.913]],["title/classes/SendCalcDto.html",[17,0.029,168,1.226]],["body/classes/SendCalcDto.html",[3,0.637,4,0.637,5,0.518,7,0.518,10,1.067,11,0.059,16,0.637,17,0.049,19,2.206,20,0.04,21,0.049,22,0.04,41,1.512,73,0.931,74,1.686,76,1.736,87,1.296,90,1.067,96,0.909,97,1.759,100,1.245,168,2.048,169,2.807,176,2.829,178,2.829,183,2.829,205,3.41,465,3.41,466,2.807,467,4.623,468,3.533,469,2.807]],["title/coverage.html",[470,2.778]],["body/coverage.html",[0,2.011,1,1.914,5,0.503,6,2.725,11,0.059,14,1.406,17,0.054,20,0.039,21,0.048,22,0.039,29,1.406,36,0.744,69,1.608,71,2.725,73,0.744,75,2.546,88,1.406,90,1.036,131,1.406,143,1.406,145,1.406,162,1.914,163,2.725,168,1.637,186,1.406,201,2.725,403,2.725,465,2.725,466,2.725,470,2.725,471,2.725,472,3.43,473,3.43,474,4.975,475,4.564,476,4.216,477,4.564,478,3.43,479,4.216,480,3.43,481,3.43,482,3.43,483,2.725,484,3.43,485,3.43]],["title/dependencies.html",[26,1.473,486,2.152]],["body/dependencies.html",[11,0.06,13,1.117,17,0.05,20,0.042,21,0.05,22,0.042,26,1.765,63,2.939,64,2.939,412,2.438,469,2.939,487,4.716,488,3.699,489,3.699,490,3.699,491,3.699,492,3.699,493,3.699,494,3.699,495,3.699,496,3.699,497,3.699,498,3.699,499,3.699,500,3.699,501,3.699,502,3.699,503,3.699,504,3.699]],["title/miscellaneous/functions.html",[405,2.035,505,1.709]],["body/miscellaneous/functions.html",[11,0.056,20,0.043,21,0.051,22,0.043,29,1.961,49,2.136,50,2.136,52,3.042,53,3.042,73,0.831,96,0.985,131,1.57,172,2.524,249,3.042,405,2.524,425,3.042,483,3.042,505,3.042,506,3.83,507,3.83,508,3.83,509,3.83,510,3.83,511,3.042,512,3.83,513,3.83,514,3.042]],["title/index.html",[96,0.553,515,2.152,516,2.152]],["body/index.html",[7,0.381,8,2.498,11,0.057,20,0.04,21,0.04,22,0.029,25,1.065,29,1.444,48,3.175,49,1.965,50,2.39,51,3.175,54,2.824,56,2.065,57,2.065,73,0.564,76,1.408,86,2.322,87,0.785,114,1.24,117,1.064,130,1.24,172,2.634,176,1.713,178,2.634,183,1.713,208,1.713,246,2.799,248,1.713,256,2.065,301,2.065,312,2.065,375,2.065,411,2.065,412,1.713,413,2.799,471,3.175,511,2.799,514,2.799,517,3.523,518,3.997,519,2.599,520,3.523,521,2.599,522,3.523,523,4.285,524,3.523,525,2.599,526,2.599,527,2.599,528,2.599,529,3.523,530,2.599,531,2.599,532,2.599,533,2.599,534,3.523,535,2.599,536,2.599,537,3.523,538,2.599,539,2.599,540,2.599,541,2.599,542,2.599,543,3.997,544,4.478,545,3.997,546,2.599,547,2.599,548,4.478,549,3.997,550,2.599,551,2.599,552,2.599,553,2.599,554,2.599,555,2.599,556,2.799,557,2.599,558,3.997,559,3.523,560,2.599,561,2.599,562,2.599,563,2.599,564,2.599,565,2.599,566,2.599,567,2.599,568,2.599,569,2.799,570,2.599,571,2.599,572,2.599,573,2.599,574,2.599,575,2.599,576,3.523,577,2.599,578,2.599,579,2.599,580,2.599,581,2.599,582,2.599,583,2.599,584,2.599,585,2.599,586,2.599,587,2.599,588,2.599,589,3.523,590,2.599,591,2.599,592,2.599,593,2.599,594,2.599,595,2.599,596,2.599,597,2.599,598,2.599,599,2.599,600,2.599,601,2.599,602,2.599,603,2.599,604,2.599,605,2.599,606,2.599,607,2.599,608,2.599]],["title/modules.html",[25,1.433]],["body/modules.html",[11,0.052,20,0.045,21,0.052,22,0.045,24,2.233,25,1.641,35,1.641,556,3.672,609,4.622,610,4.622,611,4.622]],["title/overview.html",[612,2.778]],["body/overview.html",[2,1.699,11,0.058,14,1.901,20,0.04,21,0.049,22,0.04,23,1.699,24,2.858,25,1.459,26,1.699,27,2.346,28,2.346,29,1.459,30,2.346,31,2.346,32,2.828,33,2.828,34,2.828,35,2.082,36,1.046,37,2.842,38,2.346,39,2.346,70,1.986,74,1.699,117,1.302,186,1.901,196,2.828,197,2.828,248,2.346,569,2.828,612,2.828]]],"invertedIndex":[["",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Calc.html":{},"controllers/CalcController.html":{},"modules/CalcModule.html":{},"injectables/CalcService.html":{},"classes/CurrentItem.html":{},"injectables/MathService.html":{},"classes/Operator.html":{},"classes/SendCalcDto.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["0",{"_index":292,"title":{},"body":{"injectables/CalcService.html":{}}}],["0.1.13",{"_index":500,"title":{},"body":{"dependencies.html":{}}}],["0.13.1",{"_index":496,"title":{},"body":{"dependencies.html":{}}}],["0.4.0",{"_index":495,"title":{},"body":{"dependencies.html":{}}}],["1",{"_index":114,"title":{},"body":{"classes/Calc.html":{},"injectables/CalcService.html":{},"classes/CurrentItem.html":{},"classes/Operator.html":{},"index.html":{}}}],["1+2",{"_index":247,"title":{},"body":{"injectables/CalcService.html":{}}}],["1+2*3",{"_index":257,"title":{},"body":{"injectables/CalcService.html":{}}}],["1/1",{"_index":475,"title":{},"body":{"coverage.html":{}}}],["10.3.1",{"_index":497,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":474,"title":{},"body":{"coverage.html":{}}}],["12/15",{"_index":478,"title":{},"body":{"coverage.html":{}}}],["1400",{"_index":595,"title":{},"body":{"index.html":{}}}],["2",{"_index":117,"title":{},"body":{"classes/Calc.html":{},"controllers/CalcController.html":{},"injectables/CalcService.html":{},"classes/CurrentItem.html":{},"injectables/MathService.html":{},"classes/Operator.html":{},"index.html":{},"overview.html":{}}}],["2+2",{"_index":246,"title":{},"body":{"injectables/CalcService.html":{},"index.html":{}}}],["2.1.4",{"_index":493,"title":{},"body":{"dependencies.html":{}}}],["2/2",{"_index":476,"title":{},"body":{"coverage.html":{}}}],["3",{"_index":248,"title":{},"body":{"injectables/CalcService.html":{},"index.html":{},"overview.html":{}}}],["3*4/5",{"_index":268,"title":{},"body":{"injectables/CalcService.html":{}}}],["3.0.2",{"_index":502,"title":{},"body":{"dependencies.html":{}}}],["30",{"_index":533,"title":{},"body":{"index.html":{}}}],["36.30",{"_index":161,"title":{},"body":{"classes/Calc.html":{},"classes/CurrentItem.html":{},"classes/Operator.html":{}}}],["4",{"_index":569,"title":{},"body":{"index.html":{},"overview.html":{}}}],["4/5",{"_index":479,"title":{},"body":{"coverage.html":{}}}],["4/6",{"_index":580,"title":{},"body":{"index.html":{}}}],["422",{"_index":314,"title":{},"body":{"injectables/CalcService.html":{}}}],["5/5",{"_index":480,"title":{},"body":{"coverage.html":{}}}],["6",{"_index":259,"title":{},"body":{"injectables/CalcService.html":{}}}],["6.6.6",{"_index":504,"title":{},"body":{"dependencies.html":{}}}],["7",{"_index":261,"title":{},"body":{"injectables/CalcService.html":{}}}],["7.6.15",{"_index":487,"title":{},"body":{"dependencies.html":{}}}],["7/8",{"_index":482,"title":{},"body":{"coverage.html":{}}}],["80",{"_index":477,"title":{},"body":{"coverage.html":{}}}],["8080",{"_index":512,"title":{},"body":{"miscellaneous/functions.html":{}}}],["87",{"_index":481,"title":{},"body":{"coverage.html":{}}}],["9",{"_index":294,"title":{},"body":{"injectables/CalcService.html":{}}}],["a+b",{"_index":135,"title":{},"body":{"classes/Calc.html":{},"classes/CurrentItem.html":{},"classes/Operator.html":{}}}],["a.k.a",{"_index":607,"title":{},"body":{"index.html":{}}}],["actual",{"_index":207,"title":{},"body":{"injectables/CalcService.html":{}}}],["actually",{"_index":132,"title":{},"body":{"classes/Calc.html":{},"classes/CurrentItem.html":{},"classes/Operator.html":{}}}],["addition",{"_index":115,"title":{},"body":{"classes/Calc.html":{},"injectables/CalcService.html":{},"classes/CurrentItem.html":{},"injectables/MathService.html":{},"classes/Operator.html":{}}}],["addition(a",{"_index":427,"title":{},"body":{"injectables/MathService.html":{}}}],["addition(a:string",{"_index":452,"title":{},"body":{"injectables/MathService.html":{}}}],["adds",{"_index":368,"title":{},"body":{"injectables/CalcService.html":{}}}],["agnostic",{"_index":214,"title":{},"body":{"injectables/CalcService.html":{}}}],["allow",{"_index":361,"title":{},"body":{"injectables/CalcService.html":{}}}],["answer",{"_index":567,"title":{},"body":{"index.html":{}}}],["api",{"_index":172,"title":{},"body":{"controllers/CalcController.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["app",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"index.html":{}}}],["app.controller",{"_index":59,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":175,"title":{},"body":{"controllers/CalcController.html":{}}}],["appmodule",{"_index":24,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":14,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["around",{"_index":240,"title":{},"body":{"injectables/CalcService.html":{}}}],["array",{"_index":241,"title":{},"body":{"injectables/CalcService.html":{}}}],["array.from(calc.items",{"_index":391,"title":{},"body":{"injectables/CalcService.html":{}}}],["author",{"_index":604,"title":{},"body":{"index.html":{}}}],["avoid",{"_index":407,"title":{},"body":{"injectables/MathService.html":{}}}],["b",{"_index":428,"title":{},"body":{"injectables/MathService.html":{}}}],["b:string",{"_index":453,"title":{},"body":{"injectables/MathService.html":{}}}],["back",{"_index":522,"title":{},"body":{"index.html":{}}}],["backend",{"_index":540,"title":{},"body":{"index.html":{}}}],["backendstep",{"_index":542,"title":{},"body":{"index.html":{}}}],["before",{"_index":599,"title":{},"body":{"index.html":{}}}],["being",{"_index":140,"title":{},"body":{"classes/Calc.html":{},"classes/CurrentItem.html":{},"classes/Operator.html":{}}}],["body",{"_index":183,"title":{},"body":{"controllers/CalcController.html":{},"classes/SendCalcDto.html":{},"index.html":{}}}],["boolean",{"_index":148,"title":{},"body":{"classes/Calc.html":{},"injectables/CalcService.html":{},"classes/CurrentItem.html":{},"classes/Operator.html":{}}}],["boolean=false",{"_index":155,"title":{},"body":{"classes/Calc.html":{},"classes/CurrentItem.html":{},"classes/Operator.html":{}}}],["bootstrap",{"_index":29,"title":{},"body":{"modules/AppModule.html":{},"modules/CalcModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"overview.html":{}}}],["browse",{"_index":611,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":556,"title":{},"body":{"index.html":{},"modules.html":{}}}],["bugs",{"_index":574,"title":{},"body":{"index.html":{}}}],["build",{"_index":51,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["calc",{"_index":73,"title":{"classes/Calc.html":{}},"body":{"classes/Calc.html":{},"controllers/CalcController.html":{},"injectables/CalcService.html":{},"classes/CurrentItem.html":{},"classes/Operator.html":{},"classes/SendCalcDto.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["calc(calculus",{"_index":380,"title":{},"body":{"injectables/CalcService.html":{}}}],["calc.calculus",{"_index":337,"title":{},"body":{"injectables/CalcService.html":{}}}],["calc.controller",{"_index":200,"title":{},"body":{"modules/CalcModule.html":{}}}],["calc.dto",{"_index":189,"title":{},"body":{"controllers/CalcController.html":{},"injectables/CalcService.html":{}}}],["calc.dto.ts",{"_index":466,"title":{},"body":{"classes/SendCalcDto.html":{},"coverage.html":{}}}],["calc.dto.ts:9",{"_index":468,"title":{},"body":{"classes/SendCalcDto.html":{}}}],["calc.items",{"_index":308,"title":{},"body":{"injectables/CalcService.html":{}}}],["calc.result",{"_index":335,"title":{},"body":{"injectables/CalcService.html":{}}}],["calc.service",{"_index":187,"title":{},"body":{"controllers/CalcController.html":{},"modules/CalcModule.html":{}}}],["calc/calc.module",{"_index":60,"title":{},"body":{"modules/AppModule.html":{}}}],["calc/math.service",{"_index":61,"title":{},"body":{"modules/AppModule.html":{}}}],["calccontroller",{"_index":162,"title":{"controllers/CalcController.html":{}},"body":{"controllers/CalcController.html":{},"modules/CalcModule.html":{},"coverage.html":{}}}],["calcmodule",{"_index":35,"title":{"modules/CalcModule.html":{}},"body":{"modules/AppModule.html":{},"controllers/CalcController.html":{},"modules/CalcModule.html":{},"modules.html":{},"overview.html":{}}}],["calcservice",{"_index":186,"title":{"injectables/CalcService.html":{}},"body":{"controllers/CalcController.html":{},"modules/CalcModule.html":{},"injectables/CalcService.html":{},"coverage.html":{},"overview.html":{}}}],["calculate",{"_index":166,"title":{},"body":{"controllers/CalcController.html":{},"injectables/CalcService.html":{}}}],["calculate(@body",{"_index":193,"title":{},"body":{"controllers/CalcController.html":{}}}],["calculate(sendcalcdto",{"_index":167,"title":{},"body":{"controllers/CalcController.html":{},"injectables/CalcService.html":{}}}],["calculated",{"_index":263,"title":{},"body":{"injectables/CalcService.html":{}}}],["calculator",{"_index":517,"title":{},"body":{"index.html":{}}}],["calculus",{"_index":76,"title":{},"body":{"classes/Calc.html":{},"controllers/CalcController.html":{},"injectables/CalcService.html":{},"classes/CurrentItem.html":{},"classes/Operator.html":{},"classes/SendCalcDto.html":{},"index.html":{}}}],["calculus.split",{"_index":339,"title":{},"body":{"injectables/CalcService.html":{}}}],["called",{"_index":583,"title":{},"body":{"index.html":{}}}],["can't",{"_index":354,"title":{},"body":{"injectables/CalcService.html":{}}}],["catched",{"_index":315,"title":{},"body":{"injectables/CalcService.html":{}}}],["cb",{"_index":582,"title":{},"body":{"index.html":{}}}],["cd",{"_index":541,"title":{},"body":{"index.html":{}}}],["char",{"_index":272,"title":{},"body":{"injectables/CalcService.html":{}}}],["character",{"_index":373,"title":{},"body":{"injectables/CalcService.html":{}}}],["chars",{"_index":281,"title":{},"body":{"injectables/CalcService.html":{}}}],["chars.length",{"_index":382,"title":{},"body":{"injectables/CalcService.html":{}}}],["chars[i",{"_index":359,"title":{},"body":{"injectables/CalcService.html":{}}}],["check",{"_index":271,"title":{},"body":{"injectables/CalcService.html":{}}}],["checked",{"_index":274,"title":{},"body":{"injectables/CalcService.html":{}}}],["checks",{"_index":302,"title":{},"body":{"injectables/CalcService.html":{}}}],["class",{"_index":17,"title":{"classes/Calc.html":{},"classes/CurrentItem.html":{},"classes/Operator.html":{},"classes/SendCalcDto.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Calc.html":{},"controllers/CalcController.html":{},"modules/CalcModule.html":{},"injectables/CalcService.html":{},"classes/CurrentItem.html":{},"injectables/MathService.html":{},"classes/Operator.html":{},"classes/SendCalcDto.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":74,"title":{},"body":{"classes/Calc.html":{},"classes/CurrentItem.html":{},"classes/Operator.html":{},"classes/SendCalcDto.html":{},"overview.html":{}}}],["clean",{"_index":319,"title":{},"body":{"injectables/CalcService.html":{}}}],["cleaner",{"_index":341,"title":{},"body":{"injectables/CalcService.html":{}}}],["clone",{"_index":539,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":32,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_calcmodule",{"_index":196,"title":{},"body":{"modules/CalcModule.html":{},"overview.html":{}}}],["cluster_calcmodule_providers",{"_index":197,"title":{},"body":{"modules/CalcModule.html":{},"overview.html":{}}}],["code",{"_index":54,"title":{},"body":{"modules/AppModule.html":{},"injectables/CalcService.html":{},"index.html":{}}}],["command",{"_index":588,"title":{},"body":{"index.html":{}}}],["completemsg",{"_index":383,"title":{},"body":{"injectables/CalcService.html":{}}}],["compodoc",{"_index":524,"title":{},"body":{"index.html":{}}}],["compose",{"_index":545,"title":{},"body":{"index.html":{}}}],["computer",{"_index":593,"title":{},"body":{"index.html":{}}}],["const",{"_index":333,"title":{},"body":{"injectables/CalcService.html":{}}}],["constructor",{"_index":98,"title":{},"body":{"classes/Calc.html":{},"injectables/CalcService.html":{},"classes/CurrentItem.html":{},"injectables/MathService.html":{},"classes/Operator.html":{}}}],["constructor(calculus",{"_index":99,"title":{},"body":{"classes/Calc.html":{},"classes/CurrentItem.html":{},"classes/Operator.html":{}}}],["constructor(mathservice",{"_index":227,"title":{},"body":{"injectables/CalcService.html":{}}}],["constructor(private",{"_index":18,"title":{},"body":{"controllers/AppController.html":{},"controllers/CalcController.html":{}}}],["constructor(value",{"_index":120,"title":{},"body":{"classes/Calc.html":{},"classes/CurrentItem.html":{},"classes/Operator.html":{}}}],["contains",{"_index":151,"title":{},"body":{"classes/Calc.html":{},"controllers/CalcController.html":{},"classes/CurrentItem.html":{},"classes/Operator.html":{}}}],["continue",{"_index":360,"title":{},"body":{"injectables/CalcService.html":{}}}],["controler",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"controllers/CalcController.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/CalcController.html":{}},"body":{"controllers/AppController.html":{},"controllers/CalcController.html":{},"coverage.html":{}}}],["controller('calc",{"_index":190,"title":{},"body":{"controllers/CalcController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/CalcController.html":{},"modules/CalcModule.html":{},"overview.html":{}}}],["cors",{"_index":507,"title":{},"body":{"miscellaneous/functions.html":{}}}],["coverage",{"_index":470,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":572,"title":{},"body":{"index.html":{}}}],["curr",{"_index":338,"title":{},"body":{"injectables/CalcService.html":{}}}],["curr.hasdot",{"_index":370,"title":{},"body":{"injectables/CalcService.html":{}}}],["curr.hasnegative",{"_index":371,"title":{},"body":{"injectables/CalcService.html":{}}}],["current",{"_index":138,"title":{},"body":{"classes/Calc.html":{},"injectables/CalcService.html":{},"classes/CurrentItem.html":{},"classes/Operator.html":{}}}],["currentitem",{"_index":143,"title":{"classes/CurrentItem.html":{}},"body":{"classes/Calc.html":{},"injectables/CalcService.html":{},"classes/CurrentItem.html":{},"classes/Operator.html":{},"coverage.html":{}}}],["currentitem(curr.value",{"_index":365,"title":{},"body":{"injectables/CalcService.html":{}}}],["data",{"_index":177,"title":{},"body":{"controllers/CalcController.html":{},"injectables/CalcService.html":{}}}],["data.operators.foreach(obj",{"_index":328,"title":{},"body":{"injectables/CalcService.html":{}}}],["deal",{"_index":417,"title":{},"body":{"injectables/MathService.html":{}}}],["decimal",{"_index":441,"title":{},"body":{"injectables/MathService.html":{}}}],["decimal(a).dividedby(b).tofixed",{"_index":460,"title":{},"body":{"injectables/MathService.html":{}}}],["decimal(a).minus(b).tofixed",{"_index":456,"title":{},"body":{"injectables/MathService.html":{}}}],["decimal(a).plus(b).tofixed",{"_index":454,"title":{},"body":{"injectables/MathService.html":{}}}],["decimal(a).times(b).tofixed",{"_index":458,"title":{},"body":{"injectables/MathService.html":{}}}],["decimal.js",{"_index":412,"title":{},"body":{"injectables/MathService.html":{},"dependencies.html":{},"index.html":{}}}],["declarations",{"_index":28,"title":{},"body":{"modules/AppModule.html":{},"modules/CalcModule.html":{},"overview.html":{}}}],["decorators",{"_index":169,"title":{},"body":{"controllers/CalcController.html":{},"classes/SendCalcDto.html":{}}}],["default",{"_index":322,"title":{},"body":{"injectables/CalcService.html":{},"injectables/MathService.html":{}}}],["defined",{"_index":100,"title":{},"body":{"classes/Calc.html":{},"controllers/CalcController.html":{},"injectables/CalcService.html":{},"classes/CurrentItem.html":{},"injectables/MathService.html":{},"classes/Operator.html":{},"classes/SendCalcDto.html":{}}}],["dependencies",{"_index":26,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/CalcModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deployed",{"_index":528,"title":{},"body":{"index.html":{}}}],["description",{"_index":7,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Calc.html":{},"controllers/CalcController.html":{},"modules/CalcModule.html":{},"injectables/CalcService.html":{},"classes/CurrentItem.html":{},"injectables/MathService.html":{},"classes/Operator.html":{},"classes/SendCalcDto.html":{},"index.html":{}}}],["details",{"_index":414,"title":{},"body":{"injectables/MathService.html":{}}}],["development",{"_index":579,"title":{},"body":{"index.html":{}}}],["didn't",{"_index":584,"title":{},"body":{"index.html":{}}}],["division",{"_index":119,"title":{},"body":{"classes/Calc.html":{},"classes/CurrentItem.html":{},"injectables/MathService.html":{},"classes/Operator.html":{}}}],["division(a",{"_index":430,"title":{},"body":{"injectables/MathService.html":{}}}],["division(a:string",{"_index":459,"title":{},"body":{"injectables/MathService.html":{}}}],["docalculate",{"_index":218,"title":{},"body":{"injectables/CalcService.html":{}}}],["docalculate(calc",{"_index":232,"title":{},"body":{"injectables/CalcService.html":{}}}],["docker",{"_index":544,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":471,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["doing",{"_index":409,"title":{},"body":{"injectables/MathService.html":{}}}],["don't",{"_index":560,"title":{},"body":{"index.html":{}}}],["dot",{"_index":152,"title":{},"body":{"classes/Calc.html":{},"injectables/CalcService.html":{},"classes/CurrentItem.html":{},"classes/Operator.html":{}}}],["dot/operator",{"_index":353,"title":{},"body":{"injectables/CalcService.html":{}}}],["dots",{"_index":352,"title":{},"body":{"injectables/CalcService.html":{}}}],["dto",{"_index":180,"title":{},"body":{"controllers/CalcController.html":{},"injectables/CalcService.html":{}}}],["dto/send",{"_index":188,"title":{},"body":{"controllers/CalcController.html":{},"injectables/CalcService.html":{}}}],["during",{"_index":385,"title":{},"body":{"injectables/CalcService.html":{}}}],["each",{"_index":237,"title":{},"body":{"injectables/CalcService.html":{}}}],["easely",{"_index":212,"title":{},"body":{"injectables/CalcService.html":{}}}],["end",{"_index":50,"title":{},"body":{"modules/AppModule.html":{},"injectables/CalcService.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["entities/calc.entity",{"_index":327,"title":{},"body":{"injectables/CalcService.html":{}}}],["equal",{"_index":291,"title":{},"body":{"injectables/CalcService.html":{}}}],["err",{"_index":581,"title":{},"body":{"index.html":{}}}],["error",{"_index":306,"title":{},"body":{"injectables/CalcService.html":{}}}],["ex",{"_index":125,"title":{},"body":{"classes/Calc.html":{},"injectables/CalcService.html":{},"classes/CurrentItem.html":{},"classes/Operator.html":{}}}],["example",{"_index":256,"title":{},"body":{"injectables/CalcService.html":{},"index.html":{}}}],["execute",{"_index":404,"title":{},"body":{"injectables/MathService.html":{}}}],["executed",{"_index":129,"title":{},"body":{"classes/Calc.html":{},"injectables/CalcService.html":{},"classes/CurrentItem.html":{},"injectables/MathService.html":{},"classes/Operator.html":{}}}],["executing",{"_index":236,"title":{},"body":{"injectables/CalcService.html":{},"injectables/MathService.html":{}}}],["execution",{"_index":242,"title":{},"body":{"injectables/CalcService.html":{}}}],["export",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Calc.html":{},"controllers/CalcController.html":{},"modules/CalcModule.html":{},"injectables/CalcService.html":{},"classes/CurrentItem.html":{},"injectables/MathService.html":{},"classes/Operator.html":{},"classes/SendCalcDto.html":{}}}],["exports",{"_index":31,"title":{},"body":{"modules/AppModule.html":{},"modules/CalcModule.html":{},"overview.html":{}}}],["express",{"_index":492,"title":{},"body":{"dependencies.html":{}}}],["fail",{"_index":578,"title":{},"body":{"index.html":{}}}],["false",{"_index":366,"title":{},"body":{"injectables/CalcService.html":{}}}],["fast",{"_index":526,"title":{},"body":{"index.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Calc.html":{},"controllers/CalcController.html":{},"modules/CalcModule.html":{},"injectables/CalcService.html":{},"classes/CurrentItem.html":{},"injectables/MathService.html":{},"classes/Operator.html":{},"classes/SendCalcDto.html":{},"coverage.html":{}}}],["filled",{"_index":309,"title":{},"body":{"injectables/CalcService.html":{}}}],["find",{"_index":585,"title":{},"body":{"index.html":{}}}],["finish",{"_index":94,"title":{},"body":{"classes/Calc.html":{}}}],["first",{"_index":130,"title":{},"body":{"classes/Calc.html":{},"injectables/CalcService.html":{},"classes/CurrentItem.html":{},"classes/Operator.html":{},"index.html":{}}}],["fix",{"_index":590,"title":{},"body":{"index.html":{}}}],["flag",{"_index":150,"title":{},"body":{"classes/Calc.html":{},"classes/CurrentItem.html":{},"classes/Operator.html":{}}}],["float",{"_index":84,"title":{},"body":{"classes/Calc.html":{},"classes/CurrentItem.html":{},"injectables/MathService.html":{},"classes/Operator.html":{}}}],["floating",{"_index":418,"title":{},"body":{"injectables/MathService.html":{}}}],["followed",{"_index":92,"title":{},"body":{"classes/Calc.html":{}}}],["folowed",{"_index":344,"title":{},"body":{"injectables/CalcService.html":{}}}],["forloop",{"_index":279,"title":{},"body":{"injectables/CalcService.html":{}}}],["formated",{"_index":179,"title":{},"body":{"controllers/CalcController.html":{},"injectables/CalcService.html":{}}}],["framework",{"_index":521,"title":{},"body":{"index.html":{}}}],["frameworks",{"_index":571,"title":{},"body":{"index.html":{}}}],["free",{"_index":530,"title":{},"body":{"index.html":{}}}],["friendly",{"_index":305,"title":{},"body":{"injectables/CalcService.html":{}}}],["front",{"_index":49,"title":{},"body":{"modules/AppModule.html":{},"injectables/CalcService.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["frontend",{"_index":58,"title":{},"body":{"modules/AppModule.html":{}}}],["full",{"_index":255,"title":{},"body":{"injectables/CalcService.html":{}}}],["function",{"_index":131,"title":{},"body":{"classes/Calc.html":{},"classes/CurrentItem.html":{},"injectables/MathService.html":{},"classes/Operator.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["functions",{"_index":405,"title":{"miscellaneous/functions.html":{}},"body":{"injectables/MathService.html":{},"miscellaneous/functions.html":{}}}],["gethigherprio",{"_index":219,"title":{},"body":{"injectables/CalcService.html":{}}}],["gethigherprio(items",{"_index":264,"title":{},"body":{"injectables/CalcService.html":{}}}],["getmathfunction",{"_index":423,"title":{},"body":{"injectables/MathService.html":{}}}],["getmathfunction(name",{"_index":432,"title":{},"body":{"injectables/MathService.html":{}}}],["getting",{"_index":515,"title":{"index.html":{}},"body":{}}],["git",{"_index":538,"title":{},"body":{"index.html":{}}}],["gonna",{"_index":434,"title":{},"body":{"injectables/MathService.html":{}}}],["handle",{"_index":355,"title":{},"body":{"injectables/CalcService.html":{}}}],["handled",{"_index":317,"title":{},"body":{"injectables/CalcService.html":{}}}],["handles",{"_index":343,"title":{},"body":{"injectables/CalcService.html":{}}}],["happen",{"_index":378,"title":{},"body":{"injectables/CalcService.html":{}}}],["hasdot",{"_index":149,"title":{},"body":{"classes/Calc.html":{},"classes/CurrentItem.html":{},"classes/Operator.html":{}}}],["hasnegative",{"_index":153,"title":{},"body":{"classes/Calc.html":{},"classes/CurrentItem.html":{},"classes/Operator.html":{}}}],["having",{"_index":160,"title":{},"body":{"classes/Calc.html":{},"classes/CurrentItem.html":{},"classes/Operator.html":{}}}],["here",{"_index":523,"title":{},"body":{"index.html":{}}}],["heroku",{"_index":511,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["hibernating",{"_index":536,"title":{},"body":{"index.html":{}}}],["higher",{"_index":128,"title":{},"body":{"classes/Calc.html":{},"injectables/CalcService.html":{},"classes/CurrentItem.html":{},"classes/Operator.html":{}}}],["higherprio",{"_index":395,"title":{},"body":{"injectables/CalcService.html":{}}}],["highest",{"_index":250,"title":{},"body":{"injectables/CalcService.html":{}}}],["highter",{"_index":266,"title":{},"body":{"injectables/CalcService.html":{}}}],["holding",{"_index":262,"title":{},"body":{"injectables/CalcService.html":{}}}],["host",{"_index":529,"title":{},"body":{"index.html":{}}}],["http://localhost:8080",{"_index":557,"title":{},"body":{"index.html":{}}}],["http://localhost:8080/calc",{"_index":559,"title":{},"body":{"index.html":{}}}],["httpcode",{"_index":184,"title":{},"body":{"controllers/CalcController.html":{}}}],["httpcode(httpstatus.ok",{"_index":192,"title":{},"body":{"controllers/CalcController.html":{}}}],["httpexception",{"_index":325,"title":{},"body":{"injectables/CalcService.html":{}}}],["httpexception(completemsg",{"_index":388,"title":{},"body":{"injectables/CalcService.html":{}}}],["https://github.com/thesmarthyena/calc",{"_index":57,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["https://stackoverflow.com/questions/1458633/how",{"_index":416,"title":{},"body":{"injectables/MathService.html":{}}}],["httpstatus",{"_index":185,"title":{},"body":{"controllers/CalcController.html":{},"injectables/CalcService.html":{}}}],["httpstatus.unprocessable_entity",{"_index":389,"title":{},"body":{"injectables/CalcService.html":{}}}],["i=0",{"_index":340,"title":{},"body":{"injectables/CalcService.html":{}}}],["identifier",{"_index":472,"title":{},"body":{"coverage.html":{}}}],["implemented",{"_index":426,"title":{},"body":{"injectables/MathService.html":{}}}],["implements",{"_index":210,"title":{},"body":{"injectables/CalcService.html":{}}}],["import",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/CalcController.html":{},"modules/CalcModule.html":{},"injectables/CalcService.html":{},"injectables/MathService.html":{},"classes/SendCalcDto.html":{}}}],["imports",{"_index":44,"title":{},"body":{"modules/AppModule.html":{}}}],["imprecision",{"_index":410,"title":{},"body":{"injectables/MathService.html":{}}}],["index",{"_index":96,"title":{"index.html":{}},"body":{"classes/Calc.html":{},"controllers/CalcController.html":{},"injectables/CalcService.html":{},"classes/CurrentItem.html":{},"injectables/MathService.html":{},"classes/Operator.html":{},"classes/SendCalcDto.html":{},"miscellaneous/functions.html":{}}}],["inferior",{"_index":293,"title":{},"body":{"injectables/CalcService.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Calc.html":{},"controllers/CalcController.html":{},"modules/CalcModule.html":{},"injectables/CalcService.html":{},"classes/CurrentItem.html":{},"injectables/MathService.html":{},"classes/Operator.html":{},"classes/SendCalcDto.html":{}}}],["informations",{"_index":137,"title":{},"body":{"classes/Calc.html":{},"classes/CurrentItem.html":{},"classes/Operator.html":{}}}],["initialize",{"_index":425,"title":{},"body":{"injectables/MathService.html":{},"miscellaneous/functions.html":{}}}],["injectable",{"_index":69,"title":{"injectables/AppService.html":{},"injectables/CalcService.html":{},"injectables/MathService.html":{}},"body":{"injectables/AppService.html":{},"injectables/CalcService.html":{},"injectables/MathService.html":{},"coverage.html":{}}}],["injectables",{"_index":70,"title":{},"body":{"injectables/AppService.html":{},"injectables/CalcService.html":{},"injectables/MathService.html":{},"overview.html":{}}}],["injected",{"_index":191,"title":{},"body":{"controllers/CalcController.html":{}}}],["insomnia",{"_index":562,"title":{},"body":{"index.html":{}}}],["install",{"_index":549,"title":{},"body":{"index.html":{}}}],["installation",{"_index":547,"title":{},"body":{"index.html":{}}}],["instance",{"_index":146,"title":{},"body":{"classes/Calc.html":{},"injectables/CalcService.html":{},"classes/CurrentItem.html":{},"classes/Operator.html":{}}}],["instanceof",{"_index":394,"title":{},"body":{"injectables/CalcService.html":{}}}],["instruction",{"_index":45,"title":{},"body":{"modules/AppModule.html":{}}}],["int",{"_index":127,"title":{},"body":{"classes/Calc.html":{},"classes/CurrentItem.html":{},"classes/Operator.html":{}}}],["isdot",{"_index":220,"title":{},"body":{"injectables/CalcService.html":{}}}],["isdot(char",{"_index":269,"title":{},"body":{"injectables/CalcService.html":{}}}],["isfirst",{"_index":221,"title":{},"body":{"injectables/CalcService.html":{}}}],["isfirst(i",{"_index":275,"title":{},"body":{"injectables/CalcService.html":{}}}],["islast",{"_index":222,"title":{},"body":{"injectables/CalcService.html":{}}}],["islast(index",{"_index":280,"title":{},"body":{"injectables/CalcService.html":{}}}],["isn't",{"_index":374,"title":{},"body":{"injectables/CalcService.html":{}}}],["isnegative",{"_index":223,"title":{},"body":{"injectables/CalcService.html":{}}}],["isnegative(char",{"_index":286,"title":{},"body":{"injectables/CalcService.html":{}}}],["isnumber",{"_index":224,"title":{},"body":{"injectables/CalcService.html":{}}}],["isnumber(char",{"_index":288,"title":{},"body":{"injectables/CalcService.html":{}}}],["isoperator",{"_index":225,"title":{},"body":{"injectables/CalcService.html":{}}}],["isoperator(char",{"_index":295,"title":{},"body":{"injectables/CalcService.html":{}}}],["isstring",{"_index":467,"title":{},"body":{"classes/SendCalcDto.html":{}}}],["item",{"_index":80,"title":{},"body":{"classes/Calc.html":{},"injectables/CalcService.html":{},"classes/CurrentItem.html":{},"classes/Operator.html":{}}}],["item.priority",{"_index":398,"title":{},"body":{"injectables/CalcService.html":{}}}],["items",{"_index":78,"title":{},"body":{"classes/Calc.html":{},"injectables/CalcService.html":{},"classes/CurrentItem.html":{},"classes/Operator.html":{}}}],["items.foreach(item",{"_index":393,"title":{},"body":{"injectables/CalcService.html":{}}}],["items.push(curr.value",{"_index":358,"title":{},"body":{"injectables/CalcService.html":{}}}],["items.push(this.myoperators.get(chars[i",{"_index":379,"title":{},"body":{"injectables/CalcService.html":{}}}],["iterating",{"_index":234,"title":{},"body":{"injectables/CalcService.html":{}}}],["iteration",{"_index":244,"title":{},"body":{"injectables/CalcService.html":{}}}],["j",{"_index":397,"title":{},"body":{"injectables/CalcService.html":{}}}],["j=0",{"_index":396,"title":{},"body":{"injectables/CalcService.html":{}}}],["javascript",{"_index":421,"title":{},"body":{"injectables/MathService.html":{}}}],["join",{"_index":65,"title":{},"body":{"modules/AppModule.html":{}}}],["join(__dirname",{"_index":67,"title":{},"body":{"modules/AppModule.html":{}}}],["js",{"_index":408,"title":{},"body":{"injectables/MathService.html":{}}}],["key",{"_index":442,"title":{},"body":{"injectables/MathService.html":{}}}],["known",{"_index":573,"title":{},"body":{"index.html":{}}}],["last",{"_index":283,"title":{},"body":{"injectables/CalcService.html":{}}}],["lauching",{"_index":575,"title":{},"body":{"index.html":{}}}],["launch",{"_index":531,"title":{},"body":{"index.html":{}}}],["legend",{"_index":27,"title":{},"body":{"modules/AppModule.html":{},"modules/CalcModule.html":{},"overview.html":{}}}],["level",{"_index":126,"title":{},"body":{"classes/Calc.html":{},"classes/CurrentItem.html":{},"classes/Operator.html":{}}}],["libraries",{"_index":570,"title":{},"body":{"index.html":{}}}],["local",{"_index":513,"title":{},"body":{"miscellaneous/functions.html":{}}}],["log",{"_index":320,"title":{},"body":{"injectables/CalcService.html":{}}}],["logger",{"_index":326,"title":{},"body":{"injectables/CalcService.html":{}}}],["logger(calcservice.name",{"_index":323,"title":{},"body":{"injectables/CalcService.html":{}}}],["logic",{"_index":206,"title":{},"body":{"injectables/CalcService.html":{}}}],["loop",{"_index":278,"title":{},"body":{"injectables/CalcService.html":{}}}],["love",{"_index":519,"title":{},"body":{"index.html":{}}}],["made",{"_index":518,"title":{},"body":{"index.html":{}}}],["main",{"_index":42,"title":{},"body":{"modules/AppModule.html":{},"injectables/CalcService.html":{}}}],["make",{"_index":318,"title":{},"body":{"injectables/CalcService.html":{}}}],["making",{"_index":213,"title":{},"body":{"injectables/CalcService.html":{}}}],["manually",{"_index":561,"title":{},"body":{"index.html":{}}}],["many",{"_index":245,"title":{},"body":{"injectables/CalcService.html":{}}}],["map",{"_index":297,"title":{},"body":{"injectables/CalcService.html":{},"injectables/MathService.html":{}}}],["match",{"_index":565,"title":{},"body":{"index.html":{}}}],["matches",{"_index":252,"title":{},"body":{"injectables/CalcService.html":{}}}],["matching",{"_index":21,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Calc.html":{},"controllers/CalcController.html":{},"modules/CalcModule.html":{},"injectables/CalcService.html":{},"classes/CurrentItem.html":{},"injectables/MathService.html":{},"classes/Operator.html":{},"classes/SendCalcDto.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["math",{"_index":208,"title":{},"body":{"injectables/CalcService.html":{},"injectables/MathService.html":{},"index.html":{}}}],["math.service",{"_index":199,"title":{},"body":{"modules/CalcModule.html":{},"injectables/CalcService.html":{}}}],["mathservice",{"_index":36,"title":{"injectables/MathService.html":{}},"body":{"modules/AppModule.html":{},"classes/Calc.html":{},"modules/CalcModule.html":{},"injectables/CalcService.html":{},"classes/CurrentItem.html":{},"injectables/MathService.html":{},"classes/Operator.html":{},"coverage.html":{},"overview.html":{}}}],["maybe",{"_index":596,"title":{},"body":{"index.html":{}}}],["members",{"_index":362,"title":{},"body":{"injectables/CalcService.html":{}}}],["message",{"_index":313,"title":{},"body":{"injectables/CalcService.html":{}}}],["metadata",{"_index":499,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":174,"title":{},"body":{"controllers/CalcController.html":{},"injectables/CalcService.html":{}}}],["methods",{"_index":165,"title":{},"body":{"controllers/CalcController.html":{},"injectables/CalcService.html":{},"injectables/MathService.html":{}}}],["miscellaneous",{"_index":505,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["mode",{"_index":552,"title":{},"body":{"index.html":{}}}],["module",{"_index":23,"title":{"modules/AppModule.html":{},"modules/CalcModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CalcModule.html":{},"overview.html":{}}}],["modules",{"_index":25,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/CalcModule.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":211,"title":{},"body":{"injectables/CalcService.html":{},"injectables/MathService.html":{}}}],["multiple",{"_index":251,"title":{},"body":{"injectables/CalcService.html":{}}}],["multiplication",{"_index":118,"title":{},"body":{"classes/Calc.html":{},"injectables/CalcService.html":{},"classes/CurrentItem.html":{},"injectables/MathService.html":{},"classes/Operator.html":{}}}],["multiplication(a",{"_index":437,"title":{},"body":{"injectables/MathService.html":{}}}],["multiplication(a:string",{"_index":457,"title":{},"body":{"injectables/MathService.html":{}}}],["mylogger",{"_index":216,"title":{},"body":{"injectables/CalcService.html":{}}}],["mymathfunctions",{"_index":422,"title":{},"body":{"injectables/MathService.html":{}}}],["myoperators",{"_index":217,"title":{},"body":{"injectables/CalcService.html":{}}}],["n",{"_index":238,"title":{},"body":{"injectables/CalcService.html":{}}}],["n+1",{"_index":239,"title":{},"body":{"injectables/CalcService.html":{}}}],["name",{"_index":103,"title":{},"body":{"classes/Calc.html":{},"controllers/CalcController.html":{},"injectables/CalcService.html":{},"classes/CurrentItem.html":{},"injectables/MathService.html":{},"classes/Operator.html":{}}}],["nboperators",{"_index":392,"title":{},"body":{"injectables/CalcService.html":{}}}],["need",{"_index":564,"title":{},"body":{"index.html":{}}}],["negative",{"_index":83,"title":{},"body":{"classes/Calc.html":{},"injectables/CalcService.html":{},"classes/CurrentItem.html":{},"classes/Operator.html":{}}}],["nest",{"_index":520,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":13,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/CalcController.html":{},"modules/CalcModule.html":{},"injectables/CalcService.html":{},"injectables/MathService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":488,"title":{},"body":{"dependencies.html":{}}}],["nestjs/mapped",{"_index":489,"title":{},"body":{"dependencies.html":{}}}],["nestjs/platform",{"_index":491,"title":{},"body":{"dependencies.html":{}}}],["nestjs/serve",{"_index":63,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["network",{"_index":598,"title":{},"body":{"index.html":{}}}],["never",{"_index":375,"title":{},"body":{"injectables/CalcService.html":{},"index.html":{}}}],["new",{"_index":145,"title":{},"body":{"classes/Calc.html":{},"injectables/CalcService.html":{},"classes/CurrentItem.html":{},"injectables/MathService.html":{},"classes/Operator.html":{},"coverage.html":{}}}],["node",{"_index":550,"title":{},"body":{"index.html":{}}}],["now",{"_index":554,"title":{},"body":{"index.html":{}}}],["npm",{"_index":548,"title":{},"body":{"index.html":{}}}],["number",{"_index":81,"title":{},"body":{"classes/Calc.html":{},"injectables/CalcService.html":{},"classes/CurrentItem.html":{},"injectables/MathService.html":{},"classes/Operator.html":{}}}],["number(obj.priority",{"_index":331,"title":{},"body":{"injectables/CalcService.html":{}}}],["number/operator",{"_index":377,"title":{},"body":{"injectables/CalcService.html":{}}}],["numbers",{"_index":307,"title":{},"body":{"injectables/CalcService.html":{}}}],["obj.name",{"_index":332,"title":{},"body":{"injectables/CalcService.html":{}}}],["object",{"_index":89,"title":{},"body":{"classes/Calc.html":{},"controllers/CalcController.html":{},"injectables/CalcService.html":{},"classes/CurrentItem.html":{},"classes/Operator.html":{}}}],["occured",{"_index":384,"title":{},"body":{"injectables/CalcService.html":{}}}],["occurs",{"_index":603,"title":{},"body":{"index.html":{}}}],["old",{"_index":592,"title":{},"body":{"index.html":{}}}],["one",{"_index":91,"title":{},"body":{"classes/Calc.html":{},"injectables/CalcService.html":{}}}],["open",{"_index":555,"title":{},"body":{"index.html":{}}}],["operation",{"_index":133,"title":{},"body":{"classes/Calc.html":{},"injectables/CalcService.html":{},"classes/CurrentItem.html":{},"classes/Operator.html":{}}}],["operator",{"_index":88,"title":{"classes/Operator.html":{}},"body":{"classes/Calc.html":{},"injectables/CalcService.html":{},"classes/CurrentItem.html":{},"classes/Operator.html":{},"coverage.html":{}}}],["operator(obj.value",{"_index":330,"title":{},"body":{"injectables/CalcService.html":{}}}],["operators",{"_index":79,"title":{},"body":{"classes/Calc.html":{},"injectables/CalcService.html":{},"classes/CurrentItem.html":{},"classes/Operator.html":{}}}],["operators.json",{"_index":111,"title":{},"body":{"classes/Calc.html":{},"injectables/CalcService.html":{},"classes/CurrentItem.html":{},"classes/Operator.html":{}}}],["option",{"_index":509,"title":{},"body":{"miscellaneous/functions.html":{}}}],["optional",{"_index":104,"title":{},"body":{"classes/Calc.html":{},"controllers/CalcController.html":{},"injectables/CalcService.html":{},"classes/CurrentItem.html":{},"injectables/MathService.html":{},"classes/Operator.html":{}}}],["origin",{"_index":586,"title":{},"body":{"index.html":{}}}],["out",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"modules/CalcModule.html":{},"overview.html":{}}}],["over",{"_index":235,"title":{},"body":{"injectables/CalcService.html":{}}}],["overview",{"_index":612,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":486,"title":{"dependencies.html":{}},"body":{}}],["param",{"_index":147,"title":{},"body":{"classes/Calc.html":{},"controllers/CalcController.html":{},"injectables/CalcService.html":{},"classes/CurrentItem.html":{},"injectables/MathService.html":{},"classes/Operator.html":{}}}],["parameter",{"_index":435,"title":{},"body":{"injectables/MathService.html":{}}}],["parameters",{"_index":102,"title":{},"body":{"classes/Calc.html":{},"controllers/CalcController.html":{},"injectables/CalcService.html":{},"classes/CurrentItem.html":{},"injectables/MathService.html":{},"classes/Operator.html":{}}}],["params",{"_index":406,"title":{},"body":{"injectables/MathService.html":{}}}],["parse",{"_index":203,"title":{},"body":{"injectables/CalcService.html":{}}}],["parse(calculus",{"_index":298,"title":{},"body":{"injectables/CalcService.html":{}}}],["parsed",{"_index":141,"title":{},"body":{"classes/Calc.html":{},"injectables/CalcService.html":{},"classes/CurrentItem.html":{},"classes/Operator.html":{}}}],["parser",{"_index":142,"title":{},"body":{"classes/Calc.html":{},"injectables/CalcService.html":{},"classes/CurrentItem.html":{},"classes/Operator.html":{}}}],["parsing",{"_index":258,"title":{},"body":{"injectables/CalcService.html":{}}}],["path",{"_index":52,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/functions.html":{}}}],["per",{"_index":243,"title":{},"body":{"injectables/CalcService.html":{}}}],["perform",{"_index":134,"title":{},"body":{"classes/Calc.html":{},"classes/CurrentItem.html":{},"injectables/MathService.html":{},"classes/Operator.html":{}}}],["philippe",{"_index":606,"title":{},"body":{"index.html":{}}}],["point",{"_index":419,"title":{},"body":{"injectables/MathService.html":{}}}],["ports",{"_index":508,"title":{},"body":{"miscellaneous/functions.html":{}}}],["position",{"_index":154,"title":{},"body":{"classes/Calc.html":{},"classes/CurrentItem.html":{},"classes/Operator.html":{}}}],["positive",{"_index":82,"title":{},"body":{"classes/Calc.html":{}}}],["post",{"_index":176,"title":{},"body":{"controllers/CalcController.html":{},"classes/SendCalcDto.html":{},"index.html":{}}}],["post()@httpcode(httpstatus.ok",{"_index":170,"title":{},"body":{"controllers/CalcController.html":{}}}],["postman",{"_index":563,"title":{},"body":{"index.html":{}}}],["precision",{"_index":420,"title":{},"body":{"injectables/MathService.html":{}}}],["prefix",{"_index":164,"title":{},"body":{"controllers/CalcController.html":{}}}],["priority",{"_index":113,"title":{},"body":{"classes/Calc.html":{},"injectables/CalcService.html":{},"classes/CurrentItem.html":{},"classes/Operator.html":{}}}],["private",{"_index":215,"title":{},"body":{"injectables/CalcService.html":{},"injectables/MathService.html":{}}}],["problem",{"_index":601,"title":{},"body":{"index.html":{}}}],["process",{"_index":300,"title":{},"body":{"injectables/CalcService.html":{}}}],["process.env.port",{"_index":510,"title":{},"body":{"miscellaneous/functions.html":{}}}],["production",{"_index":551,"title":{},"body":{"index.html":{}}}],["properly",{"_index":316,"title":{},"body":{"injectables/CalcService.html":{}}}],["properties",{"_index":97,"title":{},"body":{"classes/Calc.html":{},"injectables/CalcService.html":{},"classes/CurrentItem.html":{},"injectables/MathService.html":{},"classes/Operator.html":{},"classes/SendCalcDto.html":{}}}],["property",{"_index":182,"title":{},"body":{"controllers/CalcController.html":{},"injectables/CalcService.html":{},"injectables/MathService.html":{}}}],["providers",{"_index":30,"title":{},"body":{"modules/AppModule.html":{},"modules/CalcModule.html":{},"overview.html":{}}}],["ps",{"_index":576,"title":{},"body":{"index.html":{}}}],["react",{"_index":48,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["readonly",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"controllers/CalcController.html":{},"injectables/CalcService.html":{},"injectables/MathService.html":{},"classes/SendCalcDto.html":{}}}],["reason",{"_index":597,"title":{},"body":{"index.html":{}}}],["receive",{"_index":568,"title":{},"body":{"index.html":{}}}],["reflect",{"_index":498,"title":{},"body":{"dependencies.html":{}}}],["relaucnhing",{"_index":587,"title":{},"body":{"index.html":{}}}],["remove",{"_index":253,"title":{},"body":{"injectables/CalcService.html":{}}}],["renderpath",{"_index":68,"title":{},"body":{"modules/AppModule.html":{}}}],["replace",{"_index":254,"title":{},"body":{"injectables/CalcService.html":{}}}],["repository",{"_index":56,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["representing",{"_index":284,"title":{},"body":{"injectables/CalcService.html":{},"injectables/MathService.html":{}}}],["represents",{"_index":41,"title":{},"body":{"modules/AppModule.html":{},"classes/Calc.html":{},"controllers/CalcController.html":{},"modules/CalcModule.html":{},"classes/CurrentItem.html":{},"classes/Operator.html":{},"classes/SendCalcDto.html":{}}}],["request",{"_index":178,"title":{},"body":{"controllers/CalcController.html":{},"classes/SendCalcDto.html":{},"index.html":{}}}],["res",{"_index":12,"title":{},"body":{"controllers/AppController.html":{}}}],["reset",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"modules/CalcModule.html":{},"overview.html":{}}}],["resolve",{"_index":205,"title":{},"body":{"injectables/CalcService.html":{},"classes/SendCalcDto.html":{}}}],["resolving",{"_index":230,"title":{},"body":{"injectables/CalcService.html":{}}}],["result",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Calc.html":{},"controllers/CalcController.html":{},"modules/CalcModule.html":{},"injectables/CalcService.html":{},"classes/CurrentItem.html":{},"injectables/MathService.html":{},"classes/Operator.html":{},"classes/SendCalcDto.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["results",{"_index":22,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Calc.html":{},"controllers/CalcController.html":{},"modules/CalcModule.html":{},"injectables/CalcService.html":{},"classes/CurrentItem.html":{},"injectables/MathService.html":{},"classes/Operator.html":{},"classes/SendCalcDto.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["return",{"_index":194,"title":{},"body":{"controllers/CalcController.html":{},"injectables/CalcService.html":{},"injectables/MathService.html":{}}}],["returns",{"_index":181,"title":{},"body":{"controllers/CalcController.html":{},"injectables/CalcService.html":{},"injectables/MathService.html":{}}}],["rimraf",{"_index":501,"title":{},"body":{"dependencies.html":{}}}],["role",{"_index":202,"title":{},"body":{"injectables/CalcService.html":{}}}],["rootpath",{"_index":66,"title":{},"body":{"modules/AppModule.html":{}}}],["route",{"_index":173,"title":{},"body":{"controllers/CalcController.html":{}}}],["run",{"_index":514,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["running",{"_index":543,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":503,"title":{},"body":{"dependencies.html":{}}}],["second",{"_index":260,"title":{},"body":{"injectables/CalcService.html":{}}}],["seconds",{"_index":534,"title":{},"body":{"index.html":{}}}],["see",{"_index":43,"title":{},"body":{"modules/AppModule.html":{},"injectables/MathService.html":{}}}],["seems",{"_index":589,"title":{},"body":{"index.html":{}}}],["send",{"_index":312,"title":{},"body":{"injectables/CalcService.html":{},"index.html":{}}}],["sendcalcdto",{"_index":168,"title":{"classes/SendCalcDto.html":{}},"body":{"controllers/CalcController.html":{},"injectables/CalcService.html":{},"classes/SendCalcDto.html":{},"coverage.html":{}}}],["sending",{"_index":277,"title":{},"body":{"injectables/CalcService.html":{}}}],["sent",{"_index":231,"title":{},"body":{"injectables/CalcService.html":{}}}],["separate",{"_index":55,"title":{},"body":{"modules/AppModule.html":{},"injectables/CalcService.html":{}}}],["separated",{"_index":209,"title":{},"body":{"injectables/CalcService.html":{}}}],["sequence",{"_index":77,"title":{},"body":{"classes/Calc.html":{},"classes/CurrentItem.html":{},"classes/Operator.html":{}}}],["serve",{"_index":47,"title":{},"body":{"modules/AppModule.html":{}}}],["server",{"_index":53,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/functions.html":{}}}],["servestaticmodule",{"_index":62,"title":{},"body":{"modules/AppModule.html":{}}}],["servestaticmodule.forroot",{"_index":46,"title":{},"body":{"modules/AppModule.html":{}}}],["service",{"_index":72,"title":{},"body":{"injectables/AppService.html":{},"controllers/CalcController.html":{},"injectables/MathService.html":{}}}],["set",{"_index":144,"title":{},"body":{"classes/Calc.html":{},"controllers/CalcController.html":{},"classes/CurrentItem.html":{},"injectables/MathService.html":{},"classes/Operator.html":{}}}],["signature",{"_index":566,"title":{},"body":{"index.html":{}}}],["simple",{"_index":301,"title":{},"body":{"injectables/CalcService.html":{},"index.html":{}}}],["simply",{"_index":85,"title":{},"body":{"classes/Calc.html":{}}}],["single",{"_index":273,"title":{},"body":{"injectables/CalcService.html":{},"injectables/MathService.html":{}}}],["skopal",{"_index":605,"title":{},"body":{"index.html":{}}}],["solve",{"_index":600,"title":{},"body":{"index.html":{}}}],["sometimes",{"_index":577,"title":{},"body":{"index.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Calc.html":{},"controllers/CalcController.html":{},"modules/CalcModule.html":{},"injectables/CalcService.html":{},"classes/CurrentItem.html":{},"injectables/MathService.html":{},"classes/Operator.html":{},"classes/SendCalcDto.html":{}}}],["splited",{"_index":285,"title":{},"body":{"injectables/CalcService.html":{}}}],["src/.../main.ts",{"_index":506,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.module.ts",{"_index":40,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":71,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/calc/calc.controller.ts",{"_index":163,"title":{},"body":{"controllers/CalcController.html":{},"coverage.html":{}}}],["src/calc/calc.controller.ts:23",{"_index":171,"title":{},"body":{"controllers/CalcController.html":{}}}],["src/calc/calc.module.ts",{"_index":198,"title":{},"body":{"modules/CalcModule.html":{}}}],["src/calc/calc.service.ts",{"_index":201,"title":{},"body":{"injectables/CalcService.html":{},"coverage.html":{}}}],["src/calc/calc.service.ts:13",{"_index":324,"title":{},"body":{"injectables/CalcService.html":{}}}],["src/calc/calc.service.ts:14",{"_index":228,"title":{},"body":{"injectables/CalcService.html":{}}}],["src/calc/calc.service.ts:143",{"_index":289,"title":{},"body":{"injectables/CalcService.html":{}}}],["src/calc/calc.service.ts:152",{"_index":296,"title":{},"body":{"injectables/CalcService.html":{}}}],["src/calc/calc.service.ts:161",{"_index":276,"title":{},"body":{"injectables/CalcService.html":{}}}],["src/calc/calc.service.ts:171",{"_index":282,"title":{},"body":{"injectables/CalcService.html":{}}}],["src/calc/calc.service.ts:180",{"_index":270,"title":{},"body":{"injectables/CalcService.html":{}}}],["src/calc/calc.service.ts:189",{"_index":287,"title":{},"body":{"injectables/CalcService.html":{}}}],["src/calc/calc.service.ts:198",{"_index":311,"title":{},"body":{"injectables/CalcService.html":{}}}],["src/calc/calc.service.ts:216",{"_index":233,"title":{},"body":{"injectables/CalcService.html":{}}}],["src/calc/calc.service.ts:253",{"_index":265,"title":{},"body":{"injectables/CalcService.html":{}}}],["src/calc/calc.service.ts:29",{"_index":229,"title":{},"body":{"injectables/CalcService.html":{}}}],["src/calc/calc.service.ts:46",{"_index":299,"title":{},"body":{"injectables/CalcService.html":{}}}],["src/calc/dto/send",{"_index":465,"title":{},"body":{"classes/SendCalcDto.html":{},"coverage.html":{}}}],["src/calc/entities/calc.entity.ts",{"_index":75,"title":{},"body":{"classes/Calc.html":{},"classes/CurrentItem.html":{},"classes/Operator.html":{},"coverage.html":{}}}],["src/calc/entities/calc.entity.ts:12",{"_index":105,"title":{},"body":{"classes/Calc.html":{}}}],["src/calc/entities/calc.entity.ts:15",{"_index":106,"title":{},"body":{"classes/Calc.html":{}}}],["src/calc/entities/calc.entity.ts:18",{"_index":107,"title":{},"body":{"classes/Calc.html":{}}}],["src/calc/entities/calc.entity.ts:33",{"_index":461,"title":{},"body":{"classes/Operator.html":{}}}],["src/calc/entities/calc.entity.ts:41",{"_index":464,"title":{},"body":{"classes/Operator.html":{}}}],["src/calc/entities/calc.entity.ts:44",{"_index":463,"title":{},"body":{"classes/Operator.html":{}}}],["src/calc/entities/calc.entity.ts:47",{"_index":462,"title":{},"body":{"classes/Operator.html":{}}}],["src/calc/entities/calc.entity.ts:5",{"_index":101,"title":{},"body":{"classes/Calc.html":{}}}],["src/calc/entities/calc.entity.ts:53",{"_index":399,"title":{},"body":{"classes/CurrentItem.html":{}}}],["src/calc/entities/calc.entity.ts:67",{"_index":402,"title":{},"body":{"classes/CurrentItem.html":{}}}],["src/calc/entities/calc.entity.ts:70",{"_index":400,"title":{},"body":{"classes/CurrentItem.html":{}}}],["src/calc/entities/calc.entity.ts:73",{"_index":401,"title":{},"body":{"classes/CurrentItem.html":{}}}],["src/calc/math.service.ts",{"_index":403,"title":{},"body":{"injectables/MathService.html":{},"coverage.html":{}}}],["src/calc/math.service.ts:15",{"_index":424,"title":{},"body":{"injectables/MathService.html":{}}}],["src/calc/math.service.ts:32",{"_index":433,"title":{},"body":{"injectables/MathService.html":{}}}],["src/calc/math.service.ts:42",{"_index":429,"title":{},"body":{"injectables/MathService.html":{}}}],["src/calc/math.service.ts:52",{"_index":440,"title":{},"body":{"injectables/MathService.html":{}}}],["src/calc/math.service.ts:62",{"_index":438,"title":{},"body":{"injectables/MathService.html":{}}}],["src/calc/math.service.ts:72",{"_index":431,"title":{},"body":{"injectables/MathService.html":{}}}],["src/main.ts",{"_index":483,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["start",{"_index":93,"title":{},"body":{"classes/Calc.html":{}}}],["start:prodstep",{"_index":553,"title":{},"body":{"index.html":{}}}],["started",{"_index":516,"title":{"index.html":{}},"body":{}}],["statements",{"_index":473,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":64,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["step",{"_index":537,"title":{},"body":{"index.html":{}}}],["stop",{"_index":535,"title":{},"body":{"index.html":{}}}],["store",{"_index":158,"title":{},"body":{"classes/Calc.html":{},"classes/CurrentItem.html":{},"classes/Operator.html":{}}}],["stored",{"_index":86,"title":{},"body":{"classes/Calc.html":{},"injectables/CalcService.html":{},"index.html":{}}}],["stores",{"_index":136,"title":{},"body":{"classes/Calc.html":{},"classes/CurrentItem.html":{},"injectables/MathService.html":{},"classes/Operator.html":{}}}],["string",{"_index":87,"title":{},"body":{"classes/Calc.html":{},"controllers/CalcController.html":{},"injectables/CalcService.html":{},"classes/CurrentItem.html":{},"injectables/MathService.html":{},"classes/Operator.html":{},"classes/SendCalcDto.html":{},"index.html":{}}}],["string|operator",{"_index":390,"title":{},"body":{"injectables/CalcService.html":{}}}],["substraction",{"_index":116,"title":{},"body":{"classes/Calc.html":{},"classes/CurrentItem.html":{},"injectables/MathService.html":{},"classes/Operator.html":{}}}],["substraction(a",{"_index":439,"title":{},"body":{"injectables/MathService.html":{}}}],["substraction(a:string",{"_index":455,"title":{},"body":{"injectables/MathService.html":{}}}],["sumber",{"_index":159,"title":{},"body":{"classes/Calc.html":{},"classes/CurrentItem.html":{},"classes/Operator.html":{}}}],["superior",{"_index":290,"title":{},"body":{"injectables/CalcService.html":{}}}],["suposed",{"_index":356,"title":{},"body":{"injectables/CalcService.html":{}}}],["supplied",{"_index":267,"title":{},"body":{"injectables/CalcService.html":{}}}],["support",{"_index":609,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":610,"title":{},"body":{"modules.html":{}}}],["switch",{"_index":376,"title":{},"body":{"injectables/CalcService.html":{}}}],["symbol",{"_index":124,"title":{},"body":{"classes/Calc.html":{},"classes/CurrentItem.html":{},"classes/Operator.html":{}}}],["table",{"_index":485,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":484,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":532,"title":{},"body":{"index.html":{}}}],["takes",{"_index":594,"title":{},"body":{"index.html":{}}}],["task",{"_index":436,"title":{},"body":{"injectables/MathService.html":{}}}],["testing",{"_index":527,"title":{},"body":{"index.html":{}}}],["that's",{"_index":411,"title":{},"body":{"injectables/MathService.html":{},"index.html":{}}}],["thesmarthyena",{"_index":608,"title":{},"body":{"index.html":{}}}],["this.addition",{"_index":444,"title":{},"body":{"injectables/MathService.html":{}}}],["this.calcservice.calculate(sendcalcdto",{"_index":195,"title":{},"body":{"controllers/CalcController.html":{}}}],["this.calculus",{"_index":108,"title":{},"body":{"classes/Calc.html":{},"classes/CurrentItem.html":{},"classes/Operator.html":{}}}],["this.division",{"_index":450,"title":{},"body":{"injectables/MathService.html":{}}}],["this.docalculate(calc",{"_index":336,"title":{},"body":{"injectables/CalcService.html":{}}}],["this.hasdot",{"_index":156,"title":{},"body":{"classes/Calc.html":{},"classes/CurrentItem.html":{},"classes/Operator.html":{}}}],["this.hasnegative",{"_index":157,"title":{},"body":{"classes/Calc.html":{},"classes/CurrentItem.html":{},"classes/Operator.html":{}}}],["this.isdot(chars[i",{"_index":347,"title":{},"body":{"injectables/CalcService.html":{}}}],["this.isdot(chars[i+1",{"_index":348,"title":{},"body":{"injectables/CalcService.html":{}}}],["this.isfirst(i",{"_index":363,"title":{},"body":{"injectables/CalcService.html":{}}}],["this.islast(i",{"_index":345,"title":{},"body":{"injectables/CalcService.html":{}}}],["this.isnegative(chars[i",{"_index":364,"title":{},"body":{"injectables/CalcService.html":{}}}],["this.isnegative(chars[i+1",{"_index":350,"title":{},"body":{"injectables/CalcService.html":{}}}],["this.isnumber(chars[i",{"_index":357,"title":{},"body":{"injectables/CalcService.html":{}}}],["this.isnumber(chars[i+1",{"_index":369,"title":{},"body":{"injectables/CalcService.html":{}}}],["this.isoperator(chars[i",{"_index":346,"title":{},"body":{"injectables/CalcService.html":{}}}],["this.isoperator(chars[i+1",{"_index":349,"title":{},"body":{"injectables/CalcService.html":{}}}],["this.items",{"_index":109,"title":{},"body":{"classes/Calc.html":{},"classes/CurrentItem.html":{},"classes/Operator.html":{}}}],["this.multiplication",{"_index":448,"title":{},"body":{"injectables/MathService.html":{}}}],["this.mylogger.error(completemsg",{"_index":386,"title":{},"body":{"injectables/CalcService.html":{}}}],["this.mymathfunctions.get(name",{"_index":451,"title":{},"body":{"injectables/MathService.html":{}}}],["this.mymathfunctions.set(\"addition",{"_index":443,"title":{},"body":{"injectables/MathService.html":{}}}],["this.mymathfunctions.set(\"division",{"_index":449,"title":{},"body":{"injectables/MathService.html":{}}}],["this.mymathfunctions.set(\"multiplication",{"_index":447,"title":{},"body":{"injectables/MathService.html":{}}}],["this.mymathfunctions.set(\"substraction",{"_index":445,"title":{},"body":{"injectables/MathService.html":{}}}],["this.myoperators.has(char",{"_index":381,"title":{},"body":{"injectables/CalcService.html":{}}}],["this.myoperators.set(obj.value",{"_index":329,"title":{},"body":{"injectables/CalcService.html":{}}}],["this.name",{"_index":123,"title":{},"body":{"classes/Calc.html":{},"classes/CurrentItem.html":{},"classes/Operator.html":{}}}],["this.parse(sendcalcdto.calculus",{"_index":334,"title":{},"body":{"injectables/CalcService.html":{}}}],["this.priority",{"_index":122,"title":{},"body":{"classes/Calc.html":{},"classes/CurrentItem.html":{},"classes/Operator.html":{}}}],["this.substraction",{"_index":446,"title":{},"body":{"injectables/MathService.html":{}}}],["this.throwerrorparse(`last",{"_index":372,"title":{},"body":{"injectables/CalcService.html":{}}}],["this.throwerrorparse(`two",{"_index":351,"title":{},"body":{"injectables/CalcService.html":{}}}],["this.value",{"_index":121,"title":{},"body":{"classes/Calc.html":{},"classes/CurrentItem.html":{},"classes/Operator.html":{}}}],["throw",{"_index":387,"title":{},"body":{"injectables/CalcService.html":{}}}],["throwerrorparse",{"_index":226,"title":{},"body":{"injectables/CalcService.html":{}}}],["throwerrorparse(message",{"_index":310,"title":{},"body":{"injectables/CalcService.html":{}}}],["throws",{"_index":303,"title":{},"body":{"injectables/CalcService.html":{}}}],["topic",{"_index":415,"title":{},"body":{"injectables/MathService.html":{}}}],["transformer",{"_index":494,"title":{},"body":{"dependencies.html":{}}}],["true",{"_index":367,"title":{},"body":{"injectables/CalcService.html":{}}}],["try",{"_index":525,"title":{},"body":{"index.html":{}}}],["two",{"_index":249,"title":{},"body":{"injectables/CalcService.html":{},"miscellaneous/functions.html":{}}}],["type",{"_index":90,"title":{},"body":{"classes/Calc.html":{},"controllers/CalcController.html":{},"injectables/CalcService.html":{},"classes/CurrentItem.html":{},"injectables/MathService.html":{},"classes/Operator.html":{},"classes/SendCalcDto.html":{},"coverage.html":{}}}],["types",{"_index":490,"title":{},"body":{"dependencies.html":{}}}],["upalternative",{"_index":546,"title":{},"body":{"index.html":{}}}],["usable",{"_index":204,"title":{},"body":{"injectables/CalcService.html":{}}}],["use",{"_index":558,"title":{},"body":{"index.html":{}}}],["used",{"_index":413,"title":{},"body":{"injectables/MathService.html":{},"index.html":{}}}],["user",{"_index":304,"title":{},"body":{"injectables/CalcService.html":{}}}],["valid",{"_index":95,"title":{},"body":{"classes/Calc.html":{},"injectables/CalcService.html":{}}}],["validator",{"_index":469,"title":{},"body":{"classes/SendCalcDto.html":{},"dependencies.html":{}}}],["value",{"_index":112,"title":{},"body":{"classes/Calc.html":{},"injectables/CalcService.html":{},"classes/CurrentItem.html":{},"injectables/MathService.html":{},"classes/Operator.html":{}}}],["values",{"_index":110,"title":{},"body":{"classes/Calc.html":{},"classes/CurrentItem.html":{},"injectables/MathService.html":{},"classes/Operator.html":{}}}],["version",{"_index":342,"title":{},"body":{"injectables/CalcService.html":{}}}],["very",{"_index":591,"title":{},"body":{"index.html":{}}}],["void",{"_index":321,"title":{},"body":{"injectables/CalcService.html":{}}}],["whet",{"_index":602,"title":{},"body":{"index.html":{}}}],["who's",{"_index":139,"title":{},"body":{"classes/Calc.html":{},"injectables/CalcService.html":{},"classes/CurrentItem.html":{},"injectables/MathService.html":{},"classes/Operator.html":{}}}],["zoom",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"modules/CalcModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n            \n                Description\n            \n            \n                App controler \n\n            \n\n\n\n\n\n    \n\n\n    \n        import { Controller, Get, Res } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n/** App controler */\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nCalcModule\n\nCalcModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nCalcModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nMathService\n\nMathService\n\nAppModule -->\n\nMathService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n        \n            Description\n        \n        \n            Represents the main module of the app. \nWe can see in the imports the instruction: \"ServeStaticModule.forRoot(...\", this instruction is to serve the React front-end, (in /build), to serve it at path \"/\" on the server. \nSource code of the front-end is in a separate repository: https://github.com/TheSmartHyena/calc-frontend \n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                        \n                            MathService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CalcModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { CalcModule } from './calc/calc.module';\nimport { MathService } from './calc/math.service';\nimport { ServeStaticModule } from '@nestjs/serve-static';\nimport { join } from 'path';\n\n/**\n * Represents the main module of the app. \n * We can see in the imports the instruction: \"ServeStaticModule.forRoot(...\", this instruction is to serve the React front-end, (in /build), to serve it at path \"/\" on the server. \n * Source code of the front-end is in a separate repository: https://github.com/TheSmartHyena/calc-frontend \n */\n@Module({\n  imports: [CalcModule, ServeStaticModule.forRoot({\n    rootPath: join(__dirname, '..', 'build'),\n    renderPath: \"/\",\n  })],\n  controllers: [AppController],\n  providers: [AppService, MathService],\n  \n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n            \n                Description\n            \n            \n                App service.\n\n            \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n/**\n * App service.\n */\n@Injectable()\nexport class AppService {}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Calc.html":{"url":"classes/Calc.html","title":"class - Calc","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Calc\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/calc/entities/calc.entity.ts\n        \n\n            \n                Description\n            \n            \n                Represents a Calculus.\nA calculus is a sequence of items and operators. An item is a number (Positive, negative or float), simply stored in a string. An operator can be: \"+\"\", \"-\", \"*\", \"/\", and is stored in an object of type Operator. \nOne item has to be followed by an operator, start and finish with an item to be valid.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                calculus\n                            \n                            \n                                items\n                            \n                            \n                                result\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(calculus: string, items: (string | Operator)[])\n                    \n                \n                        \n                            \n                                Defined in src/calc/entities/calc.entity.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        calculus\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        items\n                                                  \n                                                        \n                                                                        (string | Operator)[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            calculus\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/calc/entities/calc.entity.ts:12\n                            \n                        \n\n                \n                    \n                        The calculus. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            items\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         (string | Operator)[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/calc/entities/calc.entity.ts:15\n                            \n                        \n\n                \n                    \n                        The sequence of items (number) and Operators \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            result\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/calc/entities/calc.entity.ts:18\n                            \n                        \n\n                \n                    \n                        The result of the calculus \n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Calc {\n    constructor(calculus: string, items: (string | Operator)[]) {\n        this.calculus = calculus;\n        this.items = items;\n    }\n\n    /** The calculus. */\n    calculus: string\n\n    /** The sequence of items (number) and Operators */\n    items: (string | Operator)[]\n\n    /** The result of the calculus */\n    result: string\n}\n\n/**\n * Represents an operator. \n * Operators values are defined in the file: operators.json -> \n *  * \n *  {\"operators\": [\n *      {\"value\" : \"+\", \"priority\" : \"1\", \"name\": \"addition\"},\n *      {\"value\" : \"-\", \"priority\" : \"1\", \"name\": \"substraction\"},\n *      {\"value\" : \"*\", \"priority\" : \"2\", \"name\": \"multiplication\"},\n *      {\"value\" : \"/\", \"priority\" : \"2\", \"name\": \"division\"}\n *  ]}\n * \n */\nexport class Operator { \n    constructor(value: string, priority: number, name: string) {\n        this.value = value;\n        this.priority = priority;\n        this.name = name;\n    }\n\n    /** Symbol as string ex: \"+\". */\n    value: string\n\n    /** Priority level as int, higher the number is, higher the priority is ex: \"+ -> priority: 1\", \"* -> priority: 2\" ==> The \"*\" will be executed first. */\n    priority: number\n\n    /** Name of the function is MathService, which is able to actually to the operation Ex: \"addition\" -> perform a+b. */\n    name: string\n}\n\n/**\n * Represents an object, who stores informations about current item who's being parsed by the parser. \n */\nexport class CurrentItem {\n    /**\n     * Set value for new CurrentItem instance.\n     * @param {string} value Current item value.\n     * @param {boolean} hasDot Flag if  contains dot.\n     * @param {boolean} hasNegative Flag if item is negative -> contains \"-\" at first position.\n     */\n    constructor(value: string=\"\", hasDot: boolean=false, hasNegative: boolean=false) {\n        this.value = value;\n        this.hasDot = hasDot;\n        this.hasNegative = hasNegative;\n    }\n\n    /** Store the current sumber.*/\n    value: string\n\n    /** Store a flag who represents if the number is float or not, by having a dot. ex: \"36.30\".*/\n    hasDot: boolean\n\n    /** Store a flag who represents if the number is negative or not, by having a \"-\". ex: \"-36.30\". */\n    hasNegative: boolean\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CalcController.html":{"url":"controllers/CalcController.html","title":"controller - CalcController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CalcController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/calc/calc.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                calc\n            \n\n            \n                Description\n            \n            \n                Represents the controler of the CalcModule\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                calculate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            calculate\n                        \n                        \n                    \n                \n            \n            \n                \ncalculate(sendCalcDto: SendCalcDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@HttpCode(HttpStatus.OK)\n                \n            \n\n            \n                \n                    Defined in src/calc/calc.controller.ts:23\n                \n            \n\n\n            \n                \n                    The only API route and Method for the application. /calc And POST method.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    sendCalcDto\n                                    \n                                                SendCalcDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Contains data from the POST request, formated as DTO defined in SendCalcDto class.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        An object with 2 property {calculus: string, result: string} -> Calculus contains the calculus, result contains the result of the calculus. \n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Post, Body, HttpCode, HttpStatus } from '@nestjs/common';\nimport { CalcService } from './calc.service';\nimport { SendCalcDto } from './dto/send-calc.dto';\n\n/**\n * Represents the controler of the CalcModule\n */\n@Controller('calc')\nexport class CalcController {\n  /**\n   * Set the injected service\n   * @param {CalcService} calcService The injected service \n   */\n  constructor(private readonly calcService: CalcService) {}\n\n  /**\n   * The only API route and Method for the application. /calc And POST method.\n   * @param sendCalcDto Contains data from the POST request, formated as DTO defined in SendCalcDto class.\n   * @returns An object with 2 property {calculus: string, result: string} -> Calculus contains the calculus, result contains the result of the calculus. \n   */\n  @Post()\n  @HttpCode(HttpStatus.OK)\n  calculate(@Body() sendCalcDto: SendCalcDto) {\n    return this.calcService.calculate(sendCalcDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CalcModule.html":{"url":"modules/CalcModule.html","title":"module - CalcModule","body":"\n                   \n\n\n\n\n    Modules\n    CalcModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CalcModule\n\n\n\ncluster_CalcModule_providers\n\n\n\n\nCalcService\n\nCalcService\n\n\n\nCalcModule\n\nCalcModule\n\nCalcModule -->\n\nCalcService->CalcModule\n\n\n\n\n\nMathService\n\nMathService\n\nCalcModule -->\n\nMathService->CalcModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/calc/calc.module.ts\n        \n\n\n        \n            Description\n        \n        \n            Represents the CalcModule\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CalcService\n                        \n                        \n                            MathService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            CalcController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { CalcService } from './calc.service';\nimport { MathService } from './math.service';\nimport { CalcController } from './calc.controller';\n\n/**\n * Represents the CalcModule\n */\n@Module({\n  controllers: [CalcController],\n  providers: [CalcService, MathService],\n})\nexport class CalcModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CalcService.html":{"url":"injectables/CalcService.html","title":"injectable - CalcService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  CalcService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/calc/calc.service.ts\n        \n\n            \n                Description\n            \n            \n                The role of CalcService is to parse the calculus into usable data. And with MathService methods, resolve the calculus. \nThe logic and the actual math is separated to implements more easely new operators by making the parser agnostic of them. \n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                myLogger\n                            \n                            \n                                    Private\n                                    Readonly\n                                myOperators\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                calculate\n                            \n                            \n                                doCalculate\n                            \n                            \n                                    Private\n                                getHigherPrio\n                            \n                            \n                                    Private\n                                isDot\n                            \n                            \n                                    Private\n                                isFirst\n                            \n                            \n                                    Private\n                                isLast\n                            \n                            \n                                    Private\n                                isNegative\n                            \n                            \n                                    Private\n                                isNumber\n                            \n                            \n                                    Private\n                                isOperator\n                            \n                            \n                                parse\n                            \n                            \n                                    Private\n                                throwErrorParse\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(mathService: MathService)\n                    \n                \n                        \n                            \n                                Defined in src/calc/calc.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        mathService\n                                                  \n                                                        \n                                                                        MathService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            calculate\n                        \n                        \n                    \n                \n            \n            \n                \ncalculate(sendCalcDto: SendCalcDto)\n                \n            \n\n\n            \n                \n                    Defined in src/calc/calc.service.ts:29\n                \n            \n\n\n            \n                \n                    The main method, who does the calculus. First parse the calculus, and resolving it. \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    sendCalcDto\n                                    \n                                                SendCalcDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        DTO formated data sent from the front-end.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     { calculus: any; result: string; }\n\n                    \n                    \n                        The result of the calculus -> {calculus: string, result: string} -> \"calculus\": the calculus to resolve. \"result\": the result of the calculus.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            doCalculate\n                        \n                        \n                    \n                \n            \n            \n                \ndoCalculate(calc: Calc)\n                \n            \n\n\n            \n                \n                    Defined in src/calc/calc.service.ts:216\n                \n            \n\n\n            \n                \n                    Will do the calculus. By iterating over the items, executing each operator with the n-1 and n+1 item around the operator in the array. One execution per iteration, There is as many iteration as operators in the items array. \nEx: \"2+2\" one iteration. \"1+2-3\" two iteration. \nAt each iteration, the operator who will be executed is the operator matching the highest priority number, if multiple number matches the priority number, only the first one in the iteration will be executed. \nAn execution will remove the operator from the array and the n+1 item too. The result of the operation will replace n-1 value in the array. \nFull example: \n  -> 1+2*3 -> after parsing -> [\"1\", {value: \"+\", name: \"addition\", priority: \"1\"}, \"2\", {value: \"+\", name: \"multiplication\", priority: \"2\"}, \"3\"] \n  -> first iteration: [\"1\", {value: \"+\", name: \"addition\", priority: \"1\"}, \"6\"] \n  -> second iteration: [\"7\"]\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    calc\n                                    \n                                                Calc\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Instance of Calc, holding the parsed Calculus to be calculated\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        The result of the calculus\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            getHigherPrio\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getHigherPrio(items: (string | Operator)[])\n                \n            \n\n\n            \n                \n                    Defined in src/calc/calc.service.ts:253\n                \n            \n\n\n            \n                \n                    Will return the highter priority number of the items supplied.\nEx: \"1+2-3*4/5\" -> returns 2.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    items\n                                    \n                                                (string | Operator)[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        An array of items and operators\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        The higher priority number.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            isDot\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isDot(char: string)\n                \n            \n\n\n            \n                \n                    Defined in src/calc/calc.service.ts:180\n                \n            \n\n\n            \n                \n                    Check if the char is a dot.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    char\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        A single char to be checked.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        The boolean value of the check.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            isFirst\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isFirst(i: number)\n                \n            \n\n\n            \n                \n                    Defined in src/calc/calc.service.ts:161\n                \n            \n\n\n            \n                \n                    Check if the char is the first of the calculus, by sending the current index of the for loop.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    i\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Index of the ForLoop.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        The boolean value of the check.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            isLast\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isLast(index: number, chars: string[])\n                \n            \n\n\n            \n                \n                    Defined in src/calc/calc.service.ts:171\n                \n            \n\n\n            \n                \n                    Check if the char is the last of the calculus, by sending the current index of the for loop, and the chars array.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    index\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Index of the ForLoop.\n\n                                    \n                                \n                                \n                                    chars\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Chars array, representing the splited string of the calculus.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        The boolean value of the check.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            isNegative\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isNegative(char: string)\n                \n            \n\n\n            \n                \n                    Defined in src/calc/calc.service.ts:189\n                \n            \n\n\n            \n                \n                    Check if the char is a negative Operator\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    char\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        A single char to be checked.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        The boolean value of the check.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            isNumber\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isNumber(char: string)\n                \n            \n\n\n            \n                \n                    Defined in src/calc/calc.service.ts:143\n                \n            \n\n\n            \n                \n                    Check if the char is a number is superior or equal to 0 and is inferior or equal to 9.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    char\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        A single char to be checked.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        The boolean value of the check.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            isOperator\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isOperator(char: string)\n                \n            \n\n\n            \n                \n                    Defined in src/calc/calc.service.ts:152\n                \n            \n\n\n            \n                \n                    Check if the char is an operator. Operator are stored in a Map.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    char\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        A single char to be checked.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        The boolean value of the check.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            parse\n                        \n                        \n                    \n                \n            \n            \n                \nparse(calculus: string)\n                \n            \n\n\n            \n                \n                    Defined in src/calc/calc.service.ts:46\n                \n            \n\n\n            \n                \n                    This method parse a calculus string. The process is simple: \n\nChecks if the calculus is valid, if not, throws a user-friendly error. \nSeparate items (actual numbers) and operators.\n\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    calculus\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        String representing the calculus.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Calc\n\n                    \n                    \n                        Returns a Calc with Calc.items property filled with the parsed calculus.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            throwErrorParse\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    throwErrorParse(message)\n                \n            \n\n\n            \n                \n                    Defined in src/calc/calc.service.ts:198\n                \n            \n\n\n            \n                \n                    Send an error message to the front-end, with 422 code, who's catched by the front-end and properly handled. And make a clean log.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    message\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        User friendly message of the error.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            myLogger\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Logger(CalcService.name)\n                        \n                    \n                        \n                            \n                                    Defined in src/calc/calc.service.ts:13\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            myOperators\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Map\n\n                        \n                    \n                    \n                        \n                            Default value : new Map()\n                        \n                    \n                        \n                            \n                                    Defined in src/calc/calc.service.ts:14\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable, Logger } from '@nestjs/common';\nimport { SendCalcDto } from './dto/send-calc.dto';\nimport { Calc, CurrentItem, Operator } from './entities/calc.entity';\nimport { MathService } from './math.service';\nimport * as data from './operators.json';\n\n/**\n * The role of CalcService is to parse the calculus into usable data. And with MathService methods, resolve the calculus. \n * The logic and the actual math is separated to implements more easely new operators by making the parser agnostic of them. \n */\n@Injectable()\nexport class CalcService {\n  private readonly myLogger = new Logger(CalcService.name);\n  private readonly myOperators: Map = new Map();\n\n  constructor(\n    private mathService: MathService\n  ) {\n    data.operators.forEach(obj => {\n      this.myOperators.set(obj.value, new Operator(obj.value, Number(obj.priority), obj.name))\n    })\n  }\n  \n  /**\n   * The main method, who does the calculus. First parse the calculus, and resolving it. \n   * @param {SendCalcDto} sendCalcDto DTO formated data sent from the front-end.\n   * @returns {object} The result of the calculus -> {calculus: string, result: string} -> \"calculus\": the calculus to resolve. \"result\": the result of the calculus.\n   */\n  calculate(sendCalcDto: SendCalcDto) {\n    const calc = this.parse(sendCalcDto.calculus);\n    calc.result = this.doCalculate(calc);\n    \n    return {\n      calculus: calc.calculus,\n      result: this.doCalculate(calc)\n    };\n  }\n\n  /**\n   * This method parse a calculus string. The process is simple: \n   *  1. Checks if the calculus is valid, if not, throws a user-friendly error. \n   *  2. Separate items (actual numbers) and operators.\n   * @param calculus String representing the calculus.\n   * @returns {Calc} Returns a Calc with Calc.items property filled with the parsed calculus.\n   */\n  parse(calculus: string): Calc {\n    const items: (string |Operator)[] = []\n    let curr = new CurrentItem();\n\n    const chars = calculus.split(\"\");\n    for (let i=0; i Make a cleaner version who handles dot folowed by operator */\n\n      if (!this.isLast(i, chars) && (this.isOperator(chars[i]) || this.isDot(chars[i]))) {\n        if (this.isDot(chars[i+1]) || (this.isOperator(chars[i+1]) && !this.isNegative(chars[i+1]))) {\n          this.throwErrorParse(`two dots, two operators, or dot/operator can't be after one dot/operator: ${calculus}`);\n        }\n      } \n      \n      // Handle the last char, which is suposed to be a number\n      if (this.isLast(i, chars) && this.isNumber(chars[i])) {\n        items.push(curr.value + chars[i]);\n        continue;\n      }\n\n      // Allow negative members\n      if (this.isFirst(i) && this.isNegative(chars[i])) {\n        curr = new CurrentItem(curr.value += chars[i], false, true);\n        continue;\n      }\n\n      if (!this.isFirst(i)) {\n        if (this.isNegative(chars[i]) && this.isOperator(chars[i-1])) {\n          curr = new CurrentItem(curr.value += chars[i], false, true);\n          continue;\n        }\n      }\n\n      // Adds every number or dot\n      if (this.isNumber(chars[i]) && (this.isNumber(chars[i+1]) || this.isDot(chars[i+1]))) {\n        curr = new CurrentItem(curr.value += chars[i], curr.hasDot, curr.hasNegative);\n        continue;\n      }\n\n      if (this.isDot(chars[i])) {\n        curr = new CurrentItem(curr.value += chars[i], true, curr.hasNegative);\n        continue;\n      }\n\n      if (this.isLast(i, chars)) {\n        this.throwErrorParse(`Last character isn't number, operator or dot: ${calculus}`);\n        continue; // should never get there\n      }\n\n      // Handle a  switch from number/operator happen\n      if (this.isNumber(chars[i]) && this.isOperator(chars[i+1])) {\n        items.push(curr.value + chars[i]);\n        curr = new CurrentItem(\"\", false);\n        continue;\n      }\n\n      if (this.isOperator(chars[i]) && (this.isNumber(chars[i+1]) || this.isNegative(chars[i+1]))) {\n        items.push(this.myOperators.get(chars[i]));\n        curr = new CurrentItem(\"\", false);\n        continue;\n      }\n    }\n\n    return new Calc(calculus, items);\n  }\n\n  /**\n   * Check if the char is a number is superior or equal to 0 and is inferior or equal to 9.\n   * @param char A single char to be checked.\n   * @returns {boolean} The boolean value of the check.\n   */\n  private isNumber(char: string): boolean {\n    return (+char >= 0 && +char .\n   * @param char A single char to be checked.\n   * @returns {boolean} The boolean value of the check.\n   */\n  private isOperator(char: string): boolean {\n    return this.myOperators.has(char);\n  }\n\n  /**\n   * Check if the char is the first of the calculus, by sending the current index of the for loop.\n   * @param i Index of the ForLoop.\n   * @returns {boolean} The boolean value of the check.\n   */\n  private isFirst(i: number): boolean {\n    return i === 0;\n  }\n\n  /**\n   * Check if the char is the last of the calculus, by sending the current index of the for loop, and the chars array.\n   * @param index Index of the ForLoop.\n   * @param chars Chars array, representing the splited string of the calculus.\n   * @returns {boolean} The boolean value of the check.\n   */\n  private isLast(index: number, chars: string[]): boolean {\n    return index == (chars.length-1);\n  }\n\n  /**\n   * Check if the char is a dot.\n   * @param char A single char to be checked.\n   * @returns {boolean} The boolean value of the check.\n   */\n  private isDot(char: string): boolean {\n    return char === '.';\n  }\n\n  /**\n   * Check if the char is a negative Operator\n   * @param char A single char to be checked.\n   * @returns {boolean} The boolean value of the check.\n   */\n  private isNegative(char: string): boolean {\n    return char === '-';\n  }\n\n  /**\n   * Send an error message to the front-end, with 422 code, who's catched by the front-end and properly handled. And make a clean log.\n   * @param message User friendly message of the error.\n   * @throws {HttpException} A user friendly error\n   */\n  private throwErrorParse(message) {\n    const completeMsg = `An error occured during the execution of the calculus: ${message}`;\n    this.myLogger.error(completeMsg);\n    throw new HttpException(completeMsg, HttpStatus.UNPROCESSABLE_ENTITY)\n  }\n\n  /**\n   * Will do the calculus. By iterating over the items, executing each operator with the n-1 and n+1 item around the operator in the array. One execution per iteration, There is as many iteration as operators in the items array. \n   * Ex: \"2+2\" one iteration. \"1+2-3\" two iteration. \n   * At each iteration, the operator who will be executed is the operator matching the highest priority number, if multiple number matches the priority number, only the first one in the iteration will be executed. \n   * An execution will remove the operator from the array and the n+1 item too. The result of the operation will replace n-1 value in the array. \n   * Full example: \n   *  -> 1+2*3 -> after parsing -> [\"1\", {value: \"+\", name: \"addition\", priority: \"1\"}, \"2\", {value: \"+\", name: \"multiplication\", priority: \"2\"}, \"3\"] \n   *  -> first iteration: [\"1\", {value: \"+\", name: \"addition\", priority: \"1\"}, \"6\"] \n   *  -> second iteration: [\"7\"]\n   * @param {Calc} calc Instance of Calc, holding the parsed Calculus to be calculated\n   * @returns The result of the calculus\n   */\n  doCalculate(calc: Calc): string {\n    const items: (string|Operator)[] = Array.from(calc.items)    \n    let nbOperators: number = 0;\n    items.forEach(item => {\n      if (item instanceof Operator) {\n        nbOperators++;\n      }\n    })\n\n    let higherPrio = 0;\n    for (let j=0; j returns 2.\n   * @param items An array of items and operators\n   * @returns {number} The higher priority number.\n   */\n  private getHigherPrio(items: (string|Operator)[]): number {\n    let result = 0\n\n    items.forEach(item => {\n      if (item instanceof Operator) {\n        if (item.priority > result) {\n          result = item.priority;\n        }\n      }\n    })\n\n    return result;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CurrentItem.html":{"url":"classes/CurrentItem.html","title":"class - CurrentItem","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CurrentItem\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/calc/entities/calc.entity.ts\n        \n\n            \n                Description\n            \n            \n                Represents an object, who stores informations about current item who's being parsed by the parser. \n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                hasDot\n                            \n                            \n                                hasNegative\n                            \n                            \n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(value: string, hasDot: boolean, hasNegative: boolean)\n                    \n                \n                        \n                            \n                                Defined in src/calc/entities/calc.entity.ts:53\n                            \n                        \n\n                \n                    \n                            Set value for new CurrentItem instance.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        value\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Current item value.\n\n                                                        \n                                                \n                                                \n                                                        hasDot\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Flag if  contains dot.\n\n                                                        \n                                                \n                                                \n                                                        hasNegative\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Flag if item is negative -> contains \"-\" at first position.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            hasDot\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in src/calc/entities/calc.entity.ts:70\n                            \n                        \n\n                \n                    \n                        Store a flag who represents if the number is float or not, by having a dot. ex: \"36.30\".\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            hasNegative\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in src/calc/entities/calc.entity.ts:73\n                            \n                        \n\n                \n                    \n                        Store a flag who represents if the number is negative or not, by having a \"-\". ex: \"-36.30\". \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            value\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/calc/entities/calc.entity.ts:67\n                            \n                        \n\n                \n                    \n                        Store the current sumber.\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Calc {\n    constructor(calculus: string, items: (string | Operator)[]) {\n        this.calculus = calculus;\n        this.items = items;\n    }\n\n    /** The calculus. */\n    calculus: string\n\n    /** The sequence of items (number) and Operators */\n    items: (string | Operator)[]\n\n    /** The result of the calculus */\n    result: string\n}\n\n/**\n * Represents an operator. \n * Operators values are defined in the file: operators.json -> \n *  * \n *  {\"operators\": [\n *      {\"value\" : \"+\", \"priority\" : \"1\", \"name\": \"addition\"},\n *      {\"value\" : \"-\", \"priority\" : \"1\", \"name\": \"substraction\"},\n *      {\"value\" : \"*\", \"priority\" : \"2\", \"name\": \"multiplication\"},\n *      {\"value\" : \"/\", \"priority\" : \"2\", \"name\": \"division\"}\n *  ]}\n * \n */\nexport class Operator { \n    constructor(value: string, priority: number, name: string) {\n        this.value = value;\n        this.priority = priority;\n        this.name = name;\n    }\n\n    /** Symbol as string ex: \"+\". */\n    value: string\n\n    /** Priority level as int, higher the number is, higher the priority is ex: \"+ -> priority: 1\", \"* -> priority: 2\" ==> The \"*\" will be executed first. */\n    priority: number\n\n    /** Name of the function is MathService, which is able to actually to the operation Ex: \"addition\" -> perform a+b. */\n    name: string\n}\n\n/**\n * Represents an object, who stores informations about current item who's being parsed by the parser. \n */\nexport class CurrentItem {\n    /**\n     * Set value for new CurrentItem instance.\n     * @param {string} value Current item value.\n     * @param {boolean} hasDot Flag if  contains dot.\n     * @param {boolean} hasNegative Flag if item is negative -> contains \"-\" at first position.\n     */\n    constructor(value: string=\"\", hasDot: boolean=false, hasNegative: boolean=false) {\n        this.value = value;\n        this.hasDot = hasDot;\n        this.hasNegative = hasNegative;\n    }\n\n    /** Store the current sumber.*/\n    value: string\n\n    /** Store a flag who represents if the number is float or not, by having a dot. ex: \"36.30\".*/\n    hasDot: boolean\n\n    /** Store a flag who represents if the number is negative or not, by having a \"-\". ex: \"-36.30\". */\n    hasNegative: boolean\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MathService.html":{"url":"injectables/MathService.html","title":"injectable - MathService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  MathService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/calc/math.service.ts\n        \n\n            \n                Description\n            \n            \n                This service execute math functions, all math function params are string to avoid JS doing imprecision with Float values. That's why Decimal.js is used. \nFor more details see this topic: https://stackoverflow.com/questions/1458633/how-to-deal-with-floating-point-number-precision-in-javascript\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                myMathFunctions\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addition\n                            \n                            \n                                division\n                            \n                            \n                                getMathFunction\n                            \n                            \n                                multiplication\n                            \n                            \n                                substraction\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/calc/math.service.ts:15\n                            \n                        \n\n                \n                    \n                            Initialize myMathFunctions property, a Map with every math function we implemented.\n\n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            addition\n                        \n                        \n                    \n                \n            \n            \n                \naddition(a: string, b: string)\n                \n            \n\n\n            \n                \n                    Defined in src/calc/math.service.ts:42\n                \n            \n\n\n            \n                \n                    Perform an addition\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    a\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    b\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        the result of a + b\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            division\n                        \n                        \n                    \n                \n            \n            \n                \ndivision(a: string, b: string)\n                \n            \n\n\n            \n                \n                    Defined in src/calc/math.service.ts:72\n                \n            \n\n\n            \n                \n                    Perform a division\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    a\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    b\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        The result of a / b\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getMathFunction\n                        \n                        \n                    \n                \n            \n            \n                \ngetMathFunction(name: string)\n                \n            \n\n\n            \n                \n                    Defined in src/calc/math.service.ts:32\n                \n            \n\n\n            \n                \n                    Returns a math function who's gonna be executed.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The name of the math function to return.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        A function with 2 string parameter, a & b, executing a single math task.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            multiplication\n                        \n                        \n                    \n                \n            \n            \n                \nmultiplication(a: string, b: string)\n                \n            \n\n\n            \n                \n                    Defined in src/calc/math.service.ts:62\n                \n            \n\n\n            \n                \n                    Perform a multiplication\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    a\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    b\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        The result of a * b\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            substraction\n                        \n                        \n                    \n                \n            \n            \n                \nsubstraction(a: string, b: string)\n                \n            \n\n\n            \n                \n                    Defined in src/calc/math.service.ts:52\n                \n            \n\n\n            \n                \n                    Perform a substraction\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    a\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    b\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        The result of a - b\n\n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            myMathFunctions\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Map\n\n                        \n                    \n                    \n                        \n                            Default value : new Map()\n                        \n                    \n                        \n                            \n                                    Defined in src/calc/math.service.ts:15\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { Decimal } from 'decimal.js'\n\n/**\n * This service execute math functions, all math function params are string to avoid JS doing imprecision with Float values. That's why Decimal.js is used. \n * For more details see this topic: https://stackoverflow.com/questions/1458633/how-to-deal-with-floating-point-number-precision-in-javascript\n */\n@Injectable()\nexport class MathService {\n\n    /**\n     * @property {Map} myMathFunctions Stores a set of functions, key is a string, representing the name of the function. \n     * @private \n     */\n    private readonly myMathFunctions: Map = new Map();\n\n    /**\n     * Initialize myMathFunctions property, a Map with every math function we implemented.\n     */\n    constructor() {\n        this.myMathFunctions.set(\"addition\", this.addition)\n        this.myMathFunctions.set(\"substraction\", this.substraction)\n        this.myMathFunctions.set(\"multiplication\", this.multiplication)\n        this.myMathFunctions.set(\"division\", this.division)\n    }\n\n    /**\n     * Returns a math function who's gonna be executed.\n    * @param {string} name  The name of the math function to return.\n    * @returns {function} A function with 2 string parameter, a & b, executing a single math task.\n    */\n    getMathFunction(name: string): any {\n        return this.myMathFunctions.get(name);\n    }\n\n    /**\n     * Perform an addition\n     * @param {string} a\n     * @param {string} b\n     * @returns {string} the result of a + b\n     */\n    addition(a:string, b:string): string {\n        return new Decimal(a).plus(b).toFixed();\n    }\n\n    /**\n     * Perform a substraction\n     * @param {string} a \n     * @param {string} b \n     * @returns {string} The result of a - b\n     */\n    substraction(a:string, b:string): string {\n        return new Decimal(a).minus(b).toFixed();\n    }\n\n    /**\n     * Perform a multiplication\n     * @param {string} a \n     * @param {string} b \n     * @returns {string} The result of a * b\n     */\n    multiplication(a:string, b:string): string {\n        return new Decimal(a).times(b).toFixed();\n    }\n\n    /**\n     * Perform a division\n     * @param {string} a \n     * @param {string} b \n     * @returns {string} The result of a / b\n     */\n    division(a:string, b:string): string {\n        return new Decimal(a).dividedBy(b).toFixed();\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Operator.html":{"url":"classes/Operator.html","title":"class - Operator","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Operator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/calc/entities/calc.entity.ts\n        \n\n            \n                Description\n            \n            \n                Represents an operator. \nOperators values are defined in the file: operators.json -> \n\n{\"operators\": [\n  {\"value\" : \"+\", \"priority\" : \"1\", \"name\": \"addition\"},\n  {\"value\" : \"-\", \"priority\" : \"1\", \"name\": \"substraction\"},\n  {\"value\" : \"*\", \"priority\" : \"2\", \"name\": \"multiplication\"},\n  {\"value\" : \"/\", \"priority\" : \"2\", \"name\": \"division\"}\n]}\n\n\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                            \n                                priority\n                            \n                            \n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(value: string, priority: number, name: string)\n                    \n                \n                        \n                            \n                                Defined in src/calc/entities/calc.entity.ts:33\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        value\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        priority\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/calc/entities/calc.entity.ts:47\n                            \n                        \n\n                \n                    \n                        Name of the function is MathService, which is able to actually to the operation Ex: \"addition\" -> perform a+b. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            priority\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/calc/entities/calc.entity.ts:44\n                            \n                        \n\n                \n                    \n                        Priority level as int, higher the number is, higher the priority is ex: \"+ -> priority: 1\", \"* -> priority: 2\" ==> The \"*\" will be executed first. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            value\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/calc/entities/calc.entity.ts:41\n                            \n                        \n\n                \n                    \n                        Symbol as string ex: \"+\". \n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Calc {\n    constructor(calculus: string, items: (string | Operator)[]) {\n        this.calculus = calculus;\n        this.items = items;\n    }\n\n    /** The calculus. */\n    calculus: string\n\n    /** The sequence of items (number) and Operators */\n    items: (string | Operator)[]\n\n    /** The result of the calculus */\n    result: string\n}\n\n/**\n * Represents an operator. \n * Operators values are defined in the file: operators.json -> \n *  * \n *  {\"operators\": [\n *      {\"value\" : \"+\", \"priority\" : \"1\", \"name\": \"addition\"},\n *      {\"value\" : \"-\", \"priority\" : \"1\", \"name\": \"substraction\"},\n *      {\"value\" : \"*\", \"priority\" : \"2\", \"name\": \"multiplication\"},\n *      {\"value\" : \"/\", \"priority\" : \"2\", \"name\": \"division\"}\n *  ]}\n * \n */\nexport class Operator { \n    constructor(value: string, priority: number, name: string) {\n        this.value = value;\n        this.priority = priority;\n        this.name = name;\n    }\n\n    /** Symbol as string ex: \"+\". */\n    value: string\n\n    /** Priority level as int, higher the number is, higher the priority is ex: \"+ -> priority: 1\", \"* -> priority: 2\" ==> The \"*\" will be executed first. */\n    priority: number\n\n    /** Name of the function is MathService, which is able to actually to the operation Ex: \"addition\" -> perform a+b. */\n    name: string\n}\n\n/**\n * Represents an object, who stores informations about current item who's being parsed by the parser. \n */\nexport class CurrentItem {\n    /**\n     * Set value for new CurrentItem instance.\n     * @param {string} value Current item value.\n     * @param {boolean} hasDot Flag if  contains dot.\n     * @param {boolean} hasNegative Flag if item is negative -> contains \"-\" at first position.\n     */\n    constructor(value: string=\"\", hasDot: boolean=false, hasNegative: boolean=false) {\n        this.value = value;\n        this.hasDot = hasDot;\n        this.hasNegative = hasNegative;\n    }\n\n    /** Store the current sumber.*/\n    value: string\n\n    /** Store a flag who represents if the number is float or not, by having a dot. ex: \"36.30\".*/\n    hasDot: boolean\n\n    /** Store a flag who represents if the number is negative or not, by having a \"-\". ex: \"-36.30\". */\n    hasNegative: boolean\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SendCalcDto.html":{"url":"classes/SendCalcDto.html","title":"class - SendCalcDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SendCalcDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/calc/dto/send-calc.dto.ts\n        \n\n            \n                Description\n            \n            \n                Represents the body of the post request. to /Calc.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                calculus\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            calculus\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/calc/dto/send-calc.dto.ts:9\n                            \n                        \n\n                \n                    \n                        The calculus to resolve. \n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString } from \"class-validator\"\n\n/**\n * Represents the body of the post request. to /Calc.\n */\nexport class SendCalcDto {\n    /** The calculus to resolve. */\n    @IsString()\n    readonly calculus: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/calc/calc.controller.ts\n            \n            controller\n            CalcController\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/calc/calc.service.ts\n            \n            injectable\n            CalcService\n            \n                80 %\n                (12/15)\n            \n        \n        \n            \n                \n                src/calc/dto/send-calc.dto.ts\n            \n            class\n            SendCalcDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/calc/entities/calc.entity.ts\n            \n            class\n            Calc\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                src/calc/entities/calc.entity.ts\n            \n            class\n            CurrentItem\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/calc/entities/calc.entity.ts\n            \n            class\n            Operator\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                src/calc/math.service.ts\n            \n            injectable\n            MathService\n            \n                87 %\n                (7/8)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                100 %\n                (1/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^7.6.15\n        \n            @nestjs/core : ^7.6.15\n        \n            @nestjs/mapped-types : *\n        \n            @nestjs/platform-express : ^7.6.15\n        \n            @nestjs/serve-static : ^2.1.4\n        \n            class-transformer : ^0.4.0\n        \n            class-validator : ^0.13.1\n        \n            decimal.js : ^10.3.1\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^6.6.6\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            bootstrap\n                        \n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n            \n                \n                    The function that initialize the server. \nCORS because front-end is at path \"/\" and the api at \"/calc\" \nTwo ports option -> process.env.PORT for heroku, 8080 for local run.\n\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nDescription\nA simple calculator made with Love, Nest framework and React.\nBack-end code is stored here\nFront-end code is stored here\nCode documentation\nCode documentation is here made with compodoc.\nTry it on Heroku\nFor fast testing, the app is deployed to Heroku here.\nSince the host is free, the first launch may take 30 seconds to stop the app from hibernating.\nStep 1 - Get repository\n$ git clone https://github.com/TheSmartHyena/calc-backend\n$ cd calc-backendStep 2 - Running the app with Docker\n$ docker-compose upAlternative Step 2 - Installation & Running the app with NPM\n# install node modules\n$ npm install \n\n# production mode\n$ npm run start:prodStep 3 - Do some math\nYou can now open your browser at http://localhost:8080 and use the calculator.\nOr request the API at http://localhost:8080/calc.\nAPI\nYou don't have to use the browser to use the app. You can manually request the API.\nWith Insomnia or Postman, you can send POST request on http://localhost:8080/calc.\nThe body need to match this signature: {calculus: string}.\nExample: {\"calculus\": \"2+2\"} -> As answer you receive: {\"calculus\": \"2+2\", \"result\": \"4\"}.\nLibraries / Frameworks used\nI used compodoc to create the documentation.\nBack-end\n\nNest\nDecimal.js \n\nFront-end\n\nReact\nReact-bootstrap\nBootstrap 4\n\nKnown bugs\n\nWhen lauching \"docker-compose ps\" sometimes, the build fail with: \"[development 4/6] RUN npm install: npm ERR! cb() never called!\"\nDidn't find the origin, relaucnhing the command seems to \"fix\" it.\nOn my very old computer, the build takes 1400 seconds, maybe that's the reason.\n\n\nRunning \"docker build . --network host\" before \"docker-compose ps\" seems to solve the problem whet it occurs.\n\nAuthor\nMade by Skopal Philippe a.k.a TheSmartHyena\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CalcModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_CalcModule\n\n\n\ncluster_CalcModule_providers\n\n\n\n\nCalcModule\n\nCalcModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nCalcModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nMathService\n\nMathService\n\nCalcModule -->\n\nMathService->CalcModule\n\n\n\nAppModule -->\n\nMathService->AppModule\n\n\n\n\n\nCalcService\n\nCalcService\n\nCalcModule -->\n\nCalcService->CalcModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        2 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    2 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    3 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    4 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
