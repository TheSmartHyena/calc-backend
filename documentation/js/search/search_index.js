var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.226,1,1.434]],["body/controllers/AppController.html",[0,2.12,1,2.479,2,1.785,3,0.675,4,0.675,5,0.549,6,2.973,7,0.549,8,2.479,9,3.53,10,1.342,11,0.059,12,3.742,13,1.13,14,1.942,15,2.973,16,0.675,17,0.042,18,2.973,19,1.785,20,0.042,21,0.05,22,0.042]],["title/modules/AppModule.html",[23,1.226,24,1.434]],["body/modules/AppModule.html",[1,2.311,2,1.763,3,0.503,4,0.747,5,0.409,7,0.409,8,2.061,10,1.452,11,0.06,13,0.842,14,1.932,15,2.216,16,0.503,17,0.032,20,0.032,21,0.042,22,0.032,23,2.188,24,2.783,25,1.144,26,1.331,27,1.839,28,1.839,29,1.144,30,2.73,31,1.839,32,2.216,33,2.216,34,2.216,35,1.932,36,1.022,37,2.435,38,1.839,39,1.839,40,2.79,41,1.302,42,2.935,43,2.935,44,4.409,45,4.409,46,4.142,47,4.409,48,2.935,49,2.46,50,2.46,51,4.142,52,3.291,53,2.935,54,2.435,55,2.935,56,2.935,57,2.935,58,3.695,59,2.79,60,2.79,61,2.79,62,2.79,63,2.216,64,2.216,65,2.79,66,2.79,67,2.79,68,2.79]],["title/injectables/AppService.html",[14,1.054,69,0.906]],["body/injectables/AppService.html",[3,0.695,4,0.695,5,0.566,7,0.566,8,2.523,10,1.164,11,0.059,13,1.164,14,1.854,16,0.695,17,0.044,20,0.044,21,0.051,22,0.044,69,1.593,70,2.151,71,3.063,72,2.98]],["title/classes/Calc.html",[17,0.029,73,0.557]],["body/classes/Calc.html",[3,0.36,4,0.36,5,0.429,7,0.293,11,0.061,16,0.624,17,0.039,20,0.048,21,0.033,22,0.023,36,0.433,41,1.43,73,0.635,74,0.953,75,1.114,76,1.663,77,2.282,78,2.599,79,2.264,80,2.365,81,2.143,82,1.998,83,1.932,84,1.632,85,1.998,86,1.928,87,1.525,88,1.909,89,1.396,90,1.225,91,1.587,92,1.998,93,1.998,94,1.998,95,1.587,96,0.514,97,1.199,98,0.953,99,1.928,100,1.43,101,1.998,102,0.819,103,1.878,104,0.819,105,1.998,106,1.998,107,1.998,108,1.317,109,1.317,110,1.114,111,1.114,112,2.253,113,2.634,114,1.652,115,1.396,116,1.114,117,1.045,118,0.953,119,1.114,120,1.928,121,1.928,122,1.317,123,1.317,124,1.317,125,2.264,126,1.317,127,1.317,128,1.632,129,0.953,130,1.396,131,0.819,132,1.317,133,1.114,134,1.114,135,1.317,136,1.114,137,1.317,138,1.932,139,0.953,140,1.317,141,1.114,142,1.114,143,1.199,144,0.953,145,0.819,146,1.114,147,1.419,148,2.127,149,2.512,150,2.512,151,1.632,152,1.632,153,2.512,154,1.317,155,1.928,156,1.317,157,1.317,158,2.282,159,1.317,160,1.928,161,1.928]],["title/controllers/CalcController.html",[0,1.226,162,1.434]],["body/controllers/CalcController.html",[0,1.331,2,1.331,3,0.503,4,0.503,5,0.409,7,0.542,9,2.935,10,1.251,11,0.06,13,0.842,16,0.503,17,0.047,18,2.216,19,1.331,20,0.055,21,0.042,22,0.032,35,1.514,41,1.302,72,2.435,73,0.898,76,1.72,87,1.331,89,1.763,90,0.842,96,0.718,100,1.459,102,1.144,103,1.144,104,1.144,117,1.116,144,1.331,147,1.514,151,2.629,162,2.061,163,2.216,164,2.79,165,2.435,166,2.935,167,2.216,168,2.357,169,2.216,170,2.79,171,2.79,172,2.435,173,3.695,174,3.503,175,3.695,176,3.106,177,2.935,178,2.435,179,2.935,180,2.935,181,2.435,182,2.435,183,1.839,184,2.79,185,2.216,186,1.88,187,2.216,188,2.216,189,2.216,190,2.79,191,3.695,192,2.79,193,2.79,194,1.839,195,2.79]],["title/modules/CalcModule.html",[23,1.226,35,1.054]],["body/modules/CalcModule.html",[2,1.987,3,0.606,4,0.606,5,0.493,7,0.493,10,1.427,11,0.06,13,1.015,16,0.606,17,0.038,20,0.038,21,0.047,22,0.038,23,2.158,25,1.378,26,1.604,27,2.216,28,2.216,29,1.378,30,2.981,31,2.216,35,2.109,36,1.074,37,2.744,38,2.216,39,2.216,41,1.467,162,2.523,186,2.029,187,2.671,196,2.671,197,2.671,198,3.363,199,2.671,200,3.363]],["title/injectables/CalcService.html",[69,0.906,186,1.054]],["body/injectables/CalcService.html",[3,0.147,4,0.147,5,0.119,7,0.543,10,0.77,11,0.061,13,0.245,16,0.147,17,0.009,19,1.335,20,0.048,21,0.025,22,0.009,36,0.691,42,1.124,49,1.561,50,1.561,54,0.933,55,1.124,69,0.499,70,0.454,73,0.858,76,1.709,78,2.165,79,1.864,80,1.561,81,2.106,83,1.049,86,0.536,87,1.413,88,1.778,89,0.388,90,1.118,91,2.389,95,1.124,96,0.952,97,0.58,98,0.675,100,1.367,102,1.517,103,1.7,104,1.517,111,0.454,112,2.07,113,2.117,114,1.888,115,1.073,117,0.908,118,0.675,125,1.049,128,0.79,129,1.073,130,1.52,133,0.79,138,1.255,139,0.675,141,1.255,142,0.79,143,0.922,145,1.65,146,0.79,147,1.517,148,2.561,152,1.422,165,1.482,166,1.124,167,1.124,168,1.435,174,1.786,177,2.025,179,1.124,180,1.124,181,2.931,182,0.933,185,0.646,186,0.922,188,0.646,189,0.646,194,2.291,199,0.646,201,0.646,202,1.415,203,3.187,204,1.415,205,1.786,206,1.415,207,2.249,208,0.933,209,1.415,210,1.415,211,1.124,212,1.415,213,1.415,214,1.415,215,3.666,216,1.88,217,1.88,218,1.415,219,1.415,220,1.415,221,1.415,222,1.415,223,1.415,224,1.415,225,1.415,226,1.415,227,0.813,228,1.415,229,0.813,230,1.415,231,1.415,232,1.415,233,0.813,234,1.415,235,1.415,236,1.124,237,2.249,238,2.249,239,2.249,240,1.415,241,3.88,242,2.549,243,1.415,244,4.026,245,1.415,246,1.124,247,1.88,248,1.482,249,1.493,250,1.415,251,1.415,252,1.415,253,1.415,254,1.415,255,1.415,256,1.124,257,1.415,258,1.415,259,1.415,260,1.415,261,1.415,262,1.415,263,1.415,264,1.415,265,0.813,266,0.813,267,0.813,268,0.813,269,1.415,270,0.813,271,4.377,272,4.637,273,2.532,274,3.187,275,1.415,276,0.813,277,2.249,278,2.249,279,2.249,280,1.415,281,3.701,282,0.813,283,1.88,284,1.786,285,1.415,286,1.415,287,0.813,288,1.415,289,0.813,290,1.415,291,2.249,292,3.007,293,1.415,294,1.415,295,1.415,296,0.813,297,2.025,298,1.415,299,0.813,300,1.415,301,1.124,302,1.415,303,1.88,304,2.549,305,2.549,306,3.187,307,1.415,308,1.415,309,1.415,310,1.415,311,0.813,312,1.124,313,3.007,314,1.415,315,1.415,316,1.415,317,1.415,318,1.88,319,1.415,320,1.415,321,0.813,322,1.124,323,1.415,324,0.813,325,1.415,326,0.813,327,0.813,328,0.813,329,0.813,330,0.813,331,0.813,332,0.813,333,2.549,334,0.813,335,0.813,336,1.415,337,0.813,338,3.007,339,0.813,340,0.813,341,0.813,342,0.813,343,0.813,344,0.813,345,1.88,346,1.88,347,1.415,348,1.415,349,1.415,350,1.415,351,0.813,352,0.813,353,1.415,354,0.813,355,1.415,356,0.813,357,1.88,358,1.415,359,2.798,360,3.187,361,0.813,362,0.813,363,1.415,364,1.415,365,2.249,366,2.249,367,1.88,368,0.813,369,1.415,370,0.813,371,1.415,372,0.813,373,0.813,374,0.813,375,0.813,376,0.813,377,0.813,378,0.813,379,0.813,380,0.813,381,0.813,382,0.813,383,0.813,384,0.813,385,0.813,386,0.813,387,0.813,388,0.813,389,0.813,390,1.415,391,0.813,392,1.415,393,1.415,394,1.415,395,0.813,396,0.813,397,0.813,398,1.415]],["title/classes/CurrentItem.html",[17,0.029,143,1.054]],["body/classes/CurrentItem.html",[3,0.354,4,0.354,5,0.424,7,0.424,11,0.061,16,0.618,17,0.039,20,0.039,21,0.033,22,0.022,36,0.425,41,1.534,73,0.425,74,0.936,75,1.094,76,1.331,77,1.292,78,2.108,79,1.911,80,2.35,81,2.132,83,2.108,84,1.61,87,1.485,88,1.549,89,1.377,90,1.141,96,0.504,97,1.183,98,0.936,99,1.292,100,1.419,102,0.804,103,1.87,104,0.804,108,1.292,109,1.292,110,1.094,111,1.094,112,2.346,113,2.624,114,1.634,115,1.377,116,1.094,117,1.034,118,0.936,119,1.094,120,2.258,121,1.902,122,1.292,123,1.292,124,1.292,125,2.429,126,1.292,127,1.292,128,1.61,129,0.936,130,1.634,131,0.804,132,1.292,133,1.094,134,1.094,135,1.292,136,1.61,137,1.902,138,2.35,139,1.377,140,1.902,141,1.61,142,1.61,143,1.549,144,1.377,145,1.183,146,1.61,147,1.404,148,2.587,149,2.945,150,2.945,151,2.108,152,2.108,153,2.945,154,1.902,155,1.902,156,1.292,157,1.292,158,2.776,159,1.902,160,2.49,161,2.49,399,1.961,400,1.961,401,1.961,402,1.961]],["title/injectables/MathService.html",[36,0.557,69,0.906]],["body/injectables/MathService.html",[3,0.328,4,0.328,5,0.267,7,0.4,10,0.824,11,0.06,13,0.549,16,0.328,17,0.021,19,1.563,20,0.051,21,0.031,22,0.021,36,0.592,43,2.167,69,0.961,70,1.014,72,1.798,81,1.302,84,1.522,87,1.58,90,1.237,96,0.468,97,1.118,98,1.563,100,1.497,102,1.599,103,1.866,104,1.599,110,1.522,112,0.867,115,1.737,116,2.031,117,0.824,118,1.737,119,2.031,129,1.302,131,1.92,134,2.438,136,1.014,139,1.302,144,0.867,145,1.679,147,1.832,165,1.798,181,3.086,182,2.158,194,2.8,208,3.086,211,2.167,215,2.892,236,2.167,273,2.167,284,1.444,297,3.375,322,1.444,403,1.444,404,2.728,405,2.158,406,2.728,407,2.728,408,2.728,409,2.728,410,2.728,411,2.728,412,2.158,413,2.167,414,2.728,415,2.728,416,2.728,417,2.728,418,2.728,419,2.728,420,2.728,421,2.728,422,4.096,423,2.728,424,2.728,425,2.167,426,2.728,427,1.818,428,5.01,429,1.818,430,1.818,431,1.818,432,2.728,433,1.818,434,2.728,435,2.728,436,2.728,437,1.818,438,1.818,439,1.818,440,1.818,441,1.818,442,1.818,443,1.818,444,1.818,445,1.818,446,1.818,447,1.818,448,1.818,449,1.818,450,1.818,451,1.818,452,1.818,453,3.64,454,1.818,455,1.818,456,1.818,457,1.818,458,1.818,459,1.818,460,1.818]],["title/classes/Operator.html",[17,0.029,88,1.054]],["body/classes/Operator.html",[3,0.342,4,0.342,5,0.493,7,0.278,11,0.061,16,0.606,17,0.038,20,0.038,21,0.032,22,0.022,36,0.611,41,1.399,73,0.411,74,0.905,75,1.058,76,1.31,77,1.25,78,2.074,79,2.216,80,1.874,81,2.195,83,1.571,84,1.058,87,1.509,88,1.706,89,0.905,90,1.123,96,0.488,97,1.155,98,0.905,99,1.25,100,1.466,102,0.778,103,2.029,104,0.778,108,1.25,109,1.25,110,1.571,111,1.571,112,2.361,113,2.819,114,1.986,115,1.774,116,1.571,117,1.257,118,1.344,119,1.571,120,2.214,121,1.856,122,1.25,123,1.25,124,1.856,125,2.469,126,1.856,127,1.856,128,2.074,129,1.344,130,1.603,131,1.155,132,1.856,133,1.571,134,1.571,135,1.856,136,1.058,137,1.25,138,1.874,139,0.905,140,1.25,141,1.058,142,1.058,143,1.155,144,0.905,145,0.778,146,1.058,147,1.377,148,2.074,149,2.45,150,2.45,151,1.571,152,1.571,153,2.45,154,1.25,155,1.856,156,1.25,157,1.25,158,2.214,159,1.25,160,1.856,161,1.856,461,1.897,462,1.897,463,1.897,464,1.897]],["title/classes/SendCalcDto.html",[17,0.029,168,1.226]],["body/classes/SendCalcDto.html",[3,0.635,4,0.635,5,0.517,7,0.517,10,1.064,11,0.059,16,0.635,17,0.049,19,2.204,20,0.04,21,0.049,22,0.04,41,1.51,73,0.93,74,1.682,76,1.735,87,1.294,90,1.064,96,0.906,97,1.757,100,1.242,168,2.045,169,2.8,176,2.824,178,2.824,183,2.824,205,3.405,465,3.405,466,2.8,467,4.618,468,3.524,469,2.8]],["title/coverage.html",[470,2.778]],["body/coverage.html",[0,2.008,1,1.908,5,0.502,6,2.717,11,0.059,14,1.402,17,0.054,20,0.039,21,0.048,22,0.039,29,1.402,36,0.742,69,1.606,71,2.717,73,0.742,75,2.543,88,1.402,90,1.033,131,1.402,143,1.402,145,1.402,162,1.908,163,2.717,168,1.632,186,1.402,201,2.717,403,2.717,465,2.717,466,2.717,470,2.717,471,3.42,472,3.42,473,3.42,474,4.971,475,4.558,476,4.208,477,4.558,478,3.42,479,4.208,480,3.42,481,3.42,482,3.42,483,2.717,484,3.42,485,3.42]],["title/dependencies.html",[26,1.473,486,2.152]],["body/dependencies.html",[11,0.06,13,1.115,17,0.05,20,0.042,21,0.05,22,0.042,26,1.762,63,2.933,64,2.933,412,2.433,469,2.933,487,4.712,488,3.692,489,3.692,490,3.692,491,3.692,492,3.692,493,3.692,494,3.692,495,3.692,496,3.692,497,3.692,498,3.692,499,3.692,500,3.692,501,3.692,502,3.692,503,3.692,504,3.692]],["title/miscellaneous/functions.html",[405,2.035,505,1.709]],["body/miscellaneous/functions.html",[11,0.056,20,0.043,21,0.051,22,0.043,29,1.96,49,2.133,50,2.133,52,3.038,53,3.038,73,0.829,96,0.984,131,1.568,172,2.52,249,3.038,405,2.52,425,3.038,483,3.038,505,3.038,506,3.824,507,3.824,508,3.824,509,3.824,510,3.824,511,3.038,512,3.824,513,3.824,514,3.038]],["title/index.html",[96,0.553,515,2.152,516,2.152]],["body/index.html",[7,0.428,8,2.596,11,0.058,20,0.043,21,0.043,22,0.033,25,1.196,29,1.56,48,3.364,49,2.123,50,2.503,54,2.508,56,2.319,57,2.319,73,0.633,76,1.492,86,2.508,87,0.881,114,1.393,117,1.149,130,1.393,172,2.791,176,1.923,178,2.791,183,1.923,208,1.923,246,3.023,248,1.923,256,2.319,301,2.319,312,2.319,412,1.923,413,2.319,511,3.023,514,2.319,517,3.806,518,3.806,519,2.919,520,3.806,521,2.919,522,3.806,523,4.234,524,2.919,525,2.919,526,2.919,527,2.919,528,2.919,529,2.919,530,2.919,531,2.919,532,2.919,533,2.919,534,2.919,535,2.919,536,3.806,537,2.919,538,2.919,539,2.919,540,2.919,541,2.919,542,3.806,543,3.806,544,2.919,545,2.919,546,2.919,547,4.234,548,3.806,549,2.919,550,2.919,551,2.919,552,2.919,553,2.919,554,2.919,555,3.023,556,2.919,557,4.234,558,3.806,559,2.919,560,2.919,561,2.919,562,2.919,563,2.919,564,2.919,565,2.919,566,2.919,567,2.919,568,3.023,569,2.919,570,2.919,571,2.919,572,2.919,573,2.919,574,2.919,575,2.919]],["title/modules.html",[25,1.433]],["body/modules.html",[11,0.052,20,0.045,21,0.052,22,0.045,24,2.231,25,1.64,35,1.64,555,3.67,576,4.62,577,4.62,578,4.62]],["title/overview.html",[579,2.778]],["body/overview.html",[2,1.694,11,0.058,14,1.899,20,0.04,21,0.049,22,0.04,23,1.694,24,2.857,25,1.456,26,1.694,27,2.34,28,2.34,29,1.456,30,2.34,31,2.34,32,2.821,33,2.821,34,2.821,35,2.081,36,1.045,37,2.837,38,2.34,39,2.34,70,1.981,74,1.694,117,1.3,186,1.899,196,2.821,197,2.821,248,2.34,568,2.821,579,2.821]]],"invertedIndex":[["",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Calc.html":{},"controllers/CalcController.html":{},"modules/CalcModule.html":{},"injectables/CalcService.html":{},"classes/CurrentItem.html":{},"injectables/MathService.html":{},"classes/Operator.html":{},"classes/SendCalcDto.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["0",{"_index":292,"title":{},"body":{"injectables/CalcService.html":{}}}],["0.1.13",{"_index":500,"title":{},"body":{"dependencies.html":{}}}],["0.13.1",{"_index":496,"title":{},"body":{"dependencies.html":{}}}],["0.4.0",{"_index":495,"title":{},"body":{"dependencies.html":{}}}],["1",{"_index":114,"title":{},"body":{"classes/Calc.html":{},"injectables/CalcService.html":{},"classes/CurrentItem.html":{},"classes/Operator.html":{},"index.html":{}}}],["1+2",{"_index":247,"title":{},"body":{"injectables/CalcService.html":{}}}],["1+2*3",{"_index":257,"title":{},"body":{"injectables/CalcService.html":{}}}],["1/1",{"_index":475,"title":{},"body":{"coverage.html":{}}}],["10.3.1",{"_index":497,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":474,"title":{},"body":{"coverage.html":{}}}],["12/15",{"_index":478,"title":{},"body":{"coverage.html":{}}}],["2",{"_index":117,"title":{},"body":{"classes/Calc.html":{},"controllers/CalcController.html":{},"injectables/CalcService.html":{},"classes/CurrentItem.html":{},"injectables/MathService.html":{},"classes/Operator.html":{},"index.html":{},"overview.html":{}}}],["2+2",{"_index":246,"title":{},"body":{"injectables/CalcService.html":{},"index.html":{}}}],["2.1.4",{"_index":493,"title":{},"body":{"dependencies.html":{}}}],["2/2",{"_index":476,"title":{},"body":{"coverage.html":{}}}],["3",{"_index":248,"title":{},"body":{"injectables/CalcService.html":{},"index.html":{},"overview.html":{}}}],["3*4/5",{"_index":268,"title":{},"body":{"injectables/CalcService.html":{}}}],["3.0.2",{"_index":502,"title":{},"body":{"dependencies.html":{}}}],["30",{"_index":532,"title":{},"body":{"index.html":{}}}],["36.30",{"_index":161,"title":{},"body":{"classes/Calc.html":{},"classes/CurrentItem.html":{},"classes/Operator.html":{}}}],["4",{"_index":568,"title":{},"body":{"index.html":{},"overview.html":{}}}],["4/5",{"_index":479,"title":{},"body":{"coverage.html":{}}}],["422",{"_index":314,"title":{},"body":{"injectables/CalcService.html":{}}}],["5/5",{"_index":480,"title":{},"body":{"coverage.html":{}}}],["6",{"_index":259,"title":{},"body":{"injectables/CalcService.html":{}}}],["6.6.6",{"_index":504,"title":{},"body":{"dependencies.html":{}}}],["7",{"_index":261,"title":{},"body":{"injectables/CalcService.html":{}}}],["7.6.15",{"_index":487,"title":{},"body":{"dependencies.html":{}}}],["7/8",{"_index":482,"title":{},"body":{"coverage.html":{}}}],["80",{"_index":477,"title":{},"body":{"coverage.html":{}}}],["8080",{"_index":512,"title":{},"body":{"miscellaneous/functions.html":{}}}],["87",{"_index":481,"title":{},"body":{"coverage.html":{}}}],["9",{"_index":294,"title":{},"body":{"injectables/CalcService.html":{}}}],["a+b",{"_index":135,"title":{},"body":{"classes/Calc.html":{},"classes/CurrentItem.html":{},"classes/Operator.html":{}}}],["a.k.a",{"_index":574,"title":{},"body":{"index.html":{}}}],["actual",{"_index":207,"title":{},"body":{"injectables/CalcService.html":{}}}],["actually",{"_index":132,"title":{},"body":{"classes/Calc.html":{},"classes/CurrentItem.html":{},"classes/Operator.html":{}}}],["addition",{"_index":115,"title":{},"body":{"classes/Calc.html":{},"injectables/CalcService.html":{},"classes/CurrentItem.html":{},"injectables/MathService.html":{},"classes/Operator.html":{}}}],["addition(a",{"_index":427,"title":{},"body":{"injectables/MathService.html":{}}}],["addition(a:string",{"_index":452,"title":{},"body":{"injectables/MathService.html":{}}}],["adds",{"_index":368,"title":{},"body":{"injectables/CalcService.html":{}}}],["agnostic",{"_index":214,"title":{},"body":{"injectables/CalcService.html":{}}}],["allow",{"_index":361,"title":{},"body":{"injectables/CalcService.html":{}}}],["answer",{"_index":566,"title":{},"body":{"index.html":{}}}],["api",{"_index":172,"title":{},"body":{"controllers/CalcController.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["app",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"index.html":{}}}],["app.controller",{"_index":59,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":175,"title":{},"body":{"controllers/CalcController.html":{}}}],["appmodule",{"_index":24,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":14,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["around",{"_index":240,"title":{},"body":{"injectables/CalcService.html":{}}}],["array",{"_index":241,"title":{},"body":{"injectables/CalcService.html":{}}}],["array.from(calc.items",{"_index":391,"title":{},"body":{"injectables/CalcService.html":{}}}],["author",{"_index":571,"title":{},"body":{"index.html":{}}}],["avoid",{"_index":407,"title":{},"body":{"injectables/MathService.html":{}}}],["b",{"_index":428,"title":{},"body":{"injectables/MathService.html":{}}}],["b:string",{"_index":453,"title":{},"body":{"injectables/MathService.html":{}}}],["back",{"_index":522,"title":{},"body":{"index.html":{}}}],["backend",{"_index":539,"title":{},"body":{"index.html":{}}}],["backendstep",{"_index":541,"title":{},"body":{"index.html":{}}}],["being",{"_index":140,"title":{},"body":{"classes/Calc.html":{},"classes/CurrentItem.html":{},"classes/Operator.html":{}}}],["body",{"_index":183,"title":{},"body":{"controllers/CalcController.html":{},"classes/SendCalcDto.html":{},"index.html":{}}}],["boolean",{"_index":148,"title":{},"body":{"classes/Calc.html":{},"injectables/CalcService.html":{},"classes/CurrentItem.html":{},"classes/Operator.html":{}}}],["boolean=false",{"_index":155,"title":{},"body":{"classes/Calc.html":{},"classes/CurrentItem.html":{},"classes/Operator.html":{}}}],["bootstrap",{"_index":29,"title":{},"body":{"modules/AppModule.html":{},"modules/CalcModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"overview.html":{}}}],["browse",{"_index":578,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":555,"title":{},"body":{"index.html":{},"modules.html":{}}}],["build",{"_index":51,"title":{},"body":{"modules/AppModule.html":{}}}],["calc",{"_index":73,"title":{"classes/Calc.html":{}},"body":{"classes/Calc.html":{},"controllers/CalcController.html":{},"injectables/CalcService.html":{},"classes/CurrentItem.html":{},"classes/Operator.html":{},"classes/SendCalcDto.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["calc(calculus",{"_index":380,"title":{},"body":{"injectables/CalcService.html":{}}}],["calc.calculus",{"_index":337,"title":{},"body":{"injectables/CalcService.html":{}}}],["calc.controller",{"_index":200,"title":{},"body":{"modules/CalcModule.html":{}}}],["calc.dto",{"_index":189,"title":{},"body":{"controllers/CalcController.html":{},"injectables/CalcService.html":{}}}],["calc.dto.ts",{"_index":466,"title":{},"body":{"classes/SendCalcDto.html":{},"coverage.html":{}}}],["calc.dto.ts:9",{"_index":468,"title":{},"body":{"classes/SendCalcDto.html":{}}}],["calc.items",{"_index":308,"title":{},"body":{"injectables/CalcService.html":{}}}],["calc.result",{"_index":335,"title":{},"body":{"injectables/CalcService.html":{}}}],["calc.service",{"_index":187,"title":{},"body":{"controllers/CalcController.html":{},"modules/CalcModule.html":{}}}],["calc/calc.module",{"_index":60,"title":{},"body":{"modules/AppModule.html":{}}}],["calc/math.service",{"_index":61,"title":{},"body":{"modules/AppModule.html":{}}}],["calccontroller",{"_index":162,"title":{"controllers/CalcController.html":{}},"body":{"controllers/CalcController.html":{},"modules/CalcModule.html":{},"coverage.html":{}}}],["calcmodule",{"_index":35,"title":{"modules/CalcModule.html":{}},"body":{"modules/AppModule.html":{},"controllers/CalcController.html":{},"modules/CalcModule.html":{},"modules.html":{},"overview.html":{}}}],["calcservice",{"_index":186,"title":{"injectables/CalcService.html":{}},"body":{"controllers/CalcController.html":{},"modules/CalcModule.html":{},"injectables/CalcService.html":{},"coverage.html":{},"overview.html":{}}}],["calculate",{"_index":166,"title":{},"body":{"controllers/CalcController.html":{},"injectables/CalcService.html":{}}}],["calculate(@body",{"_index":193,"title":{},"body":{"controllers/CalcController.html":{}}}],["calculate(sendcalcdto",{"_index":167,"title":{},"body":{"controllers/CalcController.html":{},"injectables/CalcService.html":{}}}],["calculated",{"_index":263,"title":{},"body":{"injectables/CalcService.html":{}}}],["calculator",{"_index":517,"title":{},"body":{"index.html":{}}}],["calculus",{"_index":76,"title":{},"body":{"classes/Calc.html":{},"controllers/CalcController.html":{},"injectables/CalcService.html":{},"classes/CurrentItem.html":{},"classes/Operator.html":{},"classes/SendCalcDto.html":{},"index.html":{}}}],["calculus.split",{"_index":339,"title":{},"body":{"injectables/CalcService.html":{}}}],["can't",{"_index":354,"title":{},"body":{"injectables/CalcService.html":{}}}],["catched",{"_index":315,"title":{},"body":{"injectables/CalcService.html":{}}}],["cd",{"_index":540,"title":{},"body":{"index.html":{}}}],["char",{"_index":272,"title":{},"body":{"injectables/CalcService.html":{}}}],["character",{"_index":373,"title":{},"body":{"injectables/CalcService.html":{}}}],["chars",{"_index":281,"title":{},"body":{"injectables/CalcService.html":{}}}],["chars.length",{"_index":382,"title":{},"body":{"injectables/CalcService.html":{}}}],["chars[i",{"_index":359,"title":{},"body":{"injectables/CalcService.html":{}}}],["check",{"_index":271,"title":{},"body":{"injectables/CalcService.html":{}}}],["checked",{"_index":274,"title":{},"body":{"injectables/CalcService.html":{}}}],["checks",{"_index":302,"title":{},"body":{"injectables/CalcService.html":{}}}],["class",{"_index":17,"title":{"classes/Calc.html":{},"classes/CurrentItem.html":{},"classes/Operator.html":{},"classes/SendCalcDto.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Calc.html":{},"controllers/CalcController.html":{},"modules/CalcModule.html":{},"injectables/CalcService.html":{},"classes/CurrentItem.html":{},"injectables/MathService.html":{},"classes/Operator.html":{},"classes/SendCalcDto.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":74,"title":{},"body":{"classes/Calc.html":{},"classes/CurrentItem.html":{},"classes/Operator.html":{},"classes/SendCalcDto.html":{},"overview.html":{}}}],["clean",{"_index":319,"title":{},"body":{"injectables/CalcService.html":{}}}],["cleaner",{"_index":341,"title":{},"body":{"injectables/CalcService.html":{}}}],["clone",{"_index":538,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":32,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_calcmodule",{"_index":196,"title":{},"body":{"modules/CalcModule.html":{},"overview.html":{}}}],["cluster_calcmodule_providers",{"_index":197,"title":{},"body":{"modules/CalcModule.html":{},"overview.html":{}}}],["code",{"_index":54,"title":{},"body":{"modules/AppModule.html":{},"injectables/CalcService.html":{},"index.html":{}}}],["completemsg",{"_index":383,"title":{},"body":{"injectables/CalcService.html":{}}}],["compose",{"_index":544,"title":{},"body":{"index.html":{}}}],["const",{"_index":333,"title":{},"body":{"injectables/CalcService.html":{}}}],["constructor",{"_index":98,"title":{},"body":{"classes/Calc.html":{},"injectables/CalcService.html":{},"classes/CurrentItem.html":{},"injectables/MathService.html":{},"classes/Operator.html":{}}}],["constructor(calculus",{"_index":99,"title":{},"body":{"classes/Calc.html":{},"classes/CurrentItem.html":{},"classes/Operator.html":{}}}],["constructor(mathservice",{"_index":227,"title":{},"body":{"injectables/CalcService.html":{}}}],["constructor(private",{"_index":18,"title":{},"body":{"controllers/AppController.html":{},"controllers/CalcController.html":{}}}],["constructor(value",{"_index":120,"title":{},"body":{"classes/Calc.html":{},"classes/CurrentItem.html":{},"classes/Operator.html":{}}}],["contains",{"_index":151,"title":{},"body":{"classes/Calc.html":{},"controllers/CalcController.html":{},"classes/CurrentItem.html":{},"classes/Operator.html":{}}}],["continue",{"_index":360,"title":{},"body":{"injectables/CalcService.html":{}}}],["controler",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"controllers/CalcController.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/CalcController.html":{}},"body":{"controllers/AppController.html":{},"controllers/CalcController.html":{},"coverage.html":{}}}],["controller('calc",{"_index":190,"title":{},"body":{"controllers/CalcController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/CalcController.html":{},"modules/CalcModule.html":{},"overview.html":{}}}],["cors",{"_index":507,"title":{},"body":{"miscellaneous/functions.html":{}}}],["coverage",{"_index":470,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["curr",{"_index":338,"title":{},"body":{"injectables/CalcService.html":{}}}],["curr.hasdot",{"_index":370,"title":{},"body":{"injectables/CalcService.html":{}}}],["curr.hasnegative",{"_index":371,"title":{},"body":{"injectables/CalcService.html":{}}}],["current",{"_index":138,"title":{},"body":{"classes/Calc.html":{},"injectables/CalcService.html":{},"classes/CurrentItem.html":{},"classes/Operator.html":{}}}],["currentitem",{"_index":143,"title":{"classes/CurrentItem.html":{}},"body":{"classes/Calc.html":{},"injectables/CalcService.html":{},"classes/CurrentItem.html":{},"classes/Operator.html":{},"coverage.html":{}}}],["currentitem(curr.value",{"_index":365,"title":{},"body":{"injectables/CalcService.html":{}}}],["data",{"_index":177,"title":{},"body":{"controllers/CalcController.html":{},"injectables/CalcService.html":{}}}],["data.operators.foreach(obj",{"_index":328,"title":{},"body":{"injectables/CalcService.html":{}}}],["deal",{"_index":417,"title":{},"body":{"injectables/MathService.html":{}}}],["decimal",{"_index":441,"title":{},"body":{"injectables/MathService.html":{}}}],["decimal(a).dividedby(b).tofixed",{"_index":460,"title":{},"body":{"injectables/MathService.html":{}}}],["decimal(a).minus(b).tofixed",{"_index":456,"title":{},"body":{"injectables/MathService.html":{}}}],["decimal(a).plus(b).tofixed",{"_index":454,"title":{},"body":{"injectables/MathService.html":{}}}],["decimal(a).times(b).tofixed",{"_index":458,"title":{},"body":{"injectables/MathService.html":{}}}],["decimal.js",{"_index":412,"title":{},"body":{"injectables/MathService.html":{},"dependencies.html":{},"index.html":{}}}],["declarations",{"_index":28,"title":{},"body":{"modules/AppModule.html":{},"modules/CalcModule.html":{},"overview.html":{}}}],["decorators",{"_index":169,"title":{},"body":{"controllers/CalcController.html":{},"classes/SendCalcDto.html":{}}}],["default",{"_index":322,"title":{},"body":{"injectables/CalcService.html":{},"injectables/MathService.html":{}}}],["defined",{"_index":100,"title":{},"body":{"classes/Calc.html":{},"controllers/CalcController.html":{},"injectables/CalcService.html":{},"classes/CurrentItem.html":{},"injectables/MathService.html":{},"classes/Operator.html":{},"classes/SendCalcDto.html":{}}}],["dependencies",{"_index":26,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/CalcModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deployed",{"_index":527,"title":{},"body":{"index.html":{}}}],["description",{"_index":7,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Calc.html":{},"controllers/CalcController.html":{},"modules/CalcModule.html":{},"injectables/CalcService.html":{},"classes/CurrentItem.html":{},"injectables/MathService.html":{},"classes/Operator.html":{},"classes/SendCalcDto.html":{},"index.html":{}}}],["details",{"_index":414,"title":{},"body":{"injectables/MathService.html":{}}}],["division",{"_index":119,"title":{},"body":{"classes/Calc.html":{},"classes/CurrentItem.html":{},"injectables/MathService.html":{},"classes/Operator.html":{}}}],["division(a",{"_index":430,"title":{},"body":{"injectables/MathService.html":{}}}],["division(a:string",{"_index":459,"title":{},"body":{"injectables/MathService.html":{}}}],["docalculate",{"_index":218,"title":{},"body":{"injectables/CalcService.html":{}}}],["docalculate(calc",{"_index":232,"title":{},"body":{"injectables/CalcService.html":{}}}],["docker",{"_index":543,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":471,"title":{},"body":{"coverage.html":{}}}],["doing",{"_index":409,"title":{},"body":{"injectables/MathService.html":{}}}],["don't",{"_index":559,"title":{},"body":{"index.html":{}}}],["dot",{"_index":152,"title":{},"body":{"classes/Calc.html":{},"injectables/CalcService.html":{},"classes/CurrentItem.html":{},"classes/Operator.html":{}}}],["dot/operator",{"_index":353,"title":{},"body":{"injectables/CalcService.html":{}}}],["dots",{"_index":352,"title":{},"body":{"injectables/CalcService.html":{}}}],["dto",{"_index":180,"title":{},"body":{"controllers/CalcController.html":{},"injectables/CalcService.html":{}}}],["dto/send",{"_index":188,"title":{},"body":{"controllers/CalcController.html":{},"injectables/CalcService.html":{}}}],["during",{"_index":385,"title":{},"body":{"injectables/CalcService.html":{}}}],["each",{"_index":237,"title":{},"body":{"injectables/CalcService.html":{}}}],["easely",{"_index":212,"title":{},"body":{"injectables/CalcService.html":{}}}],["end",{"_index":50,"title":{},"body":{"modules/AppModule.html":{},"injectables/CalcService.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["entities/calc.entity",{"_index":327,"title":{},"body":{"injectables/CalcService.html":{}}}],["equal",{"_index":291,"title":{},"body":{"injectables/CalcService.html":{}}}],["error",{"_index":306,"title":{},"body":{"injectables/CalcService.html":{}}}],["ex",{"_index":125,"title":{},"body":{"classes/Calc.html":{},"injectables/CalcService.html":{},"classes/CurrentItem.html":{},"classes/Operator.html":{}}}],["example",{"_index":256,"title":{},"body":{"injectables/CalcService.html":{},"index.html":{}}}],["execute",{"_index":404,"title":{},"body":{"injectables/MathService.html":{}}}],["executed",{"_index":129,"title":{},"body":{"classes/Calc.html":{},"injectables/CalcService.html":{},"classes/CurrentItem.html":{},"injectables/MathService.html":{},"classes/Operator.html":{}}}],["executing",{"_index":236,"title":{},"body":{"injectables/CalcService.html":{},"injectables/MathService.html":{}}}],["execution",{"_index":242,"title":{},"body":{"injectables/CalcService.html":{}}}],["export",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Calc.html":{},"controllers/CalcController.html":{},"modules/CalcModule.html":{},"injectables/CalcService.html":{},"classes/CurrentItem.html":{},"injectables/MathService.html":{},"classes/Operator.html":{},"classes/SendCalcDto.html":{}}}],["exports",{"_index":31,"title":{},"body":{"modules/AppModule.html":{},"modules/CalcModule.html":{},"overview.html":{}}}],["express",{"_index":492,"title":{},"body":{"dependencies.html":{}}}],["false",{"_index":366,"title":{},"body":{"injectables/CalcService.html":{}}}],["fast",{"_index":525,"title":{},"body":{"index.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Calc.html":{},"controllers/CalcController.html":{},"modules/CalcModule.html":{},"injectables/CalcService.html":{},"classes/CurrentItem.html":{},"injectables/MathService.html":{},"classes/Operator.html":{},"classes/SendCalcDto.html":{},"coverage.html":{}}}],["filled",{"_index":309,"title":{},"body":{"injectables/CalcService.html":{}}}],["finish",{"_index":94,"title":{},"body":{"classes/Calc.html":{}}}],["first",{"_index":130,"title":{},"body":{"classes/Calc.html":{},"injectables/CalcService.html":{},"classes/CurrentItem.html":{},"classes/Operator.html":{},"index.html":{}}}],["flag",{"_index":150,"title":{},"body":{"classes/Calc.html":{},"classes/CurrentItem.html":{},"classes/Operator.html":{}}}],["float",{"_index":84,"title":{},"body":{"classes/Calc.html":{},"classes/CurrentItem.html":{},"injectables/MathService.html":{},"classes/Operator.html":{}}}],["floating",{"_index":418,"title":{},"body":{"injectables/MathService.html":{}}}],["followed",{"_index":92,"title":{},"body":{"classes/Calc.html":{}}}],["folowed",{"_index":344,"title":{},"body":{"injectables/CalcService.html":{}}}],["forloop",{"_index":279,"title":{},"body":{"injectables/CalcService.html":{}}}],["formated",{"_index":179,"title":{},"body":{"controllers/CalcController.html":{},"injectables/CalcService.html":{}}}],["framework",{"_index":521,"title":{},"body":{"index.html":{}}}],["frameworks",{"_index":570,"title":{},"body":{"index.html":{}}}],["free",{"_index":529,"title":{},"body":{"index.html":{}}}],["friendly",{"_index":305,"title":{},"body":{"injectables/CalcService.html":{}}}],["front",{"_index":49,"title":{},"body":{"modules/AppModule.html":{},"injectables/CalcService.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["frontend",{"_index":58,"title":{},"body":{"modules/AppModule.html":{}}}],["full",{"_index":255,"title":{},"body":{"injectables/CalcService.html":{}}}],["function",{"_index":131,"title":{},"body":{"classes/Calc.html":{},"classes/CurrentItem.html":{},"injectables/MathService.html":{},"classes/Operator.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["functions",{"_index":405,"title":{"miscellaneous/functions.html":{}},"body":{"injectables/MathService.html":{},"miscellaneous/functions.html":{}}}],["gethigherprio",{"_index":219,"title":{},"body":{"injectables/CalcService.html":{}}}],["gethigherprio(items",{"_index":264,"title":{},"body":{"injectables/CalcService.html":{}}}],["getmathfunction",{"_index":423,"title":{},"body":{"injectables/MathService.html":{}}}],["getmathfunction(name",{"_index":432,"title":{},"body":{"injectables/MathService.html":{}}}],["getting",{"_index":515,"title":{"index.html":{}},"body":{}}],["git",{"_index":537,"title":{},"body":{"index.html":{}}}],["gonna",{"_index":434,"title":{},"body":{"injectables/MathService.html":{}}}],["handle",{"_index":355,"title":{},"body":{"injectables/CalcService.html":{}}}],["handled",{"_index":317,"title":{},"body":{"injectables/CalcService.html":{}}}],["handles",{"_index":343,"title":{},"body":{"injectables/CalcService.html":{}}}],["happen",{"_index":378,"title":{},"body":{"injectables/CalcService.html":{}}}],["hasdot",{"_index":149,"title":{},"body":{"classes/Calc.html":{},"classes/CurrentItem.html":{},"classes/Operator.html":{}}}],["hasnegative",{"_index":153,"title":{},"body":{"classes/Calc.html":{},"classes/CurrentItem.html":{},"classes/Operator.html":{}}}],["having",{"_index":160,"title":{},"body":{"classes/Calc.html":{},"classes/CurrentItem.html":{},"classes/Operator.html":{}}}],["here",{"_index":523,"title":{},"body":{"index.html":{}}}],["heroku",{"_index":511,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["hibernating",{"_index":535,"title":{},"body":{"index.html":{}}}],["higher",{"_index":128,"title":{},"body":{"classes/Calc.html":{},"injectables/CalcService.html":{},"classes/CurrentItem.html":{},"classes/Operator.html":{}}}],["higherprio",{"_index":395,"title":{},"body":{"injectables/CalcService.html":{}}}],["highest",{"_index":250,"title":{},"body":{"injectables/CalcService.html":{}}}],["highter",{"_index":266,"title":{},"body":{"injectables/CalcService.html":{}}}],["holding",{"_index":262,"title":{},"body":{"injectables/CalcService.html":{}}}],["host",{"_index":528,"title":{},"body":{"index.html":{}}}],["http://localhost:8080",{"_index":556,"title":{},"body":{"index.html":{}}}],["http://localhost:8080/calc",{"_index":558,"title":{},"body":{"index.html":{}}}],["httpcode",{"_index":184,"title":{},"body":{"controllers/CalcController.html":{}}}],["httpcode(httpstatus.ok",{"_index":192,"title":{},"body":{"controllers/CalcController.html":{}}}],["httpexception",{"_index":325,"title":{},"body":{"injectables/CalcService.html":{}}}],["httpexception(completemsg",{"_index":388,"title":{},"body":{"injectables/CalcService.html":{}}}],["https://github.com/thesmarthyena/calc",{"_index":57,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["https://stackoverflow.com/questions/1458633/how",{"_index":416,"title":{},"body":{"injectables/MathService.html":{}}}],["httpstatus",{"_index":185,"title":{},"body":{"controllers/CalcController.html":{},"injectables/CalcService.html":{}}}],["httpstatus.unprocessable_entity",{"_index":389,"title":{},"body":{"injectables/CalcService.html":{}}}],["i=0",{"_index":340,"title":{},"body":{"injectables/CalcService.html":{}}}],["identifier",{"_index":472,"title":{},"body":{"coverage.html":{}}}],["implemented",{"_index":426,"title":{},"body":{"injectables/MathService.html":{}}}],["implements",{"_index":210,"title":{},"body":{"injectables/CalcService.html":{}}}],["import",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/CalcController.html":{},"modules/CalcModule.html":{},"injectables/CalcService.html":{},"injectables/MathService.html":{},"classes/SendCalcDto.html":{}}}],["imports",{"_index":44,"title":{},"body":{"modules/AppModule.html":{}}}],["imprecision",{"_index":410,"title":{},"body":{"injectables/MathService.html":{}}}],["index",{"_index":96,"title":{"index.html":{}},"body":{"classes/Calc.html":{},"controllers/CalcController.html":{},"injectables/CalcService.html":{},"classes/CurrentItem.html":{},"injectables/MathService.html":{},"classes/Operator.html":{},"classes/SendCalcDto.html":{},"miscellaneous/functions.html":{}}}],["inferior",{"_index":293,"title":{},"body":{"injectables/CalcService.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Calc.html":{},"controllers/CalcController.html":{},"modules/CalcModule.html":{},"injectables/CalcService.html":{},"classes/CurrentItem.html":{},"injectables/MathService.html":{},"classes/Operator.html":{},"classes/SendCalcDto.html":{}}}],["informations",{"_index":137,"title":{},"body":{"classes/Calc.html":{},"classes/CurrentItem.html":{},"classes/Operator.html":{}}}],["initialize",{"_index":425,"title":{},"body":{"injectables/MathService.html":{},"miscellaneous/functions.html":{}}}],["injectable",{"_index":69,"title":{"injectables/AppService.html":{},"injectables/CalcService.html":{},"injectables/MathService.html":{}},"body":{"injectables/AppService.html":{},"injectables/CalcService.html":{},"injectables/MathService.html":{},"coverage.html":{}}}],["injectables",{"_index":70,"title":{},"body":{"injectables/AppService.html":{},"injectables/CalcService.html":{},"injectables/MathService.html":{},"overview.html":{}}}],["injected",{"_index":191,"title":{},"body":{"controllers/CalcController.html":{}}}],["insomnia",{"_index":561,"title":{},"body":{"index.html":{}}}],["install",{"_index":548,"title":{},"body":{"index.html":{}}}],["installation",{"_index":546,"title":{},"body":{"index.html":{}}}],["instance",{"_index":146,"title":{},"body":{"classes/Calc.html":{},"injectables/CalcService.html":{},"classes/CurrentItem.html":{},"classes/Operator.html":{}}}],["instanceof",{"_index":394,"title":{},"body":{"injectables/CalcService.html":{}}}],["instruction",{"_index":45,"title":{},"body":{"modules/AppModule.html":{}}}],["int",{"_index":127,"title":{},"body":{"classes/Calc.html":{},"classes/CurrentItem.html":{},"classes/Operator.html":{}}}],["isdot",{"_index":220,"title":{},"body":{"injectables/CalcService.html":{}}}],["isdot(char",{"_index":269,"title":{},"body":{"injectables/CalcService.html":{}}}],["isfirst",{"_index":221,"title":{},"body":{"injectables/CalcService.html":{}}}],["isfirst(i",{"_index":275,"title":{},"body":{"injectables/CalcService.html":{}}}],["islast",{"_index":222,"title":{},"body":{"injectables/CalcService.html":{}}}],["islast(index",{"_index":280,"title":{},"body":{"injectables/CalcService.html":{}}}],["isn't",{"_index":374,"title":{},"body":{"injectables/CalcService.html":{}}}],["isnegative",{"_index":223,"title":{},"body":{"injectables/CalcService.html":{}}}],["isnegative(char",{"_index":286,"title":{},"body":{"injectables/CalcService.html":{}}}],["isnumber",{"_index":224,"title":{},"body":{"injectables/CalcService.html":{}}}],["isnumber(char",{"_index":288,"title":{},"body":{"injectables/CalcService.html":{}}}],["isoperator",{"_index":225,"title":{},"body":{"injectables/CalcService.html":{}}}],["isoperator(char",{"_index":295,"title":{},"body":{"injectables/CalcService.html":{}}}],["isstring",{"_index":467,"title":{},"body":{"classes/SendCalcDto.html":{}}}],["item",{"_index":80,"title":{},"body":{"classes/Calc.html":{},"injectables/CalcService.html":{},"classes/CurrentItem.html":{},"classes/Operator.html":{}}}],["item.priority",{"_index":398,"title":{},"body":{"injectables/CalcService.html":{}}}],["items",{"_index":78,"title":{},"body":{"classes/Calc.html":{},"injectables/CalcService.html":{},"classes/CurrentItem.html":{},"classes/Operator.html":{}}}],["items.foreach(item",{"_index":393,"title":{},"body":{"injectables/CalcService.html":{}}}],["items.push(curr.value",{"_index":358,"title":{},"body":{"injectables/CalcService.html":{}}}],["items.push(this.myoperators.get(chars[i",{"_index":379,"title":{},"body":{"injectables/CalcService.html":{}}}],["iterating",{"_index":234,"title":{},"body":{"injectables/CalcService.html":{}}}],["iteration",{"_index":244,"title":{},"body":{"injectables/CalcService.html":{}}}],["j",{"_index":397,"title":{},"body":{"injectables/CalcService.html":{}}}],["j=0",{"_index":396,"title":{},"body":{"injectables/CalcService.html":{}}}],["javascript",{"_index":421,"title":{},"body":{"injectables/MathService.html":{}}}],["join",{"_index":65,"title":{},"body":{"modules/AppModule.html":{}}}],["join(__dirname",{"_index":67,"title":{},"body":{"modules/AppModule.html":{}}}],["js",{"_index":408,"title":{},"body":{"injectables/MathService.html":{}}}],["key",{"_index":442,"title":{},"body":{"injectables/MathService.html":{}}}],["last",{"_index":283,"title":{},"body":{"injectables/CalcService.html":{}}}],["launch",{"_index":530,"title":{},"body":{"index.html":{}}}],["legend",{"_index":27,"title":{},"body":{"modules/AppModule.html":{},"modules/CalcModule.html":{},"overview.html":{}}}],["level",{"_index":126,"title":{},"body":{"classes/Calc.html":{},"classes/CurrentItem.html":{},"classes/Operator.html":{}}}],["libraries",{"_index":569,"title":{},"body":{"index.html":{}}}],["local",{"_index":513,"title":{},"body":{"miscellaneous/functions.html":{}}}],["log",{"_index":320,"title":{},"body":{"injectables/CalcService.html":{}}}],["logger",{"_index":326,"title":{},"body":{"injectables/CalcService.html":{}}}],["logger(calcservice.name",{"_index":323,"title":{},"body":{"injectables/CalcService.html":{}}}],["logic",{"_index":206,"title":{},"body":{"injectables/CalcService.html":{}}}],["loop",{"_index":278,"title":{},"body":{"injectables/CalcService.html":{}}}],["love",{"_index":519,"title":{},"body":{"index.html":{}}}],["made",{"_index":518,"title":{},"body":{"index.html":{}}}],["main",{"_index":42,"title":{},"body":{"modules/AppModule.html":{},"injectables/CalcService.html":{}}}],["make",{"_index":318,"title":{},"body":{"injectables/CalcService.html":{}}}],["making",{"_index":213,"title":{},"body":{"injectables/CalcService.html":{}}}],["manually",{"_index":560,"title":{},"body":{"index.html":{}}}],["many",{"_index":245,"title":{},"body":{"injectables/CalcService.html":{}}}],["map",{"_index":297,"title":{},"body":{"injectables/CalcService.html":{},"injectables/MathService.html":{}}}],["match",{"_index":564,"title":{},"body":{"index.html":{}}}],["matches",{"_index":252,"title":{},"body":{"injectables/CalcService.html":{}}}],["matching",{"_index":21,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Calc.html":{},"controllers/CalcController.html":{},"modules/CalcModule.html":{},"injectables/CalcService.html":{},"classes/CurrentItem.html":{},"injectables/MathService.html":{},"classes/Operator.html":{},"classes/SendCalcDto.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["math",{"_index":208,"title":{},"body":{"injectables/CalcService.html":{},"injectables/MathService.html":{},"index.html":{}}}],["math.service",{"_index":199,"title":{},"body":{"modules/CalcModule.html":{},"injectables/CalcService.html":{}}}],["mathservice",{"_index":36,"title":{"injectables/MathService.html":{}},"body":{"modules/AppModule.html":{},"classes/Calc.html":{},"modules/CalcModule.html":{},"injectables/CalcService.html":{},"classes/CurrentItem.html":{},"injectables/MathService.html":{},"classes/Operator.html":{},"coverage.html":{},"overview.html":{}}}],["members",{"_index":362,"title":{},"body":{"injectables/CalcService.html":{}}}],["message",{"_index":313,"title":{},"body":{"injectables/CalcService.html":{}}}],["metadata",{"_index":499,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":174,"title":{},"body":{"controllers/CalcController.html":{},"injectables/CalcService.html":{}}}],["methods",{"_index":165,"title":{},"body":{"controllers/CalcController.html":{},"injectables/CalcService.html":{},"injectables/MathService.html":{}}}],["miscellaneous",{"_index":505,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["mode",{"_index":551,"title":{},"body":{"index.html":{}}}],["module",{"_index":23,"title":{"modules/AppModule.html":{},"modules/CalcModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CalcModule.html":{},"overview.html":{}}}],["modules",{"_index":25,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/CalcModule.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":211,"title":{},"body":{"injectables/CalcService.html":{},"injectables/MathService.html":{}}}],["multiple",{"_index":251,"title":{},"body":{"injectables/CalcService.html":{}}}],["multiplication",{"_index":118,"title":{},"body":{"classes/Calc.html":{},"injectables/CalcService.html":{},"classes/CurrentItem.html":{},"injectables/MathService.html":{},"classes/Operator.html":{}}}],["multiplication(a",{"_index":437,"title":{},"body":{"injectables/MathService.html":{}}}],["multiplication(a:string",{"_index":457,"title":{},"body":{"injectables/MathService.html":{}}}],["mylogger",{"_index":216,"title":{},"body":{"injectables/CalcService.html":{}}}],["mymathfunctions",{"_index":422,"title":{},"body":{"injectables/MathService.html":{}}}],["myoperators",{"_index":217,"title":{},"body":{"injectables/CalcService.html":{}}}],["n",{"_index":238,"title":{},"body":{"injectables/CalcService.html":{}}}],["n+1",{"_index":239,"title":{},"body":{"injectables/CalcService.html":{}}}],["name",{"_index":103,"title":{},"body":{"classes/Calc.html":{},"controllers/CalcController.html":{},"injectables/CalcService.html":{},"classes/CurrentItem.html":{},"injectables/MathService.html":{},"classes/Operator.html":{}}}],["nboperators",{"_index":392,"title":{},"body":{"injectables/CalcService.html":{}}}],["need",{"_index":563,"title":{},"body":{"index.html":{}}}],["negative",{"_index":83,"title":{},"body":{"classes/Calc.html":{},"injectables/CalcService.html":{},"classes/CurrentItem.html":{},"classes/Operator.html":{}}}],["nest",{"_index":520,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":13,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/CalcController.html":{},"modules/CalcModule.html":{},"injectables/CalcService.html":{},"injectables/MathService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":488,"title":{},"body":{"dependencies.html":{}}}],["nestjs/mapped",{"_index":489,"title":{},"body":{"dependencies.html":{}}}],["nestjs/platform",{"_index":491,"title":{},"body":{"dependencies.html":{}}}],["nestjs/serve",{"_index":63,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["never",{"_index":375,"title":{},"body":{"injectables/CalcService.html":{}}}],["new",{"_index":145,"title":{},"body":{"classes/Calc.html":{},"injectables/CalcService.html":{},"classes/CurrentItem.html":{},"injectables/MathService.html":{},"classes/Operator.html":{},"coverage.html":{}}}],["node",{"_index":549,"title":{},"body":{"index.html":{}}}],["now",{"_index":553,"title":{},"body":{"index.html":{}}}],["npm",{"_index":547,"title":{},"body":{"index.html":{}}}],["number",{"_index":81,"title":{},"body":{"classes/Calc.html":{},"injectables/CalcService.html":{},"classes/CurrentItem.html":{},"injectables/MathService.html":{},"classes/Operator.html":{}}}],["number(obj.priority",{"_index":331,"title":{},"body":{"injectables/CalcService.html":{}}}],["number/operator",{"_index":377,"title":{},"body":{"injectables/CalcService.html":{}}}],["numbers",{"_index":307,"title":{},"body":{"injectables/CalcService.html":{}}}],["obj.name",{"_index":332,"title":{},"body":{"injectables/CalcService.html":{}}}],["object",{"_index":89,"title":{},"body":{"classes/Calc.html":{},"controllers/CalcController.html":{},"injectables/CalcService.html":{},"classes/CurrentItem.html":{},"classes/Operator.html":{}}}],["occured",{"_index":384,"title":{},"body":{"injectables/CalcService.html":{}}}],["one",{"_index":91,"title":{},"body":{"classes/Calc.html":{},"injectables/CalcService.html":{}}}],["open",{"_index":554,"title":{},"body":{"index.html":{}}}],["operation",{"_index":133,"title":{},"body":{"classes/Calc.html":{},"injectables/CalcService.html":{},"classes/CurrentItem.html":{},"classes/Operator.html":{}}}],["operator",{"_index":88,"title":{"classes/Operator.html":{}},"body":{"classes/Calc.html":{},"injectables/CalcService.html":{},"classes/CurrentItem.html":{},"classes/Operator.html":{},"coverage.html":{}}}],["operator(obj.value",{"_index":330,"title":{},"body":{"injectables/CalcService.html":{}}}],["operators",{"_index":79,"title":{},"body":{"classes/Calc.html":{},"injectables/CalcService.html":{},"classes/CurrentItem.html":{},"classes/Operator.html":{}}}],["operators.json",{"_index":111,"title":{},"body":{"classes/Calc.html":{},"injectables/CalcService.html":{},"classes/CurrentItem.html":{},"classes/Operator.html":{}}}],["option",{"_index":509,"title":{},"body":{"miscellaneous/functions.html":{}}}],["optional",{"_index":104,"title":{},"body":{"classes/Calc.html":{},"controllers/CalcController.html":{},"injectables/CalcService.html":{},"classes/CurrentItem.html":{},"injectables/MathService.html":{},"classes/Operator.html":{}}}],["out",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"modules/CalcModule.html":{},"overview.html":{}}}],["over",{"_index":235,"title":{},"body":{"injectables/CalcService.html":{}}}],["overview",{"_index":579,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":486,"title":{"dependencies.html":{}},"body":{}}],["param",{"_index":147,"title":{},"body":{"classes/Calc.html":{},"controllers/CalcController.html":{},"injectables/CalcService.html":{},"classes/CurrentItem.html":{},"injectables/MathService.html":{},"classes/Operator.html":{}}}],["parameter",{"_index":435,"title":{},"body":{"injectables/MathService.html":{}}}],["parameters",{"_index":102,"title":{},"body":{"classes/Calc.html":{},"controllers/CalcController.html":{},"injectables/CalcService.html":{},"classes/CurrentItem.html":{},"injectables/MathService.html":{},"classes/Operator.html":{}}}],["params",{"_index":406,"title":{},"body":{"injectables/MathService.html":{}}}],["parse",{"_index":203,"title":{},"body":{"injectables/CalcService.html":{}}}],["parse(calculus",{"_index":298,"title":{},"body":{"injectables/CalcService.html":{}}}],["parsed",{"_index":141,"title":{},"body":{"classes/Calc.html":{},"injectables/CalcService.html":{},"classes/CurrentItem.html":{},"classes/Operator.html":{}}}],["parser",{"_index":142,"title":{},"body":{"classes/Calc.html":{},"injectables/CalcService.html":{},"classes/CurrentItem.html":{},"classes/Operator.html":{}}}],["parsing",{"_index":258,"title":{},"body":{"injectables/CalcService.html":{}}}],["path",{"_index":52,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/functions.html":{}}}],["per",{"_index":243,"title":{},"body":{"injectables/CalcService.html":{}}}],["perform",{"_index":134,"title":{},"body":{"classes/Calc.html":{},"classes/CurrentItem.html":{},"injectables/MathService.html":{},"classes/Operator.html":{}}}],["philippe",{"_index":573,"title":{},"body":{"index.html":{}}}],["point",{"_index":419,"title":{},"body":{"injectables/MathService.html":{}}}],["ports",{"_index":508,"title":{},"body":{"miscellaneous/functions.html":{}}}],["position",{"_index":154,"title":{},"body":{"classes/Calc.html":{},"classes/CurrentItem.html":{},"classes/Operator.html":{}}}],["positive",{"_index":82,"title":{},"body":{"classes/Calc.html":{}}}],["post",{"_index":176,"title":{},"body":{"controllers/CalcController.html":{},"classes/SendCalcDto.html":{},"index.html":{}}}],["post()@httpcode(httpstatus.ok",{"_index":170,"title":{},"body":{"controllers/CalcController.html":{}}}],["postman",{"_index":562,"title":{},"body":{"index.html":{}}}],["precision",{"_index":420,"title":{},"body":{"injectables/MathService.html":{}}}],["prefix",{"_index":164,"title":{},"body":{"controllers/CalcController.html":{}}}],["priority",{"_index":113,"title":{},"body":{"classes/Calc.html":{},"injectables/CalcService.html":{},"classes/CurrentItem.html":{},"classes/Operator.html":{}}}],["private",{"_index":215,"title":{},"body":{"injectables/CalcService.html":{},"injectables/MathService.html":{}}}],["process",{"_index":300,"title":{},"body":{"injectables/CalcService.html":{}}}],["process.env.port",{"_index":510,"title":{},"body":{"miscellaneous/functions.html":{}}}],["production",{"_index":550,"title":{},"body":{"index.html":{}}}],["properly",{"_index":316,"title":{},"body":{"injectables/CalcService.html":{}}}],["properties",{"_index":97,"title":{},"body":{"classes/Calc.html":{},"injectables/CalcService.html":{},"classes/CurrentItem.html":{},"injectables/MathService.html":{},"classes/Operator.html":{},"classes/SendCalcDto.html":{}}}],["property",{"_index":182,"title":{},"body":{"controllers/CalcController.html":{},"injectables/CalcService.html":{},"injectables/MathService.html":{}}}],["providers",{"_index":30,"title":{},"body":{"modules/AppModule.html":{},"modules/CalcModule.html":{},"overview.html":{}}}],["react",{"_index":48,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["readonly",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"controllers/CalcController.html":{},"injectables/CalcService.html":{},"injectables/MathService.html":{},"classes/SendCalcDto.html":{}}}],["receive",{"_index":567,"title":{},"body":{"index.html":{}}}],["reflect",{"_index":498,"title":{},"body":{"dependencies.html":{}}}],["remove",{"_index":253,"title":{},"body":{"injectables/CalcService.html":{}}}],["renderpath",{"_index":68,"title":{},"body":{"modules/AppModule.html":{}}}],["replace",{"_index":254,"title":{},"body":{"injectables/CalcService.html":{}}}],["repository",{"_index":56,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["representing",{"_index":284,"title":{},"body":{"injectables/CalcService.html":{},"injectables/MathService.html":{}}}],["represents",{"_index":41,"title":{},"body":{"modules/AppModule.html":{},"classes/Calc.html":{},"controllers/CalcController.html":{},"modules/CalcModule.html":{},"classes/CurrentItem.html":{},"classes/Operator.html":{},"classes/SendCalcDto.html":{}}}],["request",{"_index":178,"title":{},"body":{"controllers/CalcController.html":{},"classes/SendCalcDto.html":{},"index.html":{}}}],["res",{"_index":12,"title":{},"body":{"controllers/AppController.html":{}}}],["reset",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"modules/CalcModule.html":{},"overview.html":{}}}],["resolve",{"_index":205,"title":{},"body":{"injectables/CalcService.html":{},"classes/SendCalcDto.html":{}}}],["resolving",{"_index":230,"title":{},"body":{"injectables/CalcService.html":{}}}],["result",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Calc.html":{},"controllers/CalcController.html":{},"modules/CalcModule.html":{},"injectables/CalcService.html":{},"classes/CurrentItem.html":{},"injectables/MathService.html":{},"classes/Operator.html":{},"classes/SendCalcDto.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["results",{"_index":22,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Calc.html":{},"controllers/CalcController.html":{},"modules/CalcModule.html":{},"injectables/CalcService.html":{},"classes/CurrentItem.html":{},"injectables/MathService.html":{},"classes/Operator.html":{},"classes/SendCalcDto.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["return",{"_index":194,"title":{},"body":{"controllers/CalcController.html":{},"injectables/CalcService.html":{},"injectables/MathService.html":{}}}],["returns",{"_index":181,"title":{},"body":{"controllers/CalcController.html":{},"injectables/CalcService.html":{},"injectables/MathService.html":{}}}],["rimraf",{"_index":501,"title":{},"body":{"dependencies.html":{}}}],["role",{"_index":202,"title":{},"body":{"injectables/CalcService.html":{}}}],["rootpath",{"_index":66,"title":{},"body":{"modules/AppModule.html":{}}}],["route",{"_index":173,"title":{},"body":{"controllers/CalcController.html":{}}}],["run",{"_index":514,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["running",{"_index":542,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":503,"title":{},"body":{"dependencies.html":{}}}],["second",{"_index":260,"title":{},"body":{"injectables/CalcService.html":{}}}],["seconds",{"_index":533,"title":{},"body":{"index.html":{}}}],["see",{"_index":43,"title":{},"body":{"modules/AppModule.html":{},"injectables/MathService.html":{}}}],["send",{"_index":312,"title":{},"body":{"injectables/CalcService.html":{},"index.html":{}}}],["sendcalcdto",{"_index":168,"title":{"classes/SendCalcDto.html":{}},"body":{"controllers/CalcController.html":{},"injectables/CalcService.html":{},"classes/SendCalcDto.html":{},"coverage.html":{}}}],["sending",{"_index":277,"title":{},"body":{"injectables/CalcService.html":{}}}],["sent",{"_index":231,"title":{},"body":{"injectables/CalcService.html":{}}}],["separate",{"_index":55,"title":{},"body":{"modules/AppModule.html":{},"injectables/CalcService.html":{}}}],["separated",{"_index":209,"title":{},"body":{"injectables/CalcService.html":{}}}],["sequence",{"_index":77,"title":{},"body":{"classes/Calc.html":{},"classes/CurrentItem.html":{},"classes/Operator.html":{}}}],["serve",{"_index":47,"title":{},"body":{"modules/AppModule.html":{}}}],["server",{"_index":53,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/functions.html":{}}}],["servestaticmodule",{"_index":62,"title":{},"body":{"modules/AppModule.html":{}}}],["servestaticmodule.forroot",{"_index":46,"title":{},"body":{"modules/AppModule.html":{}}}],["service",{"_index":72,"title":{},"body":{"injectables/AppService.html":{},"controllers/CalcController.html":{},"injectables/MathService.html":{}}}],["set",{"_index":144,"title":{},"body":{"classes/Calc.html":{},"controllers/CalcController.html":{},"classes/CurrentItem.html":{},"injectables/MathService.html":{},"classes/Operator.html":{}}}],["signature",{"_index":565,"title":{},"body":{"index.html":{}}}],["simple",{"_index":301,"title":{},"body":{"injectables/CalcService.html":{},"index.html":{}}}],["simply",{"_index":85,"title":{},"body":{"classes/Calc.html":{}}}],["single",{"_index":273,"title":{},"body":{"injectables/CalcService.html":{},"injectables/MathService.html":{}}}],["skopal",{"_index":572,"title":{},"body":{"index.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Calc.html":{},"controllers/CalcController.html":{},"modules/CalcModule.html":{},"injectables/CalcService.html":{},"classes/CurrentItem.html":{},"injectables/MathService.html":{},"classes/Operator.html":{},"classes/SendCalcDto.html":{}}}],["splited",{"_index":285,"title":{},"body":{"injectables/CalcService.html":{}}}],["src/.../main.ts",{"_index":506,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.module.ts",{"_index":40,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":71,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/calc/calc.controller.ts",{"_index":163,"title":{},"body":{"controllers/CalcController.html":{},"coverage.html":{}}}],["src/calc/calc.controller.ts:23",{"_index":171,"title":{},"body":{"controllers/CalcController.html":{}}}],["src/calc/calc.module.ts",{"_index":198,"title":{},"body":{"modules/CalcModule.html":{}}}],["src/calc/calc.service.ts",{"_index":201,"title":{},"body":{"injectables/CalcService.html":{},"coverage.html":{}}}],["src/calc/calc.service.ts:13",{"_index":324,"title":{},"body":{"injectables/CalcService.html":{}}}],["src/calc/calc.service.ts:14",{"_index":228,"title":{},"body":{"injectables/CalcService.html":{}}}],["src/calc/calc.service.ts:143",{"_index":289,"title":{},"body":{"injectables/CalcService.html":{}}}],["src/calc/calc.service.ts:152",{"_index":296,"title":{},"body":{"injectables/CalcService.html":{}}}],["src/calc/calc.service.ts:161",{"_index":276,"title":{},"body":{"injectables/CalcService.html":{}}}],["src/calc/calc.service.ts:171",{"_index":282,"title":{},"body":{"injectables/CalcService.html":{}}}],["src/calc/calc.service.ts:180",{"_index":270,"title":{},"body":{"injectables/CalcService.html":{}}}],["src/calc/calc.service.ts:189",{"_index":287,"title":{},"body":{"injectables/CalcService.html":{}}}],["src/calc/calc.service.ts:198",{"_index":311,"title":{},"body":{"injectables/CalcService.html":{}}}],["src/calc/calc.service.ts:216",{"_index":233,"title":{},"body":{"injectables/CalcService.html":{}}}],["src/calc/calc.service.ts:253",{"_index":265,"title":{},"body":{"injectables/CalcService.html":{}}}],["src/calc/calc.service.ts:29",{"_index":229,"title":{},"body":{"injectables/CalcService.html":{}}}],["src/calc/calc.service.ts:46",{"_index":299,"title":{},"body":{"injectables/CalcService.html":{}}}],["src/calc/dto/send",{"_index":465,"title":{},"body":{"classes/SendCalcDto.html":{},"coverage.html":{}}}],["src/calc/entities/calc.entity.ts",{"_index":75,"title":{},"body":{"classes/Calc.html":{},"classes/CurrentItem.html":{},"classes/Operator.html":{},"coverage.html":{}}}],["src/calc/entities/calc.entity.ts:12",{"_index":105,"title":{},"body":{"classes/Calc.html":{}}}],["src/calc/entities/calc.entity.ts:15",{"_index":106,"title":{},"body":{"classes/Calc.html":{}}}],["src/calc/entities/calc.entity.ts:18",{"_index":107,"title":{},"body":{"classes/Calc.html":{}}}],["src/calc/entities/calc.entity.ts:33",{"_index":461,"title":{},"body":{"classes/Operator.html":{}}}],["src/calc/entities/calc.entity.ts:41",{"_index":464,"title":{},"body":{"classes/Operator.html":{}}}],["src/calc/entities/calc.entity.ts:44",{"_index":463,"title":{},"body":{"classes/Operator.html":{}}}],["src/calc/entities/calc.entity.ts:47",{"_index":462,"title":{},"body":{"classes/Operator.html":{}}}],["src/calc/entities/calc.entity.ts:5",{"_index":101,"title":{},"body":{"classes/Calc.html":{}}}],["src/calc/entities/calc.entity.ts:53",{"_index":399,"title":{},"body":{"classes/CurrentItem.html":{}}}],["src/calc/entities/calc.entity.ts:67",{"_index":402,"title":{},"body":{"classes/CurrentItem.html":{}}}],["src/calc/entities/calc.entity.ts:70",{"_index":400,"title":{},"body":{"classes/CurrentItem.html":{}}}],["src/calc/entities/calc.entity.ts:73",{"_index":401,"title":{},"body":{"classes/CurrentItem.html":{}}}],["src/calc/math.service.ts",{"_index":403,"title":{},"body":{"injectables/MathService.html":{},"coverage.html":{}}}],["src/calc/math.service.ts:15",{"_index":424,"title":{},"body":{"injectables/MathService.html":{}}}],["src/calc/math.service.ts:32",{"_index":433,"title":{},"body":{"injectables/MathService.html":{}}}],["src/calc/math.service.ts:42",{"_index":429,"title":{},"body":{"injectables/MathService.html":{}}}],["src/calc/math.service.ts:52",{"_index":440,"title":{},"body":{"injectables/MathService.html":{}}}],["src/calc/math.service.ts:62",{"_index":438,"title":{},"body":{"injectables/MathService.html":{}}}],["src/calc/math.service.ts:72",{"_index":431,"title":{},"body":{"injectables/MathService.html":{}}}],["src/main.ts",{"_index":483,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["start",{"_index":93,"title":{},"body":{"classes/Calc.html":{}}}],["start:prodstep",{"_index":552,"title":{},"body":{"index.html":{}}}],["started",{"_index":516,"title":{"index.html":{}},"body":{}}],["statements",{"_index":473,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":64,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["step",{"_index":536,"title":{},"body":{"index.html":{}}}],["stop",{"_index":534,"title":{},"body":{"index.html":{}}}],["store",{"_index":158,"title":{},"body":{"classes/Calc.html":{},"classes/CurrentItem.html":{},"classes/Operator.html":{}}}],["stored",{"_index":86,"title":{},"body":{"classes/Calc.html":{},"injectables/CalcService.html":{},"index.html":{}}}],["stores",{"_index":136,"title":{},"body":{"classes/Calc.html":{},"classes/CurrentItem.html":{},"injectables/MathService.html":{},"classes/Operator.html":{}}}],["string",{"_index":87,"title":{},"body":{"classes/Calc.html":{},"controllers/CalcController.html":{},"injectables/CalcService.html":{},"classes/CurrentItem.html":{},"injectables/MathService.html":{},"classes/Operator.html":{},"classes/SendCalcDto.html":{},"index.html":{}}}],["string|operator",{"_index":390,"title":{},"body":{"injectables/CalcService.html":{}}}],["substraction",{"_index":116,"title":{},"body":{"classes/Calc.html":{},"classes/CurrentItem.html":{},"injectables/MathService.html":{},"classes/Operator.html":{}}}],["substraction(a",{"_index":439,"title":{},"body":{"injectables/MathService.html":{}}}],["substraction(a:string",{"_index":455,"title":{},"body":{"injectables/MathService.html":{}}}],["sumber",{"_index":159,"title":{},"body":{"classes/Calc.html":{},"classes/CurrentItem.html":{},"classes/Operator.html":{}}}],["superior",{"_index":290,"title":{},"body":{"injectables/CalcService.html":{}}}],["suposed",{"_index":356,"title":{},"body":{"injectables/CalcService.html":{}}}],["supplied",{"_index":267,"title":{},"body":{"injectables/CalcService.html":{}}}],["support",{"_index":576,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":577,"title":{},"body":{"modules.html":{}}}],["switch",{"_index":376,"title":{},"body":{"injectables/CalcService.html":{}}}],["symbol",{"_index":124,"title":{},"body":{"classes/Calc.html":{},"classes/CurrentItem.html":{},"classes/Operator.html":{}}}],["table",{"_index":485,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":484,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":531,"title":{},"body":{"index.html":{}}}],["task",{"_index":436,"title":{},"body":{"injectables/MathService.html":{}}}],["testing",{"_index":526,"title":{},"body":{"index.html":{}}}],["that's",{"_index":411,"title":{},"body":{"injectables/MathService.html":{}}}],["thesmarthyena",{"_index":575,"title":{},"body":{"index.html":{}}}],["this.addition",{"_index":444,"title":{},"body":{"injectables/MathService.html":{}}}],["this.calcservice.calculate(sendcalcdto",{"_index":195,"title":{},"body":{"controllers/CalcController.html":{}}}],["this.calculus",{"_index":108,"title":{},"body":{"classes/Calc.html":{},"classes/CurrentItem.html":{},"classes/Operator.html":{}}}],["this.division",{"_index":450,"title":{},"body":{"injectables/MathService.html":{}}}],["this.docalculate(calc",{"_index":336,"title":{},"body":{"injectables/CalcService.html":{}}}],["this.hasdot",{"_index":156,"title":{},"body":{"classes/Calc.html":{},"classes/CurrentItem.html":{},"classes/Operator.html":{}}}],["this.hasnegative",{"_index":157,"title":{},"body":{"classes/Calc.html":{},"classes/CurrentItem.html":{},"classes/Operator.html":{}}}],["this.isdot(chars[i",{"_index":347,"title":{},"body":{"injectables/CalcService.html":{}}}],["this.isdot(chars[i+1",{"_index":348,"title":{},"body":{"injectables/CalcService.html":{}}}],["this.isfirst(i",{"_index":363,"title":{},"body":{"injectables/CalcService.html":{}}}],["this.islast(i",{"_index":345,"title":{},"body":{"injectables/CalcService.html":{}}}],["this.isnegative(chars[i",{"_index":364,"title":{},"body":{"injectables/CalcService.html":{}}}],["this.isnegative(chars[i+1",{"_index":350,"title":{},"body":{"injectables/CalcService.html":{}}}],["this.isnumber(chars[i",{"_index":357,"title":{},"body":{"injectables/CalcService.html":{}}}],["this.isnumber(chars[i+1",{"_index":369,"title":{},"body":{"injectables/CalcService.html":{}}}],["this.isoperator(chars[i",{"_index":346,"title":{},"body":{"injectables/CalcService.html":{}}}],["this.isoperator(chars[i+1",{"_index":349,"title":{},"body":{"injectables/CalcService.html":{}}}],["this.items",{"_index":109,"title":{},"body":{"classes/Calc.html":{},"classes/CurrentItem.html":{},"classes/Operator.html":{}}}],["this.multiplication",{"_index":448,"title":{},"body":{"injectables/MathService.html":{}}}],["this.mylogger.error(completemsg",{"_index":386,"title":{},"body":{"injectables/CalcService.html":{}}}],["this.mymathfunctions.get(name",{"_index":451,"title":{},"body":{"injectables/MathService.html":{}}}],["this.mymathfunctions.set(\"addition",{"_index":443,"title":{},"body":{"injectables/MathService.html":{}}}],["this.mymathfunctions.set(\"division",{"_index":449,"title":{},"body":{"injectables/MathService.html":{}}}],["this.mymathfunctions.set(\"multiplication",{"_index":447,"title":{},"body":{"injectables/MathService.html":{}}}],["this.mymathfunctions.set(\"substraction",{"_index":445,"title":{},"body":{"injectables/MathService.html":{}}}],["this.myoperators.has(char",{"_index":381,"title":{},"body":{"injectables/CalcService.html":{}}}],["this.myoperators.set(obj.value",{"_index":329,"title":{},"body":{"injectables/CalcService.html":{}}}],["this.name",{"_index":123,"title":{},"body":{"classes/Calc.html":{},"classes/CurrentItem.html":{},"classes/Operator.html":{}}}],["this.parse(sendcalcdto.calculus",{"_index":334,"title":{},"body":{"injectables/CalcService.html":{}}}],["this.priority",{"_index":122,"title":{},"body":{"classes/Calc.html":{},"classes/CurrentItem.html":{},"classes/Operator.html":{}}}],["this.substraction",{"_index":446,"title":{},"body":{"injectables/MathService.html":{}}}],["this.throwerrorparse(`last",{"_index":372,"title":{},"body":{"injectables/CalcService.html":{}}}],["this.throwerrorparse(`two",{"_index":351,"title":{},"body":{"injectables/CalcService.html":{}}}],["this.value",{"_index":121,"title":{},"body":{"classes/Calc.html":{},"classes/CurrentItem.html":{},"classes/Operator.html":{}}}],["throw",{"_index":387,"title":{},"body":{"injectables/CalcService.html":{}}}],["throwerrorparse",{"_index":226,"title":{},"body":{"injectables/CalcService.html":{}}}],["throwerrorparse(message",{"_index":310,"title":{},"body":{"injectables/CalcService.html":{}}}],["throws",{"_index":303,"title":{},"body":{"injectables/CalcService.html":{}}}],["topic",{"_index":415,"title":{},"body":{"injectables/MathService.html":{}}}],["transformer",{"_index":494,"title":{},"body":{"dependencies.html":{}}}],["true",{"_index":367,"title":{},"body":{"injectables/CalcService.html":{}}}],["try",{"_index":524,"title":{},"body":{"index.html":{}}}],["two",{"_index":249,"title":{},"body":{"injectables/CalcService.html":{},"miscellaneous/functions.html":{}}}],["type",{"_index":90,"title":{},"body":{"classes/Calc.html":{},"controllers/CalcController.html":{},"injectables/CalcService.html":{},"classes/CurrentItem.html":{},"injectables/MathService.html":{},"classes/Operator.html":{},"classes/SendCalcDto.html":{},"coverage.html":{}}}],["types",{"_index":490,"title":{},"body":{"dependencies.html":{}}}],["upalternative",{"_index":545,"title":{},"body":{"index.html":{}}}],["usable",{"_index":204,"title":{},"body":{"injectables/CalcService.html":{}}}],["use",{"_index":557,"title":{},"body":{"index.html":{}}}],["used",{"_index":413,"title":{},"body":{"injectables/MathService.html":{},"index.html":{}}}],["user",{"_index":304,"title":{},"body":{"injectables/CalcService.html":{}}}],["valid",{"_index":95,"title":{},"body":{"classes/Calc.html":{},"injectables/CalcService.html":{}}}],["validator",{"_index":469,"title":{},"body":{"classes/SendCalcDto.html":{},"dependencies.html":{}}}],["value",{"_index":112,"title":{},"body":{"classes/Calc.html":{},"injectables/CalcService.html":{},"classes/CurrentItem.html":{},"injectables/MathService.html":{},"classes/Operator.html":{}}}],["values",{"_index":110,"title":{},"body":{"classes/Calc.html":{},"classes/CurrentItem.html":{},"injectables/MathService.html":{},"classes/Operator.html":{}}}],["version",{"_index":342,"title":{},"body":{"injectables/CalcService.html":{}}}],["void",{"_index":321,"title":{},"body":{"injectables/CalcService.html":{}}}],["who's",{"_index":139,"title":{},"body":{"classes/Calc.html":{},"injectables/CalcService.html":{},"classes/CurrentItem.html":{},"injectables/MathService.html":{},"classes/Operator.html":{}}}],["zoom",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"modules/CalcModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n            \n                Description\n            \n            \n                App controler \n\n            \n\n\n\n\n\n    \n\n\n    \n        import { Controller, Get, Res } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n/** App controler */\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nCalcModule\n\nCalcModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nCalcModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nMathService\n\nMathService\n\nAppModule -->\n\nMathService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n        \n            Description\n        \n        \n            Represents the main module of the app. \nWe can see in the imports the instruction: \"ServeStaticModule.forRoot(...\", this instruction is to serve the React front-end, (in /build), to serve it at path \"/\" on the server. \nSource code of the front-end is in a separate repository: https://github.com/TheSmartHyena/calc-frontend \n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                        \n                            MathService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CalcModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { CalcModule } from './calc/calc.module';\nimport { MathService } from './calc/math.service';\nimport { ServeStaticModule } from '@nestjs/serve-static';\nimport { join } from 'path';\n\n/**\n * Represents the main module of the app. \n * We can see in the imports the instruction: \"ServeStaticModule.forRoot(...\", this instruction is to serve the React front-end, (in /build), to serve it at path \"/\" on the server. \n * Source code of the front-end is in a separate repository: https://github.com/TheSmartHyena/calc-frontend \n */\n@Module({\n  imports: [CalcModule, ServeStaticModule.forRoot({\n    rootPath: join(__dirname, '..', 'build'),\n    renderPath: \"/\",\n  })],\n  controllers: [AppController],\n  providers: [AppService, MathService],\n  \n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n            \n                Description\n            \n            \n                App service.\n\n            \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n/**\n * App service.\n */\n@Injectable()\nexport class AppService {}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Calc.html":{"url":"classes/Calc.html","title":"class - Calc","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Calc\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/calc/entities/calc.entity.ts\n        \n\n            \n                Description\n            \n            \n                Represents a Calculus.\nA calculus is a sequence of items and operators. An item is a number (Positive, negative or float), simply stored in a string. An operator can be: \"+\"\", \"-\", \"*\", \"/\", and is stored in an object of type Operator. \nOne item has to be followed by an operator, start and finish with an item to be valid.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                calculus\n                            \n                            \n                                items\n                            \n                            \n                                result\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(calculus: string, items: (string | Operator)[])\n                    \n                \n                        \n                            \n                                Defined in src/calc/entities/calc.entity.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        calculus\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        items\n                                                  \n                                                        \n                                                                        (string | Operator)[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            calculus\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/calc/entities/calc.entity.ts:12\n                            \n                        \n\n                \n                    \n                        The calculus. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            items\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         (string | Operator)[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/calc/entities/calc.entity.ts:15\n                            \n                        \n\n                \n                    \n                        The sequence of items (number) and Operators \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            result\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/calc/entities/calc.entity.ts:18\n                            \n                        \n\n                \n                    \n                        The result of the calculus \n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Calc {\n    constructor(calculus: string, items: (string | Operator)[]) {\n        this.calculus = calculus;\n        this.items = items;\n    }\n\n    /** The calculus. */\n    calculus: string\n\n    /** The sequence of items (number) and Operators */\n    items: (string | Operator)[]\n\n    /** The result of the calculus */\n    result: string\n}\n\n/**\n * Represents an operator. \n * Operators values are defined in the file: operators.json -> \n *  * \n *  {\"operators\": [\n *      {\"value\" : \"+\", \"priority\" : \"1\", \"name\": \"addition\"},\n *      {\"value\" : \"-\", \"priority\" : \"1\", \"name\": \"substraction\"},\n *      {\"value\" : \"*\", \"priority\" : \"2\", \"name\": \"multiplication\"},\n *      {\"value\" : \"/\", \"priority\" : \"2\", \"name\": \"division\"}\n *  ]}\n * \n */\nexport class Operator { \n    constructor(value: string, priority: number, name: string) {\n        this.value = value;\n        this.priority = priority;\n        this.name = name;\n    }\n\n    /** Symbol as string ex: \"+\". */\n    value: string\n\n    /** Priority level as int, higher the number is, higher the priority is ex: \"+ -> priority: 1\", \"* -> priority: 2\" ==> The \"*\" will be executed first. */\n    priority: number\n\n    /** Name of the function is MathService, which is able to actually to the operation Ex: \"addition\" -> perform a+b. */\n    name: string\n}\n\n/**\n * Represents an object, who stores informations about current item who's being parsed by the parser. \n */\nexport class CurrentItem {\n    /**\n     * Set value for new CurrentItem instance.\n     * @param {string} value Current item value.\n     * @param {boolean} hasDot Flag if  contains dot.\n     * @param {boolean} hasNegative Flag if item is negative -> contains \"-\" at first position.\n     */\n    constructor(value: string=\"\", hasDot: boolean=false, hasNegative: boolean=false) {\n        this.value = value;\n        this.hasDot = hasDot;\n        this.hasNegative = hasNegative;\n    }\n\n    /** Store the current sumber.*/\n    value: string\n\n    /** Store a flag who represents if the number is float or not, by having a dot. ex: \"36.30\".*/\n    hasDot: boolean\n\n    /** Store a flag who represents if the number is negative or not, by having a \"-\". ex: \"-36.30\". */\n    hasNegative: boolean\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CalcController.html":{"url":"controllers/CalcController.html","title":"controller - CalcController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CalcController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/calc/calc.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                calc\n            \n\n            \n                Description\n            \n            \n                Represents the controler of the CalcModule\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                calculate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            calculate\n                        \n                        \n                    \n                \n            \n            \n                \ncalculate(sendCalcDto: SendCalcDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@HttpCode(HttpStatus.OK)\n                \n            \n\n            \n                \n                    Defined in src/calc/calc.controller.ts:23\n                \n            \n\n\n            \n                \n                    The only API route and Method for the application. /calc And POST method.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    sendCalcDto\n                                    \n                                                SendCalcDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Contains data from the POST request, formated as DTO defined in SendCalcDto class.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        An object with 2 property {calculus: string, result: string} -> Calculus contains the calculus, result contains the result of the calculus. \n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Post, Body, HttpCode, HttpStatus } from '@nestjs/common';\nimport { CalcService } from './calc.service';\nimport { SendCalcDto } from './dto/send-calc.dto';\n\n/**\n * Represents the controler of the CalcModule\n */\n@Controller('calc')\nexport class CalcController {\n  /**\n   * Set the injected service\n   * @param {CalcService} calcService The injected service \n   */\n  constructor(private readonly calcService: CalcService) {}\n\n  /**\n   * The only API route and Method for the application. /calc And POST method.\n   * @param sendCalcDto Contains data from the POST request, formated as DTO defined in SendCalcDto class.\n   * @returns An object with 2 property {calculus: string, result: string} -> Calculus contains the calculus, result contains the result of the calculus. \n   */\n  @Post()\n  @HttpCode(HttpStatus.OK)\n  calculate(@Body() sendCalcDto: SendCalcDto) {\n    return this.calcService.calculate(sendCalcDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CalcModule.html":{"url":"modules/CalcModule.html","title":"module - CalcModule","body":"\n                   \n\n\n\n\n    Modules\n    CalcModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CalcModule\n\n\n\ncluster_CalcModule_providers\n\n\n\n\nCalcService\n\nCalcService\n\n\n\nCalcModule\n\nCalcModule\n\nCalcModule -->\n\nCalcService->CalcModule\n\n\n\n\n\nMathService\n\nMathService\n\nCalcModule -->\n\nMathService->CalcModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/calc/calc.module.ts\n        \n\n\n        \n            Description\n        \n        \n            Represents the CalcModule\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CalcService\n                        \n                        \n                            MathService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            CalcController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { CalcService } from './calc.service';\nimport { MathService } from './math.service';\nimport { CalcController } from './calc.controller';\n\n/**\n * Represents the CalcModule\n */\n@Module({\n  controllers: [CalcController],\n  providers: [CalcService, MathService],\n})\nexport class CalcModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CalcService.html":{"url":"injectables/CalcService.html","title":"injectable - CalcService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  CalcService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/calc/calc.service.ts\n        \n\n            \n                Description\n            \n            \n                The role of CalcService is to parse the calculus into usable data. And with MathService methods, resolve the calculus. \nThe logic and the actual math is separated to implements more easely new operators by making the parser agnostic of them. \n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                myLogger\n                            \n                            \n                                    Private\n                                    Readonly\n                                myOperators\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                calculate\n                            \n                            \n                                doCalculate\n                            \n                            \n                                    Private\n                                getHigherPrio\n                            \n                            \n                                    Private\n                                isDot\n                            \n                            \n                                    Private\n                                isFirst\n                            \n                            \n                                    Private\n                                isLast\n                            \n                            \n                                    Private\n                                isNegative\n                            \n                            \n                                    Private\n                                isNumber\n                            \n                            \n                                    Private\n                                isOperator\n                            \n                            \n                                parse\n                            \n                            \n                                    Private\n                                throwErrorParse\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(mathService: MathService)\n                    \n                \n                        \n                            \n                                Defined in src/calc/calc.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        mathService\n                                                  \n                                                        \n                                                                        MathService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            calculate\n                        \n                        \n                    \n                \n            \n            \n                \ncalculate(sendCalcDto: SendCalcDto)\n                \n            \n\n\n            \n                \n                    Defined in src/calc/calc.service.ts:29\n                \n            \n\n\n            \n                \n                    The main method, who does the calculus. First parse the calculus, and resolving it. \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    sendCalcDto\n                                    \n                                                SendCalcDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        DTO formated data sent from the front-end.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     { calculus: any; result: string; }\n\n                    \n                    \n                        The result of the calculus -> {calculus: string, result: string} -> \"calculus\": the calculus to resolve. \"result\": the result of the calculus.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            doCalculate\n                        \n                        \n                    \n                \n            \n            \n                \ndoCalculate(calc: Calc)\n                \n            \n\n\n            \n                \n                    Defined in src/calc/calc.service.ts:216\n                \n            \n\n\n            \n                \n                    Will do the calculus. By iterating over the items, executing each operator with the n-1 and n+1 item around the operator in the array. One execution per iteration, There is as many iteration as operators in the items array. \nEx: \"2+2\" one iteration. \"1+2-3\" two iteration. \nAt each iteration, the operator who will be executed is the operator matching the highest priority number, if multiple number matches the priority number, only the first one in the iteration will be executed. \nAn execution will remove the operator from the array and the n+1 item too. The result of the operation will replace n-1 value in the array. \nFull example: \n  -> 1+2*3 -> after parsing -> [\"1\", {value: \"+\", name: \"addition\", priority: \"1\"}, \"2\", {value: \"+\", name: \"multiplication\", priority: \"2\"}, \"3\"] \n  -> first iteration: [\"1\", {value: \"+\", name: \"addition\", priority: \"1\"}, \"6\"] \n  -> second iteration: [\"7\"]\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    calc\n                                    \n                                                Calc\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Instance of Calc, holding the parsed Calculus to be calculated\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        The result of the calculus\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            getHigherPrio\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getHigherPrio(items: (string | Operator)[])\n                \n            \n\n\n            \n                \n                    Defined in src/calc/calc.service.ts:253\n                \n            \n\n\n            \n                \n                    Will return the highter priority number of the items supplied.\nEx: \"1+2-3*4/5\" -> returns 2.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    items\n                                    \n                                                (string | Operator)[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        An array of items and operators\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        The higher priority number.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            isDot\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isDot(char: string)\n                \n            \n\n\n            \n                \n                    Defined in src/calc/calc.service.ts:180\n                \n            \n\n\n            \n                \n                    Check if the char is a dot.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    char\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        A single char to be checked.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        The boolean value of the check.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            isFirst\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isFirst(i: number)\n                \n            \n\n\n            \n                \n                    Defined in src/calc/calc.service.ts:161\n                \n            \n\n\n            \n                \n                    Check if the char is the first of the calculus, by sending the current index of the for loop.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    i\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Index of the ForLoop.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        The boolean value of the check.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            isLast\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isLast(index: number, chars: string[])\n                \n            \n\n\n            \n                \n                    Defined in src/calc/calc.service.ts:171\n                \n            \n\n\n            \n                \n                    Check if the char is the last of the calculus, by sending the current index of the for loop, and the chars array.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    index\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Index of the ForLoop.\n\n                                    \n                                \n                                \n                                    chars\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Chars array, representing the splited string of the calculus.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        The boolean value of the check.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            isNegative\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isNegative(char: string)\n                \n            \n\n\n            \n                \n                    Defined in src/calc/calc.service.ts:189\n                \n            \n\n\n            \n                \n                    Check if the char is a negative Operator\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    char\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        A single char to be checked.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        The boolean value of the check.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            isNumber\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isNumber(char: string)\n                \n            \n\n\n            \n                \n                    Defined in src/calc/calc.service.ts:143\n                \n            \n\n\n            \n                \n                    Check if the char is a number is superior or equal to 0 and is inferior or equal to 9.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    char\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        A single char to be checked.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        The boolean value of the check.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            isOperator\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isOperator(char: string)\n                \n            \n\n\n            \n                \n                    Defined in src/calc/calc.service.ts:152\n                \n            \n\n\n            \n                \n                    Check if the char is an operator. Operator are stored in a Map.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    char\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        A single char to be checked.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        The boolean value of the check.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            parse\n                        \n                        \n                    \n                \n            \n            \n                \nparse(calculus: string)\n                \n            \n\n\n            \n                \n                    Defined in src/calc/calc.service.ts:46\n                \n            \n\n\n            \n                \n                    This method parse a calculus string. The process is simple: \n\nChecks if the calculus is valid, if not, throws a user-friendly error. \nSeparate items (actual numbers) and operators.\n\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    calculus\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        String representing the calculus.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Calc\n\n                    \n                    \n                        Returns a Calc with Calc.items property filled with the parsed calculus.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            throwErrorParse\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    throwErrorParse(message)\n                \n            \n\n\n            \n                \n                    Defined in src/calc/calc.service.ts:198\n                \n            \n\n\n            \n                \n                    Send an error message to the front-end, with 422 code, who's catched by the front-end and properly handled. And make a clean log.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    message\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        User friendly message of the error.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            myLogger\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Logger(CalcService.name)\n                        \n                    \n                        \n                            \n                                    Defined in src/calc/calc.service.ts:13\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            myOperators\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Map\n\n                        \n                    \n                    \n                        \n                            Default value : new Map()\n                        \n                    \n                        \n                            \n                                    Defined in src/calc/calc.service.ts:14\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable, Logger } from '@nestjs/common';\nimport { SendCalcDto } from './dto/send-calc.dto';\nimport { Calc, CurrentItem, Operator } from './entities/calc.entity';\nimport { MathService } from './math.service';\nimport * as data from './operators.json';\n\n/**\n * The role of CalcService is to parse the calculus into usable data. And with MathService methods, resolve the calculus. \n * The logic and the actual math is separated to implements more easely new operators by making the parser agnostic of them. \n */\n@Injectable()\nexport class CalcService {\n  private readonly myLogger = new Logger(CalcService.name);\n  private readonly myOperators: Map = new Map();\n\n  constructor(\n    private mathService: MathService\n  ) {\n    data.operators.forEach(obj => {\n      this.myOperators.set(obj.value, new Operator(obj.value, Number(obj.priority), obj.name))\n    })\n  }\n  \n  /**\n   * The main method, who does the calculus. First parse the calculus, and resolving it. \n   * @param {SendCalcDto} sendCalcDto DTO formated data sent from the front-end.\n   * @returns {object} The result of the calculus -> {calculus: string, result: string} -> \"calculus\": the calculus to resolve. \"result\": the result of the calculus.\n   */\n  calculate(sendCalcDto: SendCalcDto) {\n    const calc = this.parse(sendCalcDto.calculus);\n    calc.result = this.doCalculate(calc);\n    \n    return {\n      calculus: calc.calculus,\n      result: this.doCalculate(calc)\n    };\n  }\n\n  /**\n   * This method parse a calculus string. The process is simple: \n   *  1. Checks if the calculus is valid, if not, throws a user-friendly error. \n   *  2. Separate items (actual numbers) and operators.\n   * @param calculus String representing the calculus.\n   * @returns {Calc} Returns a Calc with Calc.items property filled with the parsed calculus.\n   */\n  parse(calculus: string): Calc {\n    const items: (string |Operator)[] = []\n    let curr = new CurrentItem();\n\n    const chars = calculus.split(\"\");\n    for (let i=0; i Make a cleaner version who handles dot folowed by operator */\n\n      if (!this.isLast(i, chars) && (this.isOperator(chars[i]) || this.isDot(chars[i]))) {\n        if (this.isDot(chars[i+1]) || (this.isOperator(chars[i+1]) && !this.isNegative(chars[i+1]))) {\n          this.throwErrorParse(`two dots, two operators, or dot/operator can't be after one dot/operator: ${calculus}`);\n        }\n      } \n      \n      // Handle the last char, which is suposed to be a number\n      if (this.isLast(i, chars) && this.isNumber(chars[i])) {\n        items.push(curr.value + chars[i]);\n        continue;\n      }\n\n      // Allow negative members\n      if (this.isFirst(i) && this.isNegative(chars[i])) {\n        curr = new CurrentItem(curr.value += chars[i], false, true);\n        continue;\n      }\n\n      if (!this.isFirst(i)) {\n        if (this.isNegative(chars[i]) && this.isOperator(chars[i-1])) {\n          curr = new CurrentItem(curr.value += chars[i], false, true);\n          continue;\n        }\n      }\n\n      // Adds every number or dot\n      if (this.isNumber(chars[i]) && (this.isNumber(chars[i+1]) || this.isDot(chars[i+1]))) {\n        curr = new CurrentItem(curr.value += chars[i], curr.hasDot, curr.hasNegative);\n        continue;\n      }\n\n      if (this.isDot(chars[i])) {\n        curr = new CurrentItem(curr.value += chars[i], true, curr.hasNegative);\n        continue;\n      }\n\n      if (this.isLast(i, chars)) {\n        this.throwErrorParse(`Last character isn't number, operator or dot: ${calculus}`);\n        continue; // should never get there\n      }\n\n      // Handle a  switch from number/operator happen\n      if (this.isNumber(chars[i]) && this.isOperator(chars[i+1])) {\n        items.push(curr.value + chars[i]);\n        curr = new CurrentItem(\"\", false);\n        continue;\n      }\n\n      if (this.isOperator(chars[i]) && (this.isNumber(chars[i+1]) || this.isNegative(chars[i+1]))) {\n        items.push(this.myOperators.get(chars[i]));\n        curr = new CurrentItem(\"\", false);\n        continue;\n      }\n    }\n\n    return new Calc(calculus, items);\n  }\n\n  /**\n   * Check if the char is a number is superior or equal to 0 and is inferior or equal to 9.\n   * @param char A single char to be checked.\n   * @returns {boolean} The boolean value of the check.\n   */\n  private isNumber(char: string): boolean {\n    return (+char >= 0 && +char .\n   * @param char A single char to be checked.\n   * @returns {boolean} The boolean value of the check.\n   */\n  private isOperator(char: string): boolean {\n    return this.myOperators.has(char);\n  }\n\n  /**\n   * Check if the char is the first of the calculus, by sending the current index of the for loop.\n   * @param i Index of the ForLoop.\n   * @returns {boolean} The boolean value of the check.\n   */\n  private isFirst(i: number): boolean {\n    return i === 0;\n  }\n\n  /**\n   * Check if the char is the last of the calculus, by sending the current index of the for loop, and the chars array.\n   * @param index Index of the ForLoop.\n   * @param chars Chars array, representing the splited string of the calculus.\n   * @returns {boolean} The boolean value of the check.\n   */\n  private isLast(index: number, chars: string[]): boolean {\n    return index == (chars.length-1);\n  }\n\n  /**\n   * Check if the char is a dot.\n   * @param char A single char to be checked.\n   * @returns {boolean} The boolean value of the check.\n   */\n  private isDot(char: string): boolean {\n    return char === '.';\n  }\n\n  /**\n   * Check if the char is a negative Operator\n   * @param char A single char to be checked.\n   * @returns {boolean} The boolean value of the check.\n   */\n  private isNegative(char: string): boolean {\n    return char === '-';\n  }\n\n  /**\n   * Send an error message to the front-end, with 422 code, who's catched by the front-end and properly handled. And make a clean log.\n   * @param message User friendly message of the error.\n   * @throws {HttpException} A user friendly error\n   */\n  private throwErrorParse(message) {\n    const completeMsg = `An error occured during the execution of the calculus: ${message}`;\n    this.myLogger.error(completeMsg);\n    throw new HttpException(completeMsg, HttpStatus.UNPROCESSABLE_ENTITY)\n  }\n\n  /**\n   * Will do the calculus. By iterating over the items, executing each operator with the n-1 and n+1 item around the operator in the array. One execution per iteration, There is as many iteration as operators in the items array. \n   * Ex: \"2+2\" one iteration. \"1+2-3\" two iteration. \n   * At each iteration, the operator who will be executed is the operator matching the highest priority number, if multiple number matches the priority number, only the first one in the iteration will be executed. \n   * An execution will remove the operator from the array and the n+1 item too. The result of the operation will replace n-1 value in the array. \n   * Full example: \n   *  -> 1+2*3 -> after parsing -> [\"1\", {value: \"+\", name: \"addition\", priority: \"1\"}, \"2\", {value: \"+\", name: \"multiplication\", priority: \"2\"}, \"3\"] \n   *  -> first iteration: [\"1\", {value: \"+\", name: \"addition\", priority: \"1\"}, \"6\"] \n   *  -> second iteration: [\"7\"]\n   * @param {Calc} calc Instance of Calc, holding the parsed Calculus to be calculated\n   * @returns The result of the calculus\n   */\n  doCalculate(calc: Calc): string {\n    const items: (string|Operator)[] = Array.from(calc.items)    \n    let nbOperators: number = 0;\n    items.forEach(item => {\n      if (item instanceof Operator) {\n        nbOperators++;\n      }\n    })\n\n    let higherPrio = 0;\n    for (let j=0; j returns 2.\n   * @param items An array of items and operators\n   * @returns {number} The higher priority number.\n   */\n  private getHigherPrio(items: (string|Operator)[]): number {\n    let result = 0\n\n    items.forEach(item => {\n      if (item instanceof Operator) {\n        if (item.priority > result) {\n          result = item.priority;\n        }\n      }\n    })\n\n    return result;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CurrentItem.html":{"url":"classes/CurrentItem.html","title":"class - CurrentItem","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CurrentItem\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/calc/entities/calc.entity.ts\n        \n\n            \n                Description\n            \n            \n                Represents an object, who stores informations about current item who's being parsed by the parser. \n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                hasDot\n                            \n                            \n                                hasNegative\n                            \n                            \n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(value: string, hasDot: boolean, hasNegative: boolean)\n                    \n                \n                        \n                            \n                                Defined in src/calc/entities/calc.entity.ts:53\n                            \n                        \n\n                \n                    \n                            Set value for new CurrentItem instance.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        value\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Current item value.\n\n                                                        \n                                                \n                                                \n                                                        hasDot\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Flag if  contains dot.\n\n                                                        \n                                                \n                                                \n                                                        hasNegative\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Flag if item is negative -> contains \"-\" at first position.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            hasDot\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in src/calc/entities/calc.entity.ts:70\n                            \n                        \n\n                \n                    \n                        Store a flag who represents if the number is float or not, by having a dot. ex: \"36.30\".\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            hasNegative\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in src/calc/entities/calc.entity.ts:73\n                            \n                        \n\n                \n                    \n                        Store a flag who represents if the number is negative or not, by having a \"-\". ex: \"-36.30\". \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            value\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/calc/entities/calc.entity.ts:67\n                            \n                        \n\n                \n                    \n                        Store the current sumber.\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Calc {\n    constructor(calculus: string, items: (string | Operator)[]) {\n        this.calculus = calculus;\n        this.items = items;\n    }\n\n    /** The calculus. */\n    calculus: string\n\n    /** The sequence of items (number) and Operators */\n    items: (string | Operator)[]\n\n    /** The result of the calculus */\n    result: string\n}\n\n/**\n * Represents an operator. \n * Operators values are defined in the file: operators.json -> \n *  * \n *  {\"operators\": [\n *      {\"value\" : \"+\", \"priority\" : \"1\", \"name\": \"addition\"},\n *      {\"value\" : \"-\", \"priority\" : \"1\", \"name\": \"substraction\"},\n *      {\"value\" : \"*\", \"priority\" : \"2\", \"name\": \"multiplication\"},\n *      {\"value\" : \"/\", \"priority\" : \"2\", \"name\": \"division\"}\n *  ]}\n * \n */\nexport class Operator { \n    constructor(value: string, priority: number, name: string) {\n        this.value = value;\n        this.priority = priority;\n        this.name = name;\n    }\n\n    /** Symbol as string ex: \"+\". */\n    value: string\n\n    /** Priority level as int, higher the number is, higher the priority is ex: \"+ -> priority: 1\", \"* -> priority: 2\" ==> The \"*\" will be executed first. */\n    priority: number\n\n    /** Name of the function is MathService, which is able to actually to the operation Ex: \"addition\" -> perform a+b. */\n    name: string\n}\n\n/**\n * Represents an object, who stores informations about current item who's being parsed by the parser. \n */\nexport class CurrentItem {\n    /**\n     * Set value for new CurrentItem instance.\n     * @param {string} value Current item value.\n     * @param {boolean} hasDot Flag if  contains dot.\n     * @param {boolean} hasNegative Flag if item is negative -> contains \"-\" at first position.\n     */\n    constructor(value: string=\"\", hasDot: boolean=false, hasNegative: boolean=false) {\n        this.value = value;\n        this.hasDot = hasDot;\n        this.hasNegative = hasNegative;\n    }\n\n    /** Store the current sumber.*/\n    value: string\n\n    /** Store a flag who represents if the number is float or not, by having a dot. ex: \"36.30\".*/\n    hasDot: boolean\n\n    /** Store a flag who represents if the number is negative or not, by having a \"-\". ex: \"-36.30\". */\n    hasNegative: boolean\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MathService.html":{"url":"injectables/MathService.html","title":"injectable - MathService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  MathService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/calc/math.service.ts\n        \n\n            \n                Description\n            \n            \n                This service execute math functions, all math function params are string to avoid JS doing imprecision with Float values. That's why Decimal.js is used. \nFor more details see this topic: https://stackoverflow.com/questions/1458633/how-to-deal-with-floating-point-number-precision-in-javascript\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                myMathFunctions\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addition\n                            \n                            \n                                division\n                            \n                            \n                                getMathFunction\n                            \n                            \n                                multiplication\n                            \n                            \n                                substraction\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/calc/math.service.ts:15\n                            \n                        \n\n                \n                    \n                            Initialize myMathFunctions property, a Map with every math function we implemented.\n\n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            addition\n                        \n                        \n                    \n                \n            \n            \n                \naddition(a: string, b: string)\n                \n            \n\n\n            \n                \n                    Defined in src/calc/math.service.ts:42\n                \n            \n\n\n            \n                \n                    Perform an addition\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    a\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    b\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        the result of a + b\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            division\n                        \n                        \n                    \n                \n            \n            \n                \ndivision(a: string, b: string)\n                \n            \n\n\n            \n                \n                    Defined in src/calc/math.service.ts:72\n                \n            \n\n\n            \n                \n                    Perform a division\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    a\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    b\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        The result of a / b\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getMathFunction\n                        \n                        \n                    \n                \n            \n            \n                \ngetMathFunction(name: string)\n                \n            \n\n\n            \n                \n                    Defined in src/calc/math.service.ts:32\n                \n            \n\n\n            \n                \n                    Returns a math function who's gonna be executed.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The name of the math function to return.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        A function with 2 string parameter, a & b, executing a single math task.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            multiplication\n                        \n                        \n                    \n                \n            \n            \n                \nmultiplication(a: string, b: string)\n                \n            \n\n\n            \n                \n                    Defined in src/calc/math.service.ts:62\n                \n            \n\n\n            \n                \n                    Perform a multiplication\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    a\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    b\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        The result of a * b\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            substraction\n                        \n                        \n                    \n                \n            \n            \n                \nsubstraction(a: string, b: string)\n                \n            \n\n\n            \n                \n                    Defined in src/calc/math.service.ts:52\n                \n            \n\n\n            \n                \n                    Perform a substraction\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    a\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    b\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        The result of a - b\n\n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            myMathFunctions\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Map\n\n                        \n                    \n                    \n                        \n                            Default value : new Map()\n                        \n                    \n                        \n                            \n                                    Defined in src/calc/math.service.ts:15\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { Decimal } from 'decimal.js'\n\n/**\n * This service execute math functions, all math function params are string to avoid JS doing imprecision with Float values. That's why Decimal.js is used. \n * For more details see this topic: https://stackoverflow.com/questions/1458633/how-to-deal-with-floating-point-number-precision-in-javascript\n */\n@Injectable()\nexport class MathService {\n\n    /**\n     * @property {Map} myMathFunctions Stores a set of functions, key is a string, representing the name of the function. \n     * @private \n     */\n    private readonly myMathFunctions: Map = new Map();\n\n    /**\n     * Initialize myMathFunctions property, a Map with every math function we implemented.\n     */\n    constructor() {\n        this.myMathFunctions.set(\"addition\", this.addition)\n        this.myMathFunctions.set(\"substraction\", this.substraction)\n        this.myMathFunctions.set(\"multiplication\", this.multiplication)\n        this.myMathFunctions.set(\"division\", this.division)\n    }\n\n    /**\n     * Returns a math function who's gonna be executed.\n    * @param {string} name  The name of the math function to return.\n    * @returns {function} A function with 2 string parameter, a & b, executing a single math task.\n    */\n    getMathFunction(name: string): any {\n        return this.myMathFunctions.get(name);\n    }\n\n    /**\n     * Perform an addition\n     * @param {string} a\n     * @param {string} b\n     * @returns {string} the result of a + b\n     */\n    addition(a:string, b:string): string {\n        return new Decimal(a).plus(b).toFixed();\n    }\n\n    /**\n     * Perform a substraction\n     * @param {string} a \n     * @param {string} b \n     * @returns {string} The result of a - b\n     */\n    substraction(a:string, b:string): string {\n        return new Decimal(a).minus(b).toFixed();\n    }\n\n    /**\n     * Perform a multiplication\n     * @param {string} a \n     * @param {string} b \n     * @returns {string} The result of a * b\n     */\n    multiplication(a:string, b:string): string {\n        return new Decimal(a).times(b).toFixed();\n    }\n\n    /**\n     * Perform a division\n     * @param {string} a \n     * @param {string} b \n     * @returns {string} The result of a / b\n     */\n    division(a:string, b:string): string {\n        return new Decimal(a).dividedBy(b).toFixed();\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Operator.html":{"url":"classes/Operator.html","title":"class - Operator","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Operator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/calc/entities/calc.entity.ts\n        \n\n            \n                Description\n            \n            \n                Represents an operator. \nOperators values are defined in the file: operators.json -> \n\n{\"operators\": [\n  {\"value\" : \"+\", \"priority\" : \"1\", \"name\": \"addition\"},\n  {\"value\" : \"-\", \"priority\" : \"1\", \"name\": \"substraction\"},\n  {\"value\" : \"*\", \"priority\" : \"2\", \"name\": \"multiplication\"},\n  {\"value\" : \"/\", \"priority\" : \"2\", \"name\": \"division\"}\n]}\n\n\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                            \n                                priority\n                            \n                            \n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(value: string, priority: number, name: string)\n                    \n                \n                        \n                            \n                                Defined in src/calc/entities/calc.entity.ts:33\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        value\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        priority\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/calc/entities/calc.entity.ts:47\n                            \n                        \n\n                \n                    \n                        Name of the function is MathService, which is able to actually to the operation Ex: \"addition\" -> perform a+b. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            priority\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/calc/entities/calc.entity.ts:44\n                            \n                        \n\n                \n                    \n                        Priority level as int, higher the number is, higher the priority is ex: \"+ -> priority: 1\", \"* -> priority: 2\" ==> The \"*\" will be executed first. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            value\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/calc/entities/calc.entity.ts:41\n                            \n                        \n\n                \n                    \n                        Symbol as string ex: \"+\". \n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Calc {\n    constructor(calculus: string, items: (string | Operator)[]) {\n        this.calculus = calculus;\n        this.items = items;\n    }\n\n    /** The calculus. */\n    calculus: string\n\n    /** The sequence of items (number) and Operators */\n    items: (string | Operator)[]\n\n    /** The result of the calculus */\n    result: string\n}\n\n/**\n * Represents an operator. \n * Operators values are defined in the file: operators.json -> \n *  * \n *  {\"operators\": [\n *      {\"value\" : \"+\", \"priority\" : \"1\", \"name\": \"addition\"},\n *      {\"value\" : \"-\", \"priority\" : \"1\", \"name\": \"substraction\"},\n *      {\"value\" : \"*\", \"priority\" : \"2\", \"name\": \"multiplication\"},\n *      {\"value\" : \"/\", \"priority\" : \"2\", \"name\": \"division\"}\n *  ]}\n * \n */\nexport class Operator { \n    constructor(value: string, priority: number, name: string) {\n        this.value = value;\n        this.priority = priority;\n        this.name = name;\n    }\n\n    /** Symbol as string ex: \"+\". */\n    value: string\n\n    /** Priority level as int, higher the number is, higher the priority is ex: \"+ -> priority: 1\", \"* -> priority: 2\" ==> The \"*\" will be executed first. */\n    priority: number\n\n    /** Name of the function is MathService, which is able to actually to the operation Ex: \"addition\" -> perform a+b. */\n    name: string\n}\n\n/**\n * Represents an object, who stores informations about current item who's being parsed by the parser. \n */\nexport class CurrentItem {\n    /**\n     * Set value for new CurrentItem instance.\n     * @param {string} value Current item value.\n     * @param {boolean} hasDot Flag if  contains dot.\n     * @param {boolean} hasNegative Flag if item is negative -> contains \"-\" at first position.\n     */\n    constructor(value: string=\"\", hasDot: boolean=false, hasNegative: boolean=false) {\n        this.value = value;\n        this.hasDot = hasDot;\n        this.hasNegative = hasNegative;\n    }\n\n    /** Store the current sumber.*/\n    value: string\n\n    /** Store a flag who represents if the number is float or not, by having a dot. ex: \"36.30\".*/\n    hasDot: boolean\n\n    /** Store a flag who represents if the number is negative or not, by having a \"-\". ex: \"-36.30\". */\n    hasNegative: boolean\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SendCalcDto.html":{"url":"classes/SendCalcDto.html","title":"class - SendCalcDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SendCalcDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/calc/dto/send-calc.dto.ts\n        \n\n            \n                Description\n            \n            \n                Represents the body of the post request. to /Calc.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                calculus\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            calculus\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/calc/dto/send-calc.dto.ts:9\n                            \n                        \n\n                \n                    \n                        The calculus to resolve. \n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString } from \"class-validator\"\n\n/**\n * Represents the body of the post request. to /Calc.\n */\nexport class SendCalcDto {\n    /** The calculus to resolve. */\n    @IsString()\n    readonly calculus: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/calc/calc.controller.ts\n            \n            controller\n            CalcController\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/calc/calc.service.ts\n            \n            injectable\n            CalcService\n            \n                80 %\n                (12/15)\n            \n        \n        \n            \n                \n                src/calc/dto/send-calc.dto.ts\n            \n            class\n            SendCalcDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/calc/entities/calc.entity.ts\n            \n            class\n            Calc\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                src/calc/entities/calc.entity.ts\n            \n            class\n            CurrentItem\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/calc/entities/calc.entity.ts\n            \n            class\n            Operator\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                src/calc/math.service.ts\n            \n            injectable\n            MathService\n            \n                87 %\n                (7/8)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                100 %\n                (1/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^7.6.15\n        \n            @nestjs/core : ^7.6.15\n        \n            @nestjs/mapped-types : *\n        \n            @nestjs/platform-express : ^7.6.15\n        \n            @nestjs/serve-static : ^2.1.4\n        \n            class-transformer : ^0.4.0\n        \n            class-validator : ^0.13.1\n        \n            decimal.js : ^10.3.1\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^6.6.6\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            bootstrap\n                        \n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n            \n                \n                    The function that initialize the server. \nCORS because front-end is at path \"/\" and the api at \"/calc\" \nTwo ports option -> process.env.PORT for heroku, 8080 for local run.\n\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nDescription\nA simple calculator made with love, Nest framework and React.\nBack-end code is stored here\nFront-end code is stored here\nTry it on Heroku\nFor fast testing, the app is deployed to Heroku here.\nSince the host is free, the first launch may take 30 seconds to stop the app from hibernating.\nStep 1 - Get repository\n$ git clone https://github.com/TheSmartHyena/calc-backend\n$ cd calc-backendStep 2 - Running the app with Docker\n$ docker-compose upAlternative Step 2 - Installation & Running the app with NPM\n# install node modules\n$ npm install \n\n# production mode\n$ npm run start:prodStep 3 - Do some math\nYou can now open your browser at http://localhost:8080 and use the calculator.\nOr request the API at http://localhost:8080/calc.\nAPI\nYou don't have to use the browser to use the app. You can manually request the API.\nWith Insomnia or Postman, you can send POST request on http://localhost:8080/calc.\nThe body need to match this signature: {calculus: string}.\nExample: {\"calculus\": \"2+2\"} -> As answer you receive: {\"calculus\": \"2+2\", \"result\": \"4\"}\nLibraries / Frameworks used\nBack-end\n\nNest\nDecimal.js \n\nFront-end\n\nReact\nReact-bootstrap\nBootstrap 4\n\nAuthor\nMade by Skopal Philippe a.k.a TheSmartHyena\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CalcModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_CalcModule\n\n\n\ncluster_CalcModule_providers\n\n\n\n\nCalcModule\n\nCalcModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nCalcModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nMathService\n\nMathService\n\nCalcModule -->\n\nMathService->CalcModule\n\n\n\nAppModule -->\n\nMathService->AppModule\n\n\n\n\n\nCalcService\n\nCalcService\n\nCalcModule -->\n\nCalcService->CalcModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        2 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    2 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    3 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    4 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
